; Script generated by the HM NIS Edit Script Wizard.

; defines required for upgrade process
; the '1 ##VERSION string is used by the build script as a token
!define MAJOR_VERSION 1 ##MAJOR
!define MINOR_VERSION 1 ##MINOR
!define REVISION_NUMBER 1 ##REVISION
!define BUILD_NUMBER 1 ##BUILD

; HM NIS Edit Wizard helper defines
!define PRODUCT_NAME "ClearCanvas Enterprise Server"
!define PRODUCT_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}"
!define PRODUCT_PUBLISHER "ClearCanvas Inc."
!define PRODUCT_WEB_SITE "http://www.clearcanvas.ca"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\ClearCanvas.Enterprise.Server.Executable.exe"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

; MUI 1.67 compatible ------


!include "DumpLog.nsh"
!include "FileFunc.nsh"
!include "LogicLib.nsh"
!include "MUI.nsh"
!include "RemoveService.nsh"
!include "Replacement.nsh"
!include "servicelib.nsh"
!include "TestDBConnect.nsh"
!include "XML.nsh"

;Macros
!insertmacro GetParameters
!insertmacro GetOptions
!insertmacro un.GetParameters
!insertmacro un.GetOptions

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
!insertmacro MUI_PAGE_LICENSE "..\..\..\..\License.rtf"
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE VerifyComponent
!insertmacro MUI_PAGE_COMPONENTS
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Custom page - get database admin login
Page custom PageDatabaseAdmin ValidatePageDatabaseAdmin
; Custom page - fetches database info
Page custom PageDatabaseInstall ValidatePageDatabaseInstall
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; MUI end ------

; Reserve files
ReserveFile "PageDatabaseAdmin.ini"
ReserveFile "PageDatabaseInstall.ini"

; Variables
; Collected in PageDatabaseAdmin.ini
Var INI_ADMINID
Var INI_ADMINPASS
Var INI_HOSTINSTANCE
Var INI_2SLASHHOSTINSTANCE
; Collected in PageDatabaseInstall.ini
Var INI_DBNAME
Var INI_DBFILEDIR
; Only For Silent Install case
Var INI_NOSRV
Var INI_NODB
Var INI_REMOVEDB

Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "${PRODUCT_NAME}.exe"
InstallDir "$PROGRAMFILES\ClearCanvas\${PRODUCT_NAME}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

#Core Components
Section "-Executable"
  SetOutPath "$INSTDIR"
  SetOverwrite ifnewer
  File /r /x *.svn* "..\..\..\..\Enterprise\Server\Executable\bin\Release\*.*"
SectionEnd

Section "-Utilities"
  SetOutPath "$INSTDIR\utilities"
  SetOverwrite ifnewer
  File /r /x *.svn* "..\..\Common\Utilities\*.*"
SectionEnd

Section "-GenerateHibernateConfig"
  DetailPrint "Configuring Hibernate"
  ${xml::LoadFile} "$INSTDIR\hibernate.cfg.xml" $0
  ${xml::GotoPath} "/hibernate-configuration/session-factory" $0
  ${xml::FirstChildElement} "property" $0 $1

  loopAppConnectionString:
  ${xml::GetAttribute} "name" $0 $1
  StrCmp "connection.connection_string" $0 foundAppConnectionString ;breaks loop

  ${xml::NextSiblingElement} "property" $0 $1
  StrCmp $1 "0" loopAppConnectionString findFailed ;loops unless an error occurred

  foundAppConnectionString:
  ${xml::SetText} "Data Source=$INI_HOSTINSTANCE;Initial Catalog=$INI_DBNAME;User Id=$INI_ADMINID;Password=$INI_ADMINPASS" $0

  loopDefaultSchema:
  ${xml::NextSiblingElement} "property" $0 $1
  StrCmp $1 "0" "" findFailed ;breaks loop

  ${xml::GetAttribute} "name" $0 $1
  StrCmp "hibernate.default_schema" $0 foundDefaultSchema loopDefaultSchema

  foundDefaultSchema:
  ${xml::SetText} "$INI_DBNAME.dbo" $0

  ${xml::SaveFile} "$INSTDIR\hibernate.cfg.xml" $0
  ${xml::Unload}
  Return

  findFailed:
  MessageBox MB_OK "A failure has occurred on service component configuration." /SD IDOK
  Abort
SectionEnd

SectionGroup /e "Database Components" GRPDB
  Section "-Scripts"
    SetOutPath "$INSTDIR\scripts"
    SetOverwrite ifnewer
    File /r /x *.svn* "..\..\Common\Scripts\*.*"
  SectionEnd

  Section "-GenerateDBJScript"
      DetailPrint "Generating script utility"
      GetFunctionAddress $R0 ReplaceInDBJscript
      Push $R0
      Push "$INSTDIR\scripts\dbgo.js"
      Call ReplaceInFile
  SectionEnd

  Section "-GenerateDB"
    FileOpen $0 "$TEMP\dbcreate.js" w

    FileWrite $0 "USE [master]$\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "/****** Object:  Database [$INI_DBNAME]    Script Date: 02/20/2009 17:16:02 ******/$\r$\n"
    FileWrite $0 "CREATE DATABASE [$INI_DBNAME] ON  PRIMARY $\r$\n"
    FileWrite $0 "( NAME = N'$INI_DBNAME', FILENAME = N'$INI_DBFILEDIR\$INI_DBNAME.mdf' , SIZE = 64MB , MAXSIZE = UNLIMITED, FILEGROWTH = 64MB ), $\r$\n"
    FileWrite $0 " FILEGROUP [INDEXES] $\r$\n"
    FileWrite $0 "( NAME = N'$INI_DBNAME Indexes', FILENAME = N'$INI_DBFILEDIR\$INI_DBNAME Indexes.ndf' , SIZE = 64MB , MAXSIZE = UNLIMITED, FILEGROWTH = 64MB ), $\r$\n"
    FileWrite $0 " FILEGROUP [QUEUES] $\r$\n"
    FileWrite $0 "( NAME = N'$INI_DBNAME Queues', FILENAME = N'$INI_DBFILEDIR\$INI_DBNAME Queues.ndf' , SIZE = 64MB , MAXSIZE = UNLIMITED, FILEGROWTH = 64MB ), $\r$\n"
    FileWrite $0 " FILEGROUP [STATIC] $\r$\n"
    FileWrite $0 "( NAME = N'$INI_DBNAME Static Tables', FILENAME = N'$INI_DBFILEDIR\$INI_DBNAME Static Tables.ndf' , SIZE = 4MB , MAXSIZE = UNLIMITED, FILEGROWTH = 2MB )$\r$\n"
    FileWrite $0 " LOG ON $\r$\n"
    FileWrite $0 "( NAME = N'$INI_DBNAME log', FILENAME = N'$INI_DBFILEDIR\$INI_DBNAME_log.LDF' , SIZE = 32MB , MAXSIZE = 20GB , FILEGROWTH = 10%)$\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "EXEC dbo.sp_dbcmptlevel @dbname=N'$INI_DBNAME', @new_cmptlevel=90$\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))$\r$\n"
    FileWrite $0 "begin$\r$\n"
    FileWrite $0 "EXEC [$INI_DBNAME].[dbo].[sp_fulltext_database] @action = 'enable'$\r$\n"
    FileWrite $0 "end$\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET ANSI_NULL_DEFAULT OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET ANSI_NULLS OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET ANSI_PADDING OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET ANSI_WARNINGS OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET ARITHABORT OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET AUTO_CLOSE OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET AUTO_CREATE_STATISTICS ON $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET AUTO_SHRINK OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET AUTO_UPDATE_STATISTICS ON $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET CURSOR_CLOSE_ON_COMMIT OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET CURSOR_DEFAULT  GLOBAL $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET CONCAT_NULL_YIELDS_NULL OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET NUMERIC_ROUNDABORT OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET QUOTED_IDENTIFIER OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET RECURSIVE_TRIGGERS OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET  ENABLE_BROKER $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET AUTO_UPDATE_STATISTICS_ASYNC OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET DATE_CORRELATION_OPTIMIZATION OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET TRUSTWORTHY OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET ALLOW_SNAPSHOT_ISOLATION OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET PARAMETERIZATION SIMPLE $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET READ_WRITE $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET RECOVERY FULL $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET  MULTI_USER $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET PAGE_VERIFY CHECKSUM  $\r$\n"
    FileWrite $0 "GO$\r$\n"
    FileWrite $0 "ALTER DATABASE [$INI_DBNAME] SET DB_CHAINING OFF $\r$\n"
    FileWrite $0 "GO$\r$\n"

    FileClose $0

    DetailPrint "Creating database..."
    nsExec::ExecToLog '"$INSTDIR\utilities\SSEUtil.exe" -m -s $INI_HOSTINSTANCE -user $INI_ADMINID -pwd $INI_ADMINPASS -run "$TEMP\dbcreate.js"'

    Delete "$TEMP\dbcreate.js"
  SectionEnd

  Section "-RunModelSql"
      ;DetailPrint "Generating table script.  This may take a few seconds..."
      ;nsExec::ExecToLog '"$INSTDIR\ClearCanvasEnterprise.Server.Executable.exe" ClearCanvas.Enterprise.Hibernate.DdlWriter.DdlWriterApplication /ix /fki /enums+ /out:"$INSTDIR\model.sql"'

      DetailPrint "Creating tables and inserting data..."
      FileOpen $0 "$INSTDIR\setup\model.sql" a
      FileSeek $0 0 END
      FileWrite $0 "$\r$\nGO$\r$\n"
      FileClose $0
      nsExec::ExecToLog '"$INSTDIR\utilities\SSEUtil.exe" -m -s $INI_HOSTINSTANCE -user $INI_ADMINID -pwd $INI_ADMINPASS -run "$INSTDIR\setup\model.sql"'
  SectionEnd

  Section "-Permissions"
    AccessControl::GrantOnFile "$INSTDIR\hibernate.cfg.xml" "Users"  "GenericRead + GenericWrite + GenericExecute + Delete"
  SectionEnd

  Section "-SetupAuthentication"
      DetailPrint "Setting up database user..."
      nsExec::ExecToLog '"$INSTDIR\ClearCanvas.Enterprise.Server.Executable.exe" ClearCanvas.Enterprise.Authentication.Setup.SetupApplication'
  SectionEnd
SectionGroupEnd

SectionGroup /e "Service Component" GRPSRV
  Section "-ShredHostServiceInstall"
    !insertmacro SERVICE "create" "ClearCanvas Enterprise Server Shred Host Service" \
    "path=$INSTDIR\ClearCanvas.Server.ShredHostService.exe -service;autostart=1;display=ClearCanvas Enterprise Server Shred Host Service;"

    ;Sets description
    WriteRegStr HKLM \
    "SYSTEM\CurrentControlSet\Services\ClearCanvas Enterprise Server Shred Host Service" \
    "Description" "Hosts the ClearCanvas Enterprise Server Threads (Shreds)."
  SectionEnd
  
  Section "-StartService"
    DetailPrint "Starting Service..."
   !insertmacro SERVICE "installed" "ClearCanvas Enterprise Server Shred Host Service" "action=start;"
  SectionEnd
SectionGroupEnd

# Service Removal Sections
Section /o "-No Database" NODB
  RMDir /r "$INSTDIR\scripts"
SectionEnd

Section /o "-No Service" NOSRV
  RMDir /r "$INSTDIR\plugins"
  RMDir /r "$INSTDIR\common"
  Delete "$INSTDIR\ClearCanvas.Enterprise.Server.Executable.*"
  Delete "$INSTDIR\ClearCanvas.Server.ShredHostService.*"
  Delete "$INSTDIR\Logging.config"
  Delete "$INSTDIR\hibernate.cfg.xml"
SectionEnd

Section -AdditionalIcons
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateDirectory "$SMPROGRAMS\${PRODUCT_NAME}"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Uninstall.lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\ClearCanvas.Enterprise.Server.Executable.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\ClearCanvas.Enterprise.Server.Executable.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  
  StrCpy $0 "$INSTDIR\install.log"
  Push $0
  Call DumpLog
SectionEnd


Function .onInit
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDatabaseAdmin.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDatabaseInstall.ini"
  
  IfSilent +2 +1
    Return
  ;For Silent Install
  ${GetParameters} $R0
  ClearErrors
  ${GetOptions} $R0 /ADMINID= $INI_ADMINID
  ${GetOptions} $R0 /ADMINPASS= $INI_ADMINPASS
  ${GetOptions} $R0 /HOSTINSTANCE= $INI_HOSTINSTANCE
  ${GetOptions} $R0 /DBNAME= $INI_DBNAME
  ${GetOptions} $R0 /DBFILEDIR= $INI_DBFILEDIR
  ${GetOptions} $R0 /NOSRV= $INI_NOSRV
  ${GetOptions} $R0 /NODB= $INI_NODB
  
  Push $INI_HOSTINSTANCE
  Push "\"
  Push "\\"
  Call StrRep
  Pop "$R0"
  StrCpy $INI_2SLASHHOSTINSTANCE $R0
  
  ${If} $INI_NODB == "True"
    !insertmacro UnSelectSection ${GRPDB}
    !insertmacro SetSectionFlag ${NODB} ${SF_SELECTED}
  ${EndIf}
  
  ${If} $INI_NOSRV == "True"
    !insertmacro UnSelectSection ${GRPSRV}
    !insertmacro SetSectionFlag ${NOSRV} ${SF_SELECTED}
  ${EndIf}
FunctionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer." /SD IDOK
FunctionEnd

Function un.onInit
  ;For Silent Install
  ${un.GetParameters} $R0
  ${un.GetOptions} $R0 /REMOVEDB= $INI_REMOVEDB
  
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" /SD IDYES IDYES +2
  Abort
FunctionEnd

Function VerifyComponent
  SectionGetFlags ${GRPDB} $R1
  IntOp $R1 $R1 & ${SF_SELECTED}
  SectionGetFlags ${GRPSRV} $R2
  IntOp $R2 $R2 & ${SF_SELECTED}

  #Verify Selection
  ${If} $R1 != ${SF_SELECTED}
  ${AndIf} $R2 != ${SF_SELECTED}
    MessageBox MB_OK|MB_ICONINFORMATION "At least one component must be selected to continue." /SD IDOK
    Abort
  ${EndIf}

  #No Server
  ${If} $R2 != ${SF_SELECTED}
    !insertmacro SetSectionFlag ${NOSRV} ${SF_SELECTED}
  ${EndIf}

  #No DB
  ${If} $R1 != ${SF_SELECTED}
    !insertmacro SetSectionFlag ${NODB} ${SF_SELECTED}
  ${EndIf}
FunctionEnd

LangString PageDatabaseAdmin_TITLE ${LANG_ENGLISH} "Database administration page"
LangString PageDatabaseAdmin_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the database installation connection details."
LangString PageDatabaseInstall_TITLE ${LANG_ENGLISH} "Database and user installation page"
LangString PageDatabaseInstall_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the database and general user creation details."

Function PageDatabaseAdmin
  !insertmacro MUI_HEADER_TEXT "$(PageDatabaseAdmin_TITLE)" "$(PageDatabaseAdmin_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageDatabaseAdmin.ini"
FunctionEnd

Function ValidatePageDatabaseAdmin
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ADMINID "PageDatabaseAdmin.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ADMINPASS "PageDatabaseAdmin.ini" "Field 5" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_HOSTINSTANCE "PageDatabaseAdmin.ini" "Field 7" "State"

  Call TestDBConnect
  Pop $0

  StrCmp $0 "error" errScriptEngineMissing
  StrCmp $0 "0" "" errConnectionTestFailed

  Return
errConnectionTestFailed:
  MessageBox MB_ICONEXCLAMATION|MB_OK "Connection test failed.  Please check connection details and ensure they are correct." /SD IDOK
  Abort
errScriptEngineMissing:
  MessageBox MB_ICONEXCLAMATION|MB_OK "Connection test could not be run.  This is most likely because Windows Script Engine is missing or requires re-installation.  Please rectify before continuing." /SD IDOK
  Abort
FunctionEnd

Function PageDatabaseInstall
  ; This page and the database section will not run in the upgrade scenario
  SectionGetFlags ${GRPDB} $0
  # Do a binary AND of $0 and SF_SELECTED and put results in $0
  IntOp $0 $0 & ${SF_SELECTED}
  IntCmp $0 ${SF_SELECTED} +2
    Return

  !insertmacro MUI_HEADER_TEXT "$(PageDatabaseInstall_TITLE)" "$(PageDatabaseInstall_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageDatabaseInstall.ini"
FunctionEnd

Function ValidatePageDatabaseInstall
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_DBNAME "PageDatabaseInstall.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_DBFILEDIR "PageDatabaseInstall.ini" "Field 5" "State"

  StrCmp $INI_DBNAME "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Database Name cannot be blank. Please enter a name."
  Abort
  IfFileExists "$INI_DBFILEDIR\*.*" +6 ""
    MessageBox MB_YESNO "The DB File Directory specified doesn't exist, create it?" IDNO +3
    CreateDirectory $INI_DBFILEDIR
    IfErrors "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Directory cannot be created.  Please specify another directory."
    Abort
  IfFileExists "$INI_DBFILEDIR\$INI_DBNAME.mdf" "" +3
    MessageBox MB_OK "The selected folder already contains a database file with the same name.  Please change the specified database name, remove the existing database/delete the existing database file, or select another folder."
    Abort
  IfFileExists "$INI_DBFILEDIR\$INI_DBNAME_log.ldf" "" +3
    MessageBox MB_OK "The selected folder already contains a database log file with the same name.  Please change the specified database name, remove the existing database/delete the existing database log file, or select another folder."
    Abort
FunctionEnd

Function ReplaceInDBJscript
	Push $R1
	Exch
	Push "++HOST++"
	Push $INI_2SLASHHOSTINSTANCE
	Call StrRep
	Push "++ADMINID++"
	Push $INI_ADMINID
	Call StrRep
        Push "++ADMINPASS++"
	Push $INI_ADMINPASS
	Call StrRep
	Exch
	Pop $R1
FunctionEnd

Function un.RemoveDB
  IfSilent +1 nonSilent
    StrCmp $INI_REMOVEDB "True" remove doNotRemove

nonSilent:
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Remove the Image Server database during uninstall?$\n$\nWarning: once the database is removed it cannot be restored.  It can however always be removed at a later time." IDNO doNotRemove IDYES remove
  
remove:
  DetailPrint "Removing database..."
  FileOpen $0 "$TEMP\dbremove.js" w

  FileWrite $0 "USE [master]$\r$\n"
  FileWrite $0 "GO$\r$\n"
  FileWrite $0 "IF  EXISTS (SELECT name FROM sys.databases WHERE name = N'Enterprise') DROP DATABASE [Enterprise]$\r$\n"
  FileWrite $0 "GO$\r$\n"

  FileClose $0

  ;using the jscript method here because it already contains the connection details
  nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbgo.js" "$TEMP\dbremove.js"'
  
  Delete "$TEMP\dbremove.js"

doNotRemove:
FunctionEnd

#Function Inserts
!insertmacro RemoveService "ClearCanvas.Server.ShredHostService.exe" "ClearCanvas Enterprise Server Shred Host Service"
!insertmacro Replacement
!insertmacro TestDBConnect


Section Uninstall
  SetShellVarContext all

  !undef UN
  !define UN "un."

  IfFileExists $INSTDIR\scripts 0 +2
    Call un.RemoveDB
  IfFileExists "$INSTDIR\ClearCanvas.Server.ShredHostService.exe" 0 +2
    Call un.RemoveService

  RMDir /r "$INSTDIR\setup"
  RMDir /r "$INSTDIR\common"
  RMDir /r "$INSTDIR\plugins"
  RMDir /r "$INSTDIR\utilities"
  RMDir /r "$INSTDIR\web"
  RMDir /r "$INSTDIR\scripts"
  Delete "$INSTDIR\*.*"

  Delete "$SMPROGRAMS\${PRODUCT_NAME}\Uninstall.lnk"
  Delete "$SMPROGRAMS\${PRODUCT_NAME}\Website.lnk"

  RMDir "$SMPROGRAMS\${PRODUCT_NAME}"
  RMDir "$INSTDIR"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  SetAutoClose true
  
  StrCpy $0 "$INSTDIR\uninstall.log"
  Push $0
  Call un.DumpLog
SectionEnd