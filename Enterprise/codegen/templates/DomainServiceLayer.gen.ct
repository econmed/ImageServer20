using System;
using System.Collections;
using System.Text;

using Iesi.Collections;
using ClearCanvas.Enterprise;
using <%= @namespace %>.Brokers;


namespace <%= @namespace %> {

    /// <summary>
    /// Abstract base class for service layers that make use of this domain model.
    /// This file is machine generated - changes will be lost.
    /// </summary>
	public abstract class <%= shortName %>ServiceLayer : ServiceLayer
	{
	
		<% @entityDefs.each do |e| %>
		/// <summary>
		/// Provides notification when a <see cref="<%= e.className %>"/> entity changes.  This
		/// is actually just a convenience method that allows a client to hook into notifications
		/// from the transaction monitor associated with the session.  If you subscribe to this event,
		/// it is extremely important to explicitly unsubscribe.
		/// </summary>
		public event EventHandler<EntityChangeEventArgs> <%= e.className %>Changed
		{
			add { this.Session.TransactionMonitor.Subscribe(typeof(<%= e.className %>), value); }
			remove { this.Session.TransactionMonitor.Unsubscribe(typeof(<%= e.className %>), value); }
		}
	  	<% end %>
	
	
		<% @enumDefs.each do |e| %>
		/// <summary>
		/// Returns the <see cref="<%= e.enumName %>"/> enum table
		/// </summary>
		public EnumTable<<%= e.enumName %>, <%= e.className %>> <%= e.className %>Table
		{
			get { return GetEnumTable<<%= e.enumName %>, <%= e.className %>, I<%= e.className %>Broker>(); }
		}
	  	<% end %>
	  	
	  	
		<% @entityDefs.each do |e| %>
		/// <summary>
		/// Returns a <see cref="<%= e.className %>"/> broker for the current context
		/// </summary>
		/// <returns>An instance of <see cref="I<%= e.className %>Broker"/></returns>
	  	protected I<%= e.className %>Broker Get<%= e.className %>Broker()
        {
            return this.CurrentContext.GetBroker<I<%= e.className %>Broker>();
        }
	  	<% end %>
	  	
	}
}