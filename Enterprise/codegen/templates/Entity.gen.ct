using System;
using System.Collections;
using System.Text;

using Iesi.Collections;
using ClearCanvas.Common;
using ClearCanvas.Enterprise;


namespace <%= model.namespace %> {


    /// <summary>
    /// <%= className %> entity
    /// This file is machine generated - changes will be lost.
    /// </summary>
	public partial class <%= className %> : <%= @superClassName %>
	{
       	#region Private fields
       	
		<% fields.each do |f| %>
	  	private <%= f.dataType %> <%= f.fieldName %>;
	  	<% end %>
	  	
	  	#endregion
	  	
	  	#region Constructors
	  	
	  	/// <summary>
	  	/// Default no-args constructor required by NHibernate
	  	/// </summary>
	  	public <%= className %>()
	  	{
		 	<% initializedFields.each do |f| %>
		  	<%= f.fieldName %> = <%= f.initialValue %>;
		  	<% end %>
		  	
		  	CustomInitialize();
	  	}
                
        <% if((inheritedMandatoryFields + mandatoryFields).length > 0) %>
	  	/// <summary>
	  	/// Mandatory fields constructor
	  	/// </summary>
	  	public <%= className %>(<%= (inheritedMandatoryFields + mandatoryFields).map {|f| "#{f.dataType} #{f.accessorName.downcase}1"}.join(', ') %>)
			:base(<%= inheritedMandatoryFields.map {|f| "#{f.accessorName.downcase}1" }.join(', ') %>)
	  	{
            // initialize all fields to default values
		 	<% initializedFields.each do |f| %>
		  	<%= f.fieldName %> = <%= f.initialValue %>;
		  	<% end %>
                        
		  	CustomInitialize();

            // set mandatory fields
            <% mandatoryFields.each do |f| %>
		  	<%= f.fieldName %> = <%= f.accessorName.downcase %>1;
		  	<% end %>
	  	}
	  	
		<% if(fields.length > mandatoryFields.length) %>
	  	/// <summary>
	  	/// All fields constructor
	  	/// </summary>
	  	public <%= className %>(<%= fields.map {|f| "#{f.dataType} #{f.accessorName.downcase}1"}.join(', ') %>)
			:base(<%= inheritedFields.map {|f| "#{f.accessorName.downcase}1" }.join(', ') %>)
	  	{
		  	CustomInitialize();

			<% fields.each do |f| %>
		  	<%= f.fieldName %> = <%= f.accessorName.downcase %>1;
		  	<% end %>
	  	}
		<% end %>
		<% end %>
                
	  	#endregion
	  	
	  	#region Public Properties
	  	
	  	<% fields.each do |f| %>
		<% if(f.hasGetter || f.hasSetter) %>
	  	public virtual <%= f.dataType %> <%= f.accessorName %>
	  	{
			<% if(f.hasGetter) %>
			get { return <%= f.fieldName %>; }
			<% end %>
			<% if(f.hasSetter) %>
			set { <%= f.fieldName %> = value; }
			<% end %>
	  	}
		<%	end %>
	  	<% end %>
	  	
	  	#endregion
	}
}
