/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class DimseCondition : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DimseCondition(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DimseCondition obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DimseCondition() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DimseCondition(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public static void dump(OFCondition cond, SWIGTYPE_p_OFConsole console) {
    DCMTKPINVOKE.DimseCondition_dump__SWIG_0(OFCondition.getCPtr(cond), SWIGTYPE_p_OFConsole.getCPtr(console));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void dump(OFCondition cond) {
    DCMTKPINVOKE.DimseCondition_dump__SWIG_1(OFCondition.getCPtr(cond));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public static OFCondition push(ushort aModule, ushort aCode, OFStatus aStatus, string aText, OFCondition subCondition) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DimseCondition_push__SWIG_0(aModule, aCode, (int)aStatus, aText, OFCondition.getCPtr(subCondition)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition push(OFCondition newCondition, OFCondition subCondition) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DimseCondition_push__SWIG_1(OFCondition.getCPtr(newCondition), OFCondition.getCPtr(subCondition)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DimseCondition() : this(DCMTKPINVOKE.new_DimseCondition(), true) {
  }

}

}
