/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class DcmElement : DcmObject {
  private HandleRef swigCPtr;

  internal DcmElement(IntPtr cPtr, bool cMemoryOwn) : base(DCMTKPINVOKE.DcmElementUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DcmElement obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DcmElement() {
    Dispose();
  }

  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmElement(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  public override uint calcElementLength(E_TransferSyntax xfer, E_EncodingType enctype) {
    uint ret = DCMTKPINVOKE.DcmElement_calcElementLength(swigCPtr, (int)xfer, (int)enctype);
    return ret;
  }

  public override uint getLength(E_TransferSyntax arg0, E_EncodingType arg1) {
    uint ret = DCMTKPINVOKE.DcmElement_getLength__SWIG_0(swigCPtr, (int)arg0, (int)arg1);
    return ret;
  }

  public override uint getLength(E_TransferSyntax arg0) {
    uint ret = DCMTKPINVOKE.DcmElement_getLength__SWIG_1(swigCPtr, (int)arg0);
    return ret;
  }

  public override uint getLength() {
    uint ret = DCMTKPINVOKE.DcmElement_getLength__SWIG_2(swigCPtr);
    return ret;
  }

  public override bool isLeaf() {
    bool ret = DCMTKPINVOKE.DcmElement_isLeaf(swigCPtr);
    return ret;
  }

  public bool valueLoaded() {
    bool ret = DCMTKPINVOKE.DcmElement_valueLoaded(swigCPtr);
    return ret;
  }

  public override void transferInit() {
    DCMTKPINVOKE.DcmElement_transferInit(swigCPtr);
  }

  public override bool canWriteXfer(E_TransferSyntax newXfer, E_TransferSyntax oldXfer) {
    bool ret = DCMTKPINVOKE.DcmElement_canWriteXfer(swigCPtr, (int)newXfer, (int)oldXfer);
    return ret;
  }

  public override OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer, E_GrpLenEncoding glenc, uint maxReadLength) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_read__SWIG_0(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer, (int)glenc, maxReadLength), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer, E_GrpLenEncoding glenc) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_read__SWIG_1(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer, (int)glenc), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_read__SWIG_2(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition write(DcmOutputStream outStream, E_TransferSyntax oxfer, E_EncodingType enctype) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_write__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer, (int)enctype), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition write(DcmOutputStream outStream, E_TransferSyntax oxfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_write__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition writeXML(SWIGTYPE_p_ostream outStream, uint flags) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_writeXML__SWIG_0(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition writeXML(SWIGTYPE_p_ostream outStream) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_writeXML__SWIG_1(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax oxfer, E_EncodingType enctype) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_writeSignatureFormat__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer, (int)enctype), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax oxfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_writeSignatureFormat__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition clear() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_clear(swigCPtr), true);
    return ret;
  }

  public override OFCondition loadAllDataIntoMemory() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_loadAllDataIntoMemory(swigCPtr), true);
    return ret;
  }

  public virtual OFCondition getUint8(out byte val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getUint8__SWIG_0(swigCPtr, out val, pos), true);
    return ret;
  }

  public virtual OFCondition getUint8(out byte val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getUint8__SWIG_1(swigCPtr, out val), true);
    return ret;
  }

  public virtual OFCondition getSint16(out short val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getSint16__SWIG_0(swigCPtr, out val, pos), true);
    return ret;
  }

  public virtual OFCondition getSint16(out short val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getSint16__SWIG_1(swigCPtr, out val), true);
    return ret;
  }

  public virtual OFCondition getUint16(out ushort val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getUint16__SWIG_0(swigCPtr, out val, pos), true);
    return ret;
  }

  public virtual OFCondition getUint16(out ushort val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getUint16__SWIG_1(swigCPtr, out val), true);
    return ret;
  }

  public virtual OFCondition getSint32(out int val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getSint32__SWIG_0(swigCPtr, out val, pos), true);
    return ret;
  }

  public virtual OFCondition getSint32(out int val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getSint32__SWIG_1(swigCPtr, out val), true);
    return ret;
  }

  public virtual OFCondition getUint32(out uint val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getUint32__SWIG_0(swigCPtr, out val, pos), true);
    return ret;
  }

  public virtual OFCondition getUint32(out uint val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getUint32__SWIG_1(swigCPtr, out val), true);
    return ret;
  }

  public virtual OFCondition getFloat32(out float val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getFloat32__SWIG_0(swigCPtr, out val, pos), true);
    return ret;
  }

  public virtual OFCondition getFloat32(out float val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getFloat32__SWIG_1(swigCPtr, out val), true);
    return ret;
  }

  public virtual OFCondition getFloat64(out double val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getFloat64__SWIG_0(swigCPtr, out val, pos), true);
    return ret;
  }

  public virtual OFCondition getFloat64(out double val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getFloat64__SWIG_1(swigCPtr, out val), true);
    return ret;
  }

  public virtual OFCondition getTagVal(DcmTagKey val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getTagVal__SWIG_0(swigCPtr, DcmTagKey.getCPtr(val), pos), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition getTagVal(DcmTagKey val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getTagVal__SWIG_1(swigCPtr, DcmTagKey.getCPtr(val)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition getOFString(StringBuilder str, uint pos, bool normalize) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getOFString__SWIG_0(swigCPtr, str, pos, normalize), true);
    return ret;
  }

  public virtual OFCondition getOFString(StringBuilder str, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getOFString__SWIG_1(swigCPtr, str, pos), true);
    return ret;
  }

  public virtual OFCondition getOFStringArray(StringBuilder val, bool normalize) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getOFStringArray__SWIG_0(swigCPtr, val, normalize), true);
    return ret;
  }

  public virtual OFCondition getOFStringArray(StringBuilder val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getOFStringArray__SWIG_1(swigCPtr, val), true);
    return ret;
  }

  public virtual OFCondition getString(ref IntPtr val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getString(swigCPtr, ref val), true);
    return ret;
  }

  public virtual OFCondition getUint8Array(ref IntPtr val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getUint8Array(swigCPtr, ref val), true);
    return ret;
  }

  public virtual OFCondition getSint16Array(ref IntPtr val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getSint16Array(swigCPtr, ref val), true);
    return ret;
  }

  public virtual OFCondition getUint16Array(ref IntPtr val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getUint16Array(swigCPtr, ref val), true);
    return ret;
  }

  public virtual OFCondition getSint32Array(ref IntPtr val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getSint32Array(swigCPtr, ref val), true);
    return ret;
  }

  public virtual OFCondition getUint32Array(ref IntPtr val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getUint32Array(swigCPtr, ref val), true);
    return ret;
  }

  public virtual OFCondition getFloat32Array(ref IntPtr val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getFloat32Array(swigCPtr, ref val), true);
    return ret;
  }

  public virtual OFCondition getFloat64Array(ref IntPtr val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_getFloat64Array(swigCPtr, ref val), true);
    return ret;
  }

  public OFCondition detachValueField(bool copy) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_detachValueField__SWIG_0(swigCPtr, copy), true);
    return ret;
  }

  public OFCondition detachValueField() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_detachValueField__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual OFCondition putOFStringArray(string stringValue) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putOFStringArray(swigCPtr, stringValue), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition putString(string val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putString(swigCPtr, val), true);
    return ret;
  }

  public virtual OFCondition putSint16(short val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putSint16__SWIG_0(swigCPtr, val, pos), true);
    return ret;
  }

  public virtual OFCondition putSint16(short val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putSint16__SWIG_1(swigCPtr, val), true);
    return ret;
  }

  public virtual OFCondition putUint16(ushort val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putUint16__SWIG_0(swigCPtr, val, pos), true);
    return ret;
  }

  public virtual OFCondition putUint16(ushort val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putUint16__SWIG_1(swigCPtr, val), true);
    return ret;
  }

  public virtual OFCondition putSint32(int val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putSint32__SWIG_0(swigCPtr, val, pos), true);
    return ret;
  }

  public virtual OFCondition putSint32(int val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putSint32__SWIG_1(swigCPtr, val), true);
    return ret;
  }

  public virtual OFCondition putUint32(uint val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putUint32__SWIG_0(swigCPtr, val, pos), true);
    return ret;
  }

  public virtual OFCondition putUint32(uint val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putUint32__SWIG_1(swigCPtr, val), true);
    return ret;
  }

  public virtual OFCondition putFloat32(float val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putFloat32__SWIG_0(swigCPtr, val, pos), true);
    return ret;
  }

  public virtual OFCondition putFloat32(float val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putFloat32__SWIG_1(swigCPtr, val), true);
    return ret;
  }

  public virtual OFCondition putFloat64(double val, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putFloat64__SWIG_0(swigCPtr, val, pos), true);
    return ret;
  }

  public virtual OFCondition putFloat64(double val) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putFloat64__SWIG_1(swigCPtr, val), true);
    return ret;
  }

  public virtual OFCondition putTagVal(DcmTagKey attrTag, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putTagVal__SWIG_0(swigCPtr, DcmTagKey.getCPtr(attrTag), pos), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition putTagVal(DcmTagKey attrTag) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putTagVal__SWIG_1(swigCPtr, DcmTagKey.getCPtr(attrTag)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition putUint8Array(byte[] vals, uint num) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putUint8Array(swigCPtr, vals, num), true);
    return ret;
  }

  public virtual OFCondition putSint16Array(short[] vals, uint num) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putSint16Array(swigCPtr, vals, num), true);
    return ret;
  }

  public virtual OFCondition putUint16Array(ushort[] vals, uint num) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putUint16Array(swigCPtr, vals, num), true);
    return ret;
  }

  public virtual OFCondition putSint32Array(int[] vals, uint num) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putSint32Array(swigCPtr, vals, num), true);
    return ret;
  }

  public virtual OFCondition putUint32Array(uint[] vals, uint num) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putUint32Array(swigCPtr, vals, num), true);
    return ret;
  }

  public virtual OFCondition putFloat32Array(float[] vals, uint num) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putFloat32Array(swigCPtr, vals, num), true);
    return ret;
  }

  public virtual OFCondition putFloat64Array(double[] vals, uint num) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmElement_putFloat64Array(swigCPtr, vals, num), true);
    return ret;
  }

}

}
