/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class DcmSequenceOfItems : DcmElement {
  private HandleRef swigCPtr;

  internal DcmSequenceOfItems(IntPtr cPtr, bool cMemoryOwn) : base(DCMTKPINVOKE.DcmSequenceOfItemsUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DcmSequenceOfItems obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DcmSequenceOfItems() {
    Dispose();
  }

  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmSequenceOfItems(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  public DcmSequenceOfItems(DcmTag tag, uint len) : this(DCMTKPINVOKE.new_DcmSequenceOfItems__SWIG_0(DcmTag.getCPtr(tag), len), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmSequenceOfItems(DcmTag tag) : this(DCMTKPINVOKE.new_DcmSequenceOfItems__SWIG_1(DcmTag.getCPtr(tag)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmSequenceOfItems(DcmSequenceOfItems oldSeq) : this(DCMTKPINVOKE.new_DcmSequenceOfItems__SWIG_2(DcmSequenceOfItems.getCPtr(oldSeq)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override DcmEVR ident() {
    DcmEVR ret = (DcmEVR)DCMTKPINVOKE.DcmSequenceOfItems_ident(swigCPtr);
    return ret;
  }

  public override bool isLeaf() {
    bool ret = DCMTKPINVOKE.DcmSequenceOfItems_isLeaf(swigCPtr);
    return ret;
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName, SWIGTYPE_p_size_t pixelCounter) {
    DCMTKPINVOKE.DcmSequenceOfItems_print__SWIG_0(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName, SWIGTYPE_p_size_t.getCPtr(pixelCounter));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName) {
    DCMTKPINVOKE.DcmSequenceOfItems_print__SWIG_1(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level) {
    DCMTKPINVOKE.DcmSequenceOfItems_print__SWIG_2(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags) {
    DCMTKPINVOKE.DcmSequenceOfItems_print__SWIG_3(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream) {
    DCMTKPINVOKE.DcmSequenceOfItems_print__SWIG_4(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint getVM() {
    uint ret = DCMTKPINVOKE.DcmSequenceOfItems_getVM(swigCPtr);
    return ret;
  }

  public virtual OFCondition computeGroupLengthAndPadding(E_GrpLenEncoding glenc, E_PaddingEncoding padenc, E_TransferSyntax xfer, E_EncodingType enctype, uint padlen, uint subPadlen, uint instanceLength) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_0(swigCPtr, (int)glenc, (int)padenc, (int)xfer, (int)enctype, padlen, subPadlen, instanceLength), true);
    return ret;
  }

  public virtual OFCondition computeGroupLengthAndPadding(E_GrpLenEncoding glenc, E_PaddingEncoding padenc, E_TransferSyntax xfer, E_EncodingType enctype, uint padlen, uint subPadlen) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_1(swigCPtr, (int)glenc, (int)padenc, (int)xfer, (int)enctype, padlen, subPadlen), true);
    return ret;
  }

  public virtual OFCondition computeGroupLengthAndPadding(E_GrpLenEncoding glenc, E_PaddingEncoding padenc, E_TransferSyntax xfer, E_EncodingType enctype, uint padlen) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_2(swigCPtr, (int)glenc, (int)padenc, (int)xfer, (int)enctype, padlen), true);
    return ret;
  }

  public virtual OFCondition computeGroupLengthAndPadding(E_GrpLenEncoding glenc, E_PaddingEncoding padenc, E_TransferSyntax xfer, E_EncodingType enctype) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_3(swigCPtr, (int)glenc, (int)padenc, (int)xfer, (int)enctype), true);
    return ret;
  }

  public virtual OFCondition computeGroupLengthAndPadding(E_GrpLenEncoding glenc, E_PaddingEncoding padenc, E_TransferSyntax xfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_4(swigCPtr, (int)glenc, (int)padenc, (int)xfer), true);
    return ret;
  }

  public virtual OFCondition computeGroupLengthAndPadding(E_GrpLenEncoding glenc, E_PaddingEncoding padenc) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_5(swigCPtr, (int)glenc, (int)padenc), true);
    return ret;
  }

  public virtual OFCondition computeGroupLengthAndPadding(E_GrpLenEncoding glenc) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_6(swigCPtr, (int)glenc), true);
    return ret;
  }

  public override uint calcElementLength(E_TransferSyntax xfer, E_EncodingType enctype) {
    uint ret = DCMTKPINVOKE.DcmSequenceOfItems_calcElementLength(swigCPtr, (int)xfer, (int)enctype);
    return ret;
  }

  public override uint getLength(E_TransferSyntax xfer, E_EncodingType enctype) {
    uint ret = DCMTKPINVOKE.DcmSequenceOfItems_getLength__SWIG_0(swigCPtr, (int)xfer, (int)enctype);
    return ret;
  }

  public override uint getLength(E_TransferSyntax xfer) {
    uint ret = DCMTKPINVOKE.DcmSequenceOfItems_getLength__SWIG_1(swigCPtr, (int)xfer);
    return ret;
  }

  public override uint getLength() {
    uint ret = DCMTKPINVOKE.DcmSequenceOfItems_getLength__SWIG_2(swigCPtr);
    return ret;
  }

  public override void transferInit() {
    DCMTKPINVOKE.DcmSequenceOfItems_transferInit(swigCPtr);
  }

  public override void transferEnd() {
    DCMTKPINVOKE.DcmSequenceOfItems_transferEnd(swigCPtr);
  }

  public override bool canWriteXfer(E_TransferSyntax oldXfer, E_TransferSyntax newXfer) {
    bool ret = DCMTKPINVOKE.DcmSequenceOfItems_canWriteXfer(swigCPtr, (int)oldXfer, (int)newXfer);
    return ret;
  }

  public override OFCondition read(DcmInputStream inStream, E_TransferSyntax xfer, E_GrpLenEncoding glenc, uint maxReadLength) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_read__SWIG_0(swigCPtr, DcmInputStream.getCPtr(inStream), (int)xfer, (int)glenc, maxReadLength), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition read(DcmInputStream inStream, E_TransferSyntax xfer, E_GrpLenEncoding glenc) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_read__SWIG_1(swigCPtr, DcmInputStream.getCPtr(inStream), (int)xfer, (int)glenc), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition read(DcmInputStream inStream, E_TransferSyntax xfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_read__SWIG_2(swigCPtr, DcmInputStream.getCPtr(inStream), (int)xfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition write(DcmOutputStream outStream, E_TransferSyntax oxfer, E_EncodingType enctype) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_write__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer, (int)enctype), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition write(DcmOutputStream outStream, E_TransferSyntax oxfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_write__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition writeXML(SWIGTYPE_p_ostream outStream, uint flags) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_writeXML__SWIG_0(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition writeXML(SWIGTYPE_p_ostream outStream) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_writeXML__SWIG_1(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax oxfer, E_EncodingType enctype) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_writeSignatureFormat__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer, (int)enctype), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax oxfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_writeSignatureFormat__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isSignable() {
    bool ret = DCMTKPINVOKE.DcmSequenceOfItems_isSignable(swigCPtr);
    return ret;
  }

  public override bool containsUnknownVR() {
    bool ret = DCMTKPINVOKE.DcmSequenceOfItems_containsUnknownVR(swigCPtr);
    return ret;
  }

  public virtual uint card() {
    uint ret = DCMTKPINVOKE.DcmSequenceOfItems_card(swigCPtr);
    return ret;
  }

  public virtual OFCondition prepend(DcmItem item) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_prepend(swigCPtr, DcmItem.getCPtr(item)), true);
    return ret;
  }

  public virtual OFCondition insert(DcmItem item, uint where, bool before) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_insert__SWIG_0(swigCPtr, DcmItem.getCPtr(item), where, before), true);
    return ret;
  }

  public virtual OFCondition insert(DcmItem item, uint where) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_insert__SWIG_1(swigCPtr, DcmItem.getCPtr(item), where), true);
    return ret;
  }

  public virtual OFCondition insert(DcmItem item) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_insert__SWIG_2(swigCPtr, DcmItem.getCPtr(item)), true);
    return ret;
  }

  public virtual OFCondition append(DcmItem item) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_append(swigCPtr, DcmItem.getCPtr(item)), true);
    return ret;
  }

  public virtual OFCondition insertAtCurrentPos(DcmItem item, bool before) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_insertAtCurrentPos__SWIG_0(swigCPtr, DcmItem.getCPtr(item), before), true);
    return ret;
  }

  public virtual OFCondition insertAtCurrentPos(DcmItem item) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_insertAtCurrentPos__SWIG_1(swigCPtr, DcmItem.getCPtr(item)), true);
    return ret;
  }

  public virtual DcmItem getItem(uint num) {
    IntPtr cPtr = DCMTKPINVOKE.DcmSequenceOfItems_getItem(swigCPtr, num);
    DcmItem ret = (cPtr == IntPtr.Zero) ? null : new DcmItem(cPtr, false);
    return ret;
  }

  public override OFCondition nextObject(SWIGTYPE_p_DcmStack stack, bool intoSub) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_nextObject(swigCPtr, SWIGTYPE_p_DcmStack.getCPtr(stack), intoSub), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override DcmObject nextInContainer(DcmObject obj) {
    IntPtr cPtr = DCMTKPINVOKE.DcmSequenceOfItems_nextInContainer(swigCPtr, DcmObject.getCPtr(obj));
    DcmObject ret = (cPtr == IntPtr.Zero) ? null : new DcmObject(cPtr, false);
    return ret;
  }

  public virtual DcmItem remove(uint num) {
    IntPtr cPtr = DCMTKPINVOKE.DcmSequenceOfItems_remove__SWIG_0(swigCPtr, num);
    DcmItem ret = (cPtr == IntPtr.Zero) ? null : new DcmItem(cPtr, false);
    return ret;
  }

  public virtual DcmItem remove(DcmItem item) {
    IntPtr cPtr = DCMTKPINVOKE.DcmSequenceOfItems_remove__SWIG_1(swigCPtr, DcmItem.getCPtr(item));
    DcmItem ret = (cPtr == IntPtr.Zero) ? null : new DcmItem(cPtr, false);
    return ret;
  }

  public override OFCondition clear() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_clear(swigCPtr), true);
    return ret;
  }

  public override OFCondition verify(bool autocorrect) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_verify__SWIG_0(swigCPtr, autocorrect), true);
    return ret;
  }

  public override OFCondition verify() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_verify__SWIG_1(swigCPtr), true);
    return ret;
  }

  public override OFCondition search(DcmTagKey xtag, SWIGTYPE_p_DcmStack resultStack, E_SearchMode mode, bool searchIntoSub) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_search__SWIG_0(swigCPtr, DcmTagKey.getCPtr(xtag), SWIGTYPE_p_DcmStack.getCPtr(resultStack), (int)mode, searchIntoSub), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition search(DcmTagKey xtag, SWIGTYPE_p_DcmStack resultStack, E_SearchMode mode) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_search__SWIG_1(swigCPtr, DcmTagKey.getCPtr(xtag), SWIGTYPE_p_DcmStack.getCPtr(resultStack), (int)mode), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition search(DcmTagKey xtag, SWIGTYPE_p_DcmStack resultStack) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_search__SWIG_2(swigCPtr, DcmTagKey.getCPtr(xtag), SWIGTYPE_p_DcmStack.getCPtr(resultStack)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition searchErrors(SWIGTYPE_p_DcmStack resultStack) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_searchErrors(swigCPtr, SWIGTYPE_p_DcmStack.getCPtr(resultStack)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition loadAllDataIntoMemory() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmSequenceOfItems_loadAllDataIntoMemory(swigCPtr), true);
    return ret;
  }

}

}
