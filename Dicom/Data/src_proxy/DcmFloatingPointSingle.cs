/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class DcmFloatingPointSingle : DcmElement {
  private HandleRef swigCPtr;

  internal DcmFloatingPointSingle(IntPtr cPtr, bool cMemoryOwn) : base(DCMTKPINVOKE.DcmFloatingPointSingleUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DcmFloatingPointSingle obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DcmFloatingPointSingle() {
    Dispose();
  }

  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmFloatingPointSingle(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  public DcmFloatingPointSingle(DcmTag tag, uint len) : this(DCMTKPINVOKE.new_DcmFloatingPointSingle__SWIG_0(DcmTag.getCPtr(tag), len), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmFloatingPointSingle(DcmTag tag) : this(DCMTKPINVOKE.new_DcmFloatingPointSingle__SWIG_1(DcmTag.getCPtr(tag)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmFloatingPointSingle(DcmFloatingPointSingle old) : this(DCMTKPINVOKE.new_DcmFloatingPointSingle__SWIG_2(DcmFloatingPointSingle.getCPtr(old)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override DcmEVR ident() {
    DcmEVR ret = (DcmEVR)DCMTKPINVOKE.DcmFloatingPointSingle_ident(swigCPtr);
    return ret;
  }

  public override uint getVM() {
    uint ret = DCMTKPINVOKE.DcmFloatingPointSingle_getVM(swigCPtr);
    return ret;
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName, SWIGTYPE_p_size_t pixelCounter) {
    DCMTKPINVOKE.DcmFloatingPointSingle_print__SWIG_0(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName, SWIGTYPE_p_size_t.getCPtr(pixelCounter));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName) {
    DCMTKPINVOKE.DcmFloatingPointSingle_print__SWIG_1(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level) {
    DCMTKPINVOKE.DcmFloatingPointSingle_print__SWIG_2(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags) {
    DCMTKPINVOKE.DcmFloatingPointSingle_print__SWIG_3(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream) {
    DCMTKPINVOKE.DcmFloatingPointSingle_print__SWIG_4(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override OFCondition getFloat32(out float floatVal, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_getFloat32__SWIG_0(swigCPtr, out floatVal, pos), true);
    return ret;
  }

  public override OFCondition getFloat32(out float floatVal) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_getFloat32__SWIG_1(swigCPtr, out floatVal), true);
    return ret;
  }

  public override OFCondition getFloat32Array(ref IntPtr floatVals) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_getFloat32Array(swigCPtr, ref floatVals), true);
    return ret;
  }

  public override OFCondition getOFString(StringBuilder stringVal, uint pos, bool normalize) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_getOFString__SWIG_0(swigCPtr, stringVal, pos, normalize), true);
    return ret;
  }

  public override OFCondition getOFString(StringBuilder stringVal, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_getOFString__SWIG_1(swigCPtr, stringVal, pos), true);
    return ret;
  }

  public override OFCondition putFloat32(float floatVal, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_putFloat32__SWIG_0(swigCPtr, floatVal, pos), true);
    return ret;
  }

  public override OFCondition putFloat32(float floatVal) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_putFloat32__SWIG_1(swigCPtr, floatVal), true);
    return ret;
  }

  public override OFCondition putFloat32Array(float[] floatVals, uint numFloats) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_putFloat32Array(swigCPtr, floatVals, numFloats), true);
    return ret;
  }

  public override OFCondition putString(string stringVal) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_putString(swigCPtr, stringVal), true);
    return ret;
  }

  public override OFCondition verify(bool autocorrect) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_verify__SWIG_0(swigCPtr, autocorrect), true);
    return ret;
  }

  public override OFCondition verify() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmFloatingPointSingle_verify__SWIG_1(swigCPtr), true);
    return ret;
  }

}

}
