/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;

public class DCMTK {
  public static OFConditionConst ECC_Normal {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_ECC_Normal();
      OFConditionConst ret = (cPtr == IntPtr.Zero) ? null : new OFConditionConst(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition EC_Normal {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_EC_Normal();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition EC_IllegalParameter {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_EC_IllegalParameter();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition EC_MemoryExhausted {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_EC_MemoryExhausted();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static DcmElement castToDcmElement(DcmObject pObj) {
    IntPtr cPtr = DCMTKPINVOKE.castToDcmElement(DcmObject.getCPtr(pObj));
    DcmElement ret = (cPtr == IntPtr.Zero) ? null : new DcmElement(cPtr, false);
    return ret;
  }

  public static uint DCM_UndefinedLength {
    get {
      uint ret = DCMTKPINVOKE.get_DCM_UndefinedLength();
      return ret;
    } 
  }

  public static OFCondition swapIfNecessary(E_ByteOrder newByteOrder, E_ByteOrder oldByteOrder, SWIGTYPE_p_void val, uint byteLength, uint valWidth) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.swapIfNecessary((int)newByteOrder, (int)oldByteOrder, SWIGTYPE_p_void.getCPtr(val), byteLength, valWidth), true);
    return ret;
  }

  public static void swapBytes(SWIGTYPE_p_void val, uint byteLength, uint valWidth) {
    DCMTKPINVOKE.swapBytes(SWIGTYPE_p_void.getCPtr(val), byteLength, valWidth);
  }

  public static ushort swapShort(ushort toSwap) {
    ushort ret = DCMTKPINVOKE.swapShort(toSwap);
    return ret;
  }

  public static void swap2Bytes(byte[] toSwap) {
    DCMTKPINVOKE.swap2Bytes(toSwap);
  }

  public static void swap4Bytes(byte[] toSwap) {
    DCMTKPINVOKE.swap4Bytes(toSwap);
  }

  public static SWIGTYPE_p_OFGlobalTbool_t dcmEnableUnknownVRGeneration {
    set {
      DCMTKPINVOKE.set_dcmEnableUnknownVRGeneration(SWIGTYPE_p_OFGlobalTbool_t.getCPtr(value));
    } 
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_dcmEnableUnknownVRGeneration();
      SWIGTYPE_p_OFGlobalTbool_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OFGlobalTbool_t(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_OFGlobalTbool_t dcmEnableUnlimitedTextVRGeneration {
    set {
      DCMTKPINVOKE.set_dcmEnableUnlimitedTextVRGeneration(SWIGTYPE_p_OFGlobalTbool_t.getCPtr(value));
    } 
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_dcmEnableUnlimitedTextVRGeneration();
      SWIGTYPE_p_OFGlobalTbool_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OFGlobalTbool_t(cPtr, false);
      return ret;
    } 
  }

  public static E_ByteOrder gLocalByteOrder {
    get {
      E_ByteOrder ret = (E_ByteOrder)DCMTKPINVOKE.get_gLocalByteOrder();
      return ret;
    } 
  }

  public static string dcmFindNameOfUID(string uid) {
    string ret = DCMTKPINVOKE.dcmFindNameOfUID(uid);
    return ret;
  }

  public static string dcmFindUIDFromName(string name) {
    string ret = DCMTKPINVOKE.dcmFindUIDFromName(name);
    return ret;
  }

  public static SWIGTYPE_p_p_char dcmStorageSOPClassUIDs {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_dcmStorageSOPClassUIDs();
      SWIGTYPE_p_p_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public static int numberOfDcmStorageSOPClassUIDs {
    get {
      int ret = DCMTKPINVOKE.get_numberOfDcmStorageSOPClassUIDs();
      return ret;
    } 
  }

  public static bool dcmIsaStorageSOPClassUID(string uid) {
    bool ret = DCMTKPINVOKE.dcmIsaStorageSOPClassUID(uid);
    return ret;
  }

  public static SWIGTYPE_p_p_char dcmImageSOPClassUIDs {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_dcmImageSOPClassUIDs();
      SWIGTYPE_p_p_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public static int numberOfDcmImageSOPClassUIDs {
    get {
      int ret = DCMTKPINVOKE.get_numberOfDcmImageSOPClassUIDs();
      return ret;
    } 
  }

  public static string dcmGenerateUniqueIdentifier(string uid, string prefix) {
    string ret = DCMTKPINVOKE.dcmGenerateUniqueIdentifier__SWIG_0(uid, prefix);
    return ret;
  }

  public static string dcmGenerateUniqueIdentifier(string uid) {
    string ret = DCMTKPINVOKE.dcmGenerateUniqueIdentifier__SWIG_1(uid);
    return ret;
  }

  public static string dcmSOPClassUIDToModality(string sopClassUID) {
    string ret = DCMTKPINVOKE.dcmSOPClassUIDToModality(sopClassUID);
    return ret;
  }

  public static uint dcmGuessModalityBytes(string sopClassUID) {
    uint ret = DCMTKPINVOKE.dcmGuessModalityBytes(sopClassUID);
    return ret;
  }

  public static uint getVMFromString(string val) {
    uint ret = DCMTKPINVOKE.getVMFromString(val);
    return ret;
  }

  public static string getFirstValueFromString(ref IntPtr s) {
    string ret = DCMTKPINVOKE.getFirstValueFromString(ref s);
    return ret;
  }

  public static SWIGTYPE_p_OFGlobalTint_t DcmDebugLevel {
    set {
      DCMTKPINVOKE.set_DcmDebugLevel(SWIGTYPE_p_OFGlobalTint_t.getCPtr(value));
    } 
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DcmDebugLevel();
      SWIGTYPE_p_OFGlobalTint_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OFGlobalTint_t(cPtr, false);
      return ret;
    } 
  }

  public static int DCMHASHDICT_DEFAULT_HASHSIZE {
    get {
      int ret = DCMTKPINVOKE.get_DCMHASHDICT_DEFAULT_HASHSIZE();
      return ret;
    } 
  }

  public static GlobalDcmDataDictionary dcmDataDict {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_dcmDataDict();
      GlobalDcmDataDictionary ret = (cPtr == IntPtr.Zero) ? null : new GlobalDcmDataDictionary(cPtr, false);
      return ret;
    } 
  }

  public static uint DCM_MaxReadLength {
    get {
      uint ret = DCMTKPINVOKE.get_DCM_MaxReadLength();
      return ret;
    } 
  }

  public static uint DCM_TagInfoLength {
    get {
      uint ret = DCMTKPINVOKE.get_DCM_TagInfoLength();
      return ret;
    } 
  }

  public static uint DCM_OptPrintLineLength {
    get {
      uint ret = DCMTKPINVOKE.get_DCM_OptPrintLineLength();
      return ret;
    } 
  }

  public static uint DCM_OptPrintValueLength {
    get {
      uint ret = DCMTKPINVOKE.get_DCM_OptPrintValueLength();
      return ret;
    } 
  }

  public static SWIGTYPE_p_OFGlobalTbool_t dcmEnableAutomaticInputDataCorrection {
    set {
      DCMTKPINVOKE.set_dcmEnableAutomaticInputDataCorrection(SWIGTYPE_p_OFGlobalTbool_t.getCPtr(value));
    } 
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_dcmEnableAutomaticInputDataCorrection();
      SWIGTYPE_p_OFGlobalTbool_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OFGlobalTbool_t(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_OFGlobalTbool_t dcmAcceptOddAttributeLength {
    set {
      DCMTKPINVOKE.set_dcmAcceptOddAttributeLength(SWIGTYPE_p_OFGlobalTbool_t.getCPtr(value));
    } 
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_dcmAcceptOddAttributeLength();
      SWIGTYPE_p_OFGlobalTbool_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OFGlobalTbool_t(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition newDicomElement(SWIGTYPE_p_p_DcmElement newElement, DcmTag tag, uint length) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.newDicomElement__SWIG_0(SWIGTYPE_p_p_DcmElement.getCPtr(newElement), DcmTag.getCPtr(tag), length), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition newDicomElement(SWIGTYPE_p_p_DcmElement newElement, DcmTag tag) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.newDicomElement__SWIG_1(SWIGTYPE_p_p_DcmElement.getCPtr(newElement), DcmTag.getCPtr(tag)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DcmElement newDicomElement(DcmTag tag, uint length) {
    IntPtr cPtr = DCMTKPINVOKE.newDicomElement__SWIG_2(DcmTag.getCPtr(tag), length);
    DcmElement ret = (cPtr == IntPtr.Zero) ? null : new DcmElement(cPtr, false);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DcmElement newDicomElement(DcmTag tag) {
    IntPtr cPtr = DCMTKPINVOKE.newDicomElement__SWIG_3(DcmTag.getCPtr(tag));
    DcmElement ret = (cPtr == IntPtr.Zero) ? null : new DcmElement(cPtr, false);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition nextUp(SWIGTYPE_p_DcmStack st) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.nextUp(SWIGTYPE_p_DcmStack.getCPtr(st)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DELETE_TRAILING {
    get {
      bool ret = DCMTKPINVOKE.get_DELETE_TRAILING();
      return ret;
    } 
  }

  public static bool DELETE_LEADING {
    get {
      bool ret = DCMTKPINVOKE.get_DELETE_LEADING();
      return ret;
    } 
  }

  public static bool MULTIPART {
    get {
      bool ret = DCMTKPINVOKE.get_MULTIPART();
      return ret;
    } 
  }

  public static OFCondition getStringPart(StringBuilder result, string orgStr, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.getStringPart(result, orgStr, pos), true);
    return ret;
  }

  public static OFCondition ASC_initializeNetwork(T_ASC_NetworkRole role, int acceptorPort, int timeout, SWIGTYPE_p_p_T_ASC_Network network, uint options) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_initializeNetwork__SWIG_0((int)role, acceptorPort, timeout, SWIGTYPE_p_p_T_ASC_Network.getCPtr(network), options), true);
    return ret;
  }

  public static OFCondition ASC_initializeNetwork(T_ASC_NetworkRole role, int acceptorPort, int timeout, SWIGTYPE_p_p_T_ASC_Network network) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_initializeNetwork__SWIG_1((int)role, acceptorPort, timeout, SWIGTYPE_p_p_T_ASC_Network.getCPtr(network)), true);
    return ret;
  }

  public static OFCondition ASC_dropNetwork(SWIGTYPE_p_p_T_ASC_Network network) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_dropNetwork(SWIGTYPE_p_p_T_ASC_Network.getCPtr(network)), true);
    return ret;
  }

  public static OFCondition ASC_createAssociationParameters(SWIGTYPE_p_p_T_ASC_Parameters parameters, int maxReceivePDUSize) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_createAssociationParameters(SWIGTYPE_p_p_T_ASC_Parameters.getCPtr(parameters), maxReceivePDUSize), true);
    return ret;
  }

  public static OFCondition ASC_destroyAssociationParameters(SWIGTYPE_p_p_T_ASC_Parameters parameters) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_destroyAssociationParameters(SWIGTYPE_p_p_T_ASC_Parameters.getCPtr(parameters)), true);
    return ret;
  }

  public static OFCondition ASC_setTransportLayerType(T_ASC_Parameters parameters, bool useSecureLayer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_setTransportLayerType(T_ASC_Parameters.getCPtr(parameters), useSecureLayer), true);
    return ret;
  }

  public static OFCondition ASC_setAPTitles(T_ASC_Parameters parameters, string callingAPTitle, string calledAPTitle, string respondingAPTitle) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_setAPTitles(T_ASC_Parameters.getCPtr(parameters), callingAPTitle, calledAPTitle, respondingAPTitle), true);
    return ret;
  }

  public static OFCondition ASC_getAPTitles(T_ASC_Parameters parameters, string callingAPTitle, string calledAPTitle, string respondingAPTitle) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_getAPTitles(T_ASC_Parameters.getCPtr(parameters), callingAPTitle, calledAPTitle, respondingAPTitle), true);
    return ret;
  }

  public static OFCondition ASC_getApplicationContextName(T_ASC_Parameters parameters, string applicationContextName) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_getApplicationContextName(T_ASC_Parameters.getCPtr(parameters), applicationContextName), true);
    return ret;
  }

  public static OFCondition ASC_setPresentationAddresses(T_ASC_Parameters parameters, string callingPresentationAddress, string calledPresentationAddress) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_setPresentationAddresses(T_ASC_Parameters.getCPtr(parameters), callingPresentationAddress, calledPresentationAddress), true);
    return ret;
  }

  public static OFCondition ASC_getPresentationAddresses(T_ASC_Parameters parameters, string callingPresentationAddress, string calledPresentationAddress) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_getPresentationAddresses(T_ASC_Parameters.getCPtr(parameters), callingPresentationAddress, calledPresentationAddress), true);
    return ret;
  }

  public static OFCondition ASC_getRejectParameters(T_ASC_Parameters parameters, T_ASC_RejectParameters rejectParameters) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_getRejectParameters(T_ASC_Parameters.getCPtr(parameters), T_ASC_RejectParameters.getCPtr(rejectParameters)), true);
    return ret;
  }

  public static void ASC_printRejectParameters(SWIGTYPE_p_FILE f, T_ASC_RejectParameters rej) {
    DCMTKPINVOKE.ASC_printRejectParameters__SWIG_0(SWIGTYPE_p_FILE.getCPtr(f), T_ASC_RejectParameters.getCPtr(rej));
  }

  public static void ASC_printRejectParameters(SWIGTYPE_p_ostream outStream, T_ASC_RejectParameters rej) {
    DCMTKPINVOKE.ASC_printRejectParameters__SWIG_1(SWIGTYPE_p_ostream.getCPtr(outStream), T_ASC_RejectParameters.getCPtr(rej));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public static OFCondition ASC_addPresentationContext(T_ASC_Parameters parameters, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presentationContextID, string abstractSyntax, SWIGTYPE_p_p_char transferSyntaxList, int transferSyntaxListCount, T_ASC_SC_ROLE proposedRole) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_addPresentationContext__SWIG_0(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presentationContextID), abstractSyntax, SWIGTYPE_p_p_char.getCPtr(transferSyntaxList), transferSyntaxListCount, (int)proposedRole), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition ASC_addPresentationContext(T_ASC_Parameters parameters, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presentationContextID, string abstractSyntax, SWIGTYPE_p_p_char transferSyntaxList, int transferSyntaxListCount) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_addPresentationContext__SWIG_1(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presentationContextID), abstractSyntax, SWIGTYPE_p_p_char.getCPtr(transferSyntaxList), transferSyntaxListCount), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ASC_countPresentationContexts(T_ASC_Parameters parameters) {
    int ret = DCMTKPINVOKE.ASC_countPresentationContexts(T_ASC_Parameters.getCPtr(parameters));
    return ret;
  }

  public static int ASC_countAcceptedPresentationContexts(T_ASC_Parameters parameters) {
    int ret = DCMTKPINVOKE.ASC_countAcceptedPresentationContexts(T_ASC_Parameters.getCPtr(parameters));
    return ret;
  }

  public static OFCondition ASC_getPresentationContext(T_ASC_Parameters parameters, int listPosition, T_ASC_PresentationContext presentationContext) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_getPresentationContext(T_ASC_Parameters.getCPtr(parameters), listPosition, T_ASC_PresentationContext.getCPtr(presentationContext)), true);
    return ret;
  }

  public static OFCondition ASC_acceptPresentationContext(T_ASC_Parameters parameters, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presentationContextID, string transferSyntax, T_ASC_SC_ROLE acceptedRole) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_acceptPresentationContext__SWIG_0(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presentationContextID), transferSyntax, (int)acceptedRole), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition ASC_acceptPresentationContext(T_ASC_Parameters parameters, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presentationContextID, string transferSyntax) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_acceptPresentationContext__SWIG_1(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presentationContextID), transferSyntax), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition ASC_acceptContextsWithPreferredTransferSyntaxes(T_ASC_Parameters parameters, SWIGTYPE_p_p_char abstractSyntaxes, int abstractSyntaxCount, SWIGTYPE_p_p_char transferSyntaxes, int transferSyntaxCount, T_ASC_SC_ROLE acceptedRole) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_acceptContextsWithPreferredTransferSyntaxes__SWIG_0(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_p_char.getCPtr(abstractSyntaxes), abstractSyntaxCount, SWIGTYPE_p_p_char.getCPtr(transferSyntaxes), transferSyntaxCount, (int)acceptedRole), true);
    return ret;
  }

  public static OFCondition ASC_acceptContextsWithPreferredTransferSyntaxes(T_ASC_Parameters parameters, SWIGTYPE_p_p_char abstractSyntaxes, int abstractSyntaxCount, SWIGTYPE_p_p_char transferSyntaxes, int transferSyntaxCount) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_acceptContextsWithPreferredTransferSyntaxes__SWIG_1(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_p_char.getCPtr(abstractSyntaxes), abstractSyntaxCount, SWIGTYPE_p_p_char.getCPtr(transferSyntaxes), transferSyntaxCount), true);
    return ret;
  }

  public static OFCondition ASC_acceptContextsWithTransferSyntax(T_ASC_Parameters parameters, string transferSyntax, int abstractSyntaxCount, SWIGTYPE_p_p_char abstractSyntaxes, T_ASC_SC_ROLE acceptedRole) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_acceptContextsWithTransferSyntax__SWIG_0(T_ASC_Parameters.getCPtr(parameters), transferSyntax, abstractSyntaxCount, SWIGTYPE_p_p_char.getCPtr(abstractSyntaxes), (int)acceptedRole), true);
    return ret;
  }

  public static OFCondition ASC_acceptContextsWithTransferSyntax(T_ASC_Parameters parameters, string transferSyntax, int abstractSyntaxCount, SWIGTYPE_p_p_char abstractSyntaxes) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_acceptContextsWithTransferSyntax__SWIG_1(T_ASC_Parameters.getCPtr(parameters), transferSyntax, abstractSyntaxCount, SWIGTYPE_p_p_char.getCPtr(abstractSyntaxes)), true);
    return ret;
  }

  public static OFCondition ASC_refusePresentationContext(T_ASC_Parameters parameters, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presentationContextID, T_ASC_P_ResultReason resultReason) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_refusePresentationContext(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presentationContextID), (int)resultReason), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition ASC_findAcceptedPresentationContext(T_ASC_Parameters parameters, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presentationContextID, T_ASC_PresentationContext presentationContext) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_findAcceptedPresentationContext(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presentationContextID), T_ASC_PresentationContext.getCPtr(presentationContext)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID ASC_findAcceptedPresentationContextID(T_ASC_Association assoc, string abstractSyntax) {
    SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID ret = new SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID(DCMTKPINVOKE.ASC_findAcceptedPresentationContextID__SWIG_0(T_ASC_Association.getCPtr(assoc), abstractSyntax), true);
    return ret;
  }

  public static SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID ASC_findAcceptedPresentationContextID(T_ASC_Association assoc, string abstractSyntax, string transferSyntax) {
    SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID ret = new SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID(DCMTKPINVOKE.ASC_findAcceptedPresentationContextID__SWIG_1(T_ASC_Association.getCPtr(assoc), abstractSyntax, transferSyntax), true);
    return ret;
  }

  public static void ASC_getRequestedExtNegList(T_ASC_Parameters parameters, SWIGTYPE_p_p_SOPClassExtendedNegotiationSubItemList extNegList) {
    DCMTKPINVOKE.ASC_getRequestedExtNegList(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_p_SOPClassExtendedNegotiationSubItemList.getCPtr(extNegList));
  }

  public static void ASC_getAcceptedExtNegList(T_ASC_Parameters parameters, SWIGTYPE_p_p_SOPClassExtendedNegotiationSubItemList extNegList) {
    DCMTKPINVOKE.ASC_getAcceptedExtNegList(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_p_SOPClassExtendedNegotiationSubItemList.getCPtr(extNegList));
  }

  public static void ASC_setRequestedExtNegList(T_ASC_Parameters parameters, SWIGTYPE_p_SOPClassExtendedNegotiationSubItemList extNegList) {
    DCMTKPINVOKE.ASC_setRequestedExtNegList(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_SOPClassExtendedNegotiationSubItemList.getCPtr(extNegList));
  }

  public static void ASC_setAcceptedExtNegList(T_ASC_Parameters parameters, SWIGTYPE_p_SOPClassExtendedNegotiationSubItemList extNegList) {
    DCMTKPINVOKE.ASC_setAcceptedExtNegList(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_SOPClassExtendedNegotiationSubItemList.getCPtr(extNegList));
  }

  public static uint ASC_getPeerCertificateLength(T_ASC_Association assoc) {
    uint ret = DCMTKPINVOKE.ASC_getPeerCertificateLength(T_ASC_Association.getCPtr(assoc));
    return ret;
  }

  public static uint ASC_getPeerCertificate(T_ASC_Association assoc, SWIGTYPE_p_void buf, uint bufLen) {
    uint ret = DCMTKPINVOKE.ASC_getPeerCertificate(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_void.getCPtr(buf), bufLen);
    return ret;
  }

  public static OFCondition ASC_setTransportLayer(T_ASC_Network network, SWIGTYPE_p_DcmTransportLayer newLayer, int takeoverOwnership) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_setTransportLayer(T_ASC_Network.getCPtr(network), SWIGTYPE_p_DcmTransportLayer.getCPtr(newLayer), takeoverOwnership), true);
    return ret;
  }

  public static void ASC_dumpParameters(T_ASC_Parameters parameters, SWIGTYPE_p_ostream outstream) {
    DCMTKPINVOKE.ASC_dumpParameters(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_ostream.getCPtr(outstream));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ASC_dumpPresentationContext(T_ASC_PresentationContext presentationContext, SWIGTYPE_p_ostream outstream) {
    DCMTKPINVOKE.ASC_dumpPresentationContext(T_ASC_PresentationContext.getCPtr(presentationContext), SWIGTYPE_p_ostream.getCPtr(outstream));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ASC_dumpConnectionParameters(T_ASC_Association association, SWIGTYPE_p_ostream outstream) {
    DCMTKPINVOKE.ASC_dumpConnectionParameters(T_ASC_Association.getCPtr(association), SWIGTYPE_p_ostream.getCPtr(outstream));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ASC_activateCallback(T_ASC_Parameters parameters, SWIGTYPE_p_DUL_ModeCallback cb) {
    DCMTKPINVOKE.ASC_activateCallback(T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_DUL_ModeCallback.getCPtr(cb));
  }

  public static bool ASC_associationWaiting(T_ASC_Network network, int timeout) {
    bool ret = DCMTKPINVOKE.ASC_associationWaiting(T_ASC_Network.getCPtr(network), timeout);
    return ret;
  }

  public static bool ASC_dataWaiting(T_ASC_Association association, int timeout) {
    bool ret = DCMTKPINVOKE.ASC_dataWaiting(T_ASC_Association.getCPtr(association), timeout);
    return ret;
  }

  public static bool ASC_selectReadableAssociation(SWIGTYPE_p_p_T_ASC_Association assocs, int assocCount, int timeout) {
    bool ret = DCMTKPINVOKE.ASC_selectReadableAssociation(SWIGTYPE_p_p_T_ASC_Association.getCPtr(assocs), assocCount, timeout);
    return ret;
  }

  public static OFCondition ASC_requestAssociation(T_ASC_Network network, T_ASC_Parameters parameters, SWIGTYPE_p_p_T_ASC_Association association, SWIGTYPE_p_p_void associatePDU, SWIGTYPE_p_unsigned_long associatePDUlength) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_requestAssociation__SWIG_0(T_ASC_Network.getCPtr(network), T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_p_T_ASC_Association.getCPtr(association), SWIGTYPE_p_p_void.getCPtr(associatePDU), SWIGTYPE_p_unsigned_long.getCPtr(associatePDUlength)), true);
    return ret;
  }

  public static OFCondition ASC_requestAssociation(T_ASC_Network network, T_ASC_Parameters parameters, SWIGTYPE_p_p_T_ASC_Association association, SWIGTYPE_p_p_void associatePDU) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_requestAssociation__SWIG_1(T_ASC_Network.getCPtr(network), T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_p_T_ASC_Association.getCPtr(association), SWIGTYPE_p_p_void.getCPtr(associatePDU)), true);
    return ret;
  }

  public static OFCondition ASC_requestAssociation(T_ASC_Network network, T_ASC_Parameters parameters, SWIGTYPE_p_p_T_ASC_Association association) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_requestAssociation__SWIG_2(T_ASC_Network.getCPtr(network), T_ASC_Parameters.getCPtr(parameters), SWIGTYPE_p_p_T_ASC_Association.getCPtr(association)), true);
    return ret;
  }

  public static OFCondition ASC_receiveAssociation(T_ASC_Network network, SWIGTYPE_p_p_T_ASC_Association association, int maxReceivePDUSize, SWIGTYPE_p_p_void associatePDU, SWIGTYPE_p_unsigned_long associatePDUlength, bool useSecureLayer, SWIGTYPE_p_DUL_BLOCKOPTIONS block, int timeout) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_receiveAssociation__SWIG_0(T_ASC_Network.getCPtr(network), SWIGTYPE_p_p_T_ASC_Association.getCPtr(association), maxReceivePDUSize, SWIGTYPE_p_p_void.getCPtr(associatePDU), SWIGTYPE_p_unsigned_long.getCPtr(associatePDUlength), useSecureLayer, SWIGTYPE_p_DUL_BLOCKOPTIONS.getCPtr(block), timeout), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition ASC_receiveAssociation(T_ASC_Network network, SWIGTYPE_p_p_T_ASC_Association association, int maxReceivePDUSize, SWIGTYPE_p_p_void associatePDU, SWIGTYPE_p_unsigned_long associatePDUlength, bool useSecureLayer, SWIGTYPE_p_DUL_BLOCKOPTIONS block) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_receiveAssociation__SWIG_1(T_ASC_Network.getCPtr(network), SWIGTYPE_p_p_T_ASC_Association.getCPtr(association), maxReceivePDUSize, SWIGTYPE_p_p_void.getCPtr(associatePDU), SWIGTYPE_p_unsigned_long.getCPtr(associatePDUlength), useSecureLayer, SWIGTYPE_p_DUL_BLOCKOPTIONS.getCPtr(block)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition ASC_receiveAssociation(T_ASC_Network network, SWIGTYPE_p_p_T_ASC_Association association, int maxReceivePDUSize, SWIGTYPE_p_p_void associatePDU, SWIGTYPE_p_unsigned_long associatePDUlength, bool useSecureLayer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_receiveAssociation__SWIG_2(T_ASC_Network.getCPtr(network), SWIGTYPE_p_p_T_ASC_Association.getCPtr(association), maxReceivePDUSize, SWIGTYPE_p_p_void.getCPtr(associatePDU), SWIGTYPE_p_unsigned_long.getCPtr(associatePDUlength), useSecureLayer), true);
    return ret;
  }

  public static OFCondition ASC_receiveAssociation(T_ASC_Network network, SWIGTYPE_p_p_T_ASC_Association association, int maxReceivePDUSize, SWIGTYPE_p_p_void associatePDU, SWIGTYPE_p_unsigned_long associatePDUlength) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_receiveAssociation__SWIG_3(T_ASC_Network.getCPtr(network), SWIGTYPE_p_p_T_ASC_Association.getCPtr(association), maxReceivePDUSize, SWIGTYPE_p_p_void.getCPtr(associatePDU), SWIGTYPE_p_unsigned_long.getCPtr(associatePDUlength)), true);
    return ret;
  }

  public static OFCondition ASC_receiveAssociation(T_ASC_Network network, SWIGTYPE_p_p_T_ASC_Association association, int maxReceivePDUSize, SWIGTYPE_p_p_void associatePDU) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_receiveAssociation__SWIG_4(T_ASC_Network.getCPtr(network), SWIGTYPE_p_p_T_ASC_Association.getCPtr(association), maxReceivePDUSize, SWIGTYPE_p_p_void.getCPtr(associatePDU)), true);
    return ret;
  }

  public static OFCondition ASC_receiveAssociation(T_ASC_Network network, SWIGTYPE_p_p_T_ASC_Association association, int maxReceivePDUSize) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_receiveAssociation__SWIG_5(T_ASC_Network.getCPtr(network), SWIGTYPE_p_p_T_ASC_Association.getCPtr(association), maxReceivePDUSize), true);
    return ret;
  }

  public static OFCondition ASC_acknowledgeAssociation(T_ASC_Association assoc, SWIGTYPE_p_p_void associatePDU, SWIGTYPE_p_unsigned_long associatePDUlength) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_acknowledgeAssociation__SWIG_0(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_p_void.getCPtr(associatePDU), SWIGTYPE_p_unsigned_long.getCPtr(associatePDUlength)), true);
    return ret;
  }

  public static OFCondition ASC_acknowledgeAssociation(T_ASC_Association assoc, SWIGTYPE_p_p_void associatePDU) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_acknowledgeAssociation__SWIG_1(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_p_void.getCPtr(associatePDU)), true);
    return ret;
  }

  public static OFCondition ASC_acknowledgeAssociation(T_ASC_Association assoc) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_acknowledgeAssociation__SWIG_2(T_ASC_Association.getCPtr(assoc)), true);
    return ret;
  }

  public static OFCondition ASC_rejectAssociation(T_ASC_Association association, T_ASC_RejectParameters rejectParameters, SWIGTYPE_p_p_void associatePDU, SWIGTYPE_p_unsigned_long associatePDUlength) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_rejectAssociation__SWIG_0(T_ASC_Association.getCPtr(association), T_ASC_RejectParameters.getCPtr(rejectParameters), SWIGTYPE_p_p_void.getCPtr(associatePDU), SWIGTYPE_p_unsigned_long.getCPtr(associatePDUlength)), true);
    return ret;
  }

  public static OFCondition ASC_rejectAssociation(T_ASC_Association association, T_ASC_RejectParameters rejectParameters, SWIGTYPE_p_p_void associatePDU) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_rejectAssociation__SWIG_1(T_ASC_Association.getCPtr(association), T_ASC_RejectParameters.getCPtr(rejectParameters), SWIGTYPE_p_p_void.getCPtr(associatePDU)), true);
    return ret;
  }

  public static OFCondition ASC_rejectAssociation(T_ASC_Association association, T_ASC_RejectParameters rejectParameters) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_rejectAssociation__SWIG_2(T_ASC_Association.getCPtr(association), T_ASC_RejectParameters.getCPtr(rejectParameters)), true);
    return ret;
  }

  public static OFCondition ASC_releaseAssociation(T_ASC_Association association) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_releaseAssociation(T_ASC_Association.getCPtr(association)), true);
    return ret;
  }

  public static OFCondition ASC_acknowledgeRelease(T_ASC_Association association) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_acknowledgeRelease(T_ASC_Association.getCPtr(association)), true);
    return ret;
  }

  public static OFCondition ASC_abortAssociation(T_ASC_Association association) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_abortAssociation(T_ASC_Association.getCPtr(association)), true);
    return ret;
  }

  public static OFCondition ASC_dropSCPAssociation(T_ASC_Association association) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_dropSCPAssociation(T_ASC_Association.getCPtr(association)), true);
    return ret;
  }

  public static OFCondition ASC_dropAssociation(T_ASC_Association association) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_dropAssociation(T_ASC_Association.getCPtr(association)), true);
    return ret;
  }

  public static OFCondition ASC_destroyAssociation(SWIGTYPE_p_p_T_ASC_Association association) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.ASC_destroyAssociation(SWIGTYPE_p_p_T_ASC_Association.getCPtr(association)), true);
    return ret;
  }

  public static ushort ASCC_BADPRESENTATIONCONTEXTID {
    get {
      ushort ret = DCMTKPINVOKE.get_ASCC_BADPRESENTATIONCONTEXTID();
      return ret;
    } 
  }

  public static ushort ASCC_BADPRESENTATIONCONTEXTPOSITION {
    get {
      ushort ret = DCMTKPINVOKE.get_ASCC_BADPRESENTATIONCONTEXTPOSITION();
      return ret;
    } 
  }

  public static ushort ASCC_CODINGERROR {
    get {
      ushort ret = DCMTKPINVOKE.get_ASCC_CODINGERROR();
      return ret;
    } 
  }

  public static ushort ASCC_DUPLICATEPRESENTATIONCONTEXTID {
    get {
      ushort ret = DCMTKPINVOKE.get_ASCC_DUPLICATEPRESENTATIONCONTEXTID();
      return ret;
    } 
  }

  public static ushort ASCC_MISSINGTRANSFERSYNTAX {
    get {
      ushort ret = DCMTKPINVOKE.get_ASCC_MISSINGTRANSFERSYNTAX();
      return ret;
    } 
  }

  public static ushort ASCC_NULLKEY {
    get {
      ushort ret = DCMTKPINVOKE.get_ASCC_NULLKEY();
      return ret;
    } 
  }

  public static ushort ASCC_SHUTDOWNAPPLICATION {
    get {
      ushort ret = DCMTKPINVOKE.get_ASCC_SHUTDOWNAPPLICATION();
      return ret;
    } 
  }

  public static OFCondition ASC_BADPRESENTATIONCONTEXTID {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_ASC_BADPRESENTATIONCONTEXTID();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition ASC_MISSINGTRANSFERSYNTAX {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_ASC_MISSINGTRANSFERSYNTAX();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition ASC_NULLKEY {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_ASC_NULLKEY();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition ASC_SHUTDOWNAPPLICATION {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_ASC_SHUTDOWNAPPLICATION();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static ushort DIMSEC_BADCOMMANDTYPE {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_BADCOMMANDTYPE();
      return ret;
    } 
  }

  public static ushort DIMSEC_BADDATA {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_BADDATA();
      return ret;
    } 
  }

  public static ushort DIMSEC_BADMESSAGE {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_BADMESSAGE();
      return ret;
    } 
  }

  public static ushort DIMSEC_BUILDFAILED {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_BUILDFAILED();
      return ret;
    } 
  }

  public static ushort DIMSEC_ILLEGALASSOCIATION {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_ILLEGALASSOCIATION();
      return ret;
    } 
  }

  public static ushort DIMSEC_INVALIDPRESENTATIONCONTEXTID {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_INVALIDPRESENTATIONCONTEXTID();
      return ret;
    } 
  }

  public static ushort DIMSEC_NODATAAVAILABLE {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_NODATAAVAILABLE();
      return ret;
    } 
  }

  public static ushort DIMSEC_NOVALIDPRESENTATIONCONTEXTID {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_NOVALIDPRESENTATIONCONTEXTID();
      return ret;
    } 
  }

  public static ushort DIMSEC_NULLKEY {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_NULLKEY();
      return ret;
    } 
  }

  public static ushort DIMSEC_OUTOFRESOURCES {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_OUTOFRESOURCES();
      return ret;
    } 
  }

  public static ushort DIMSEC_PARSEFAILED {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_PARSEFAILED();
      return ret;
    } 
  }

  public static ushort DIMSEC_READPDVFAILED {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_READPDVFAILED();
      return ret;
    } 
  }

  public static ushort DIMSEC_RECEIVEFAILED {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_RECEIVEFAILED();
      return ret;
    } 
  }

  public static ushort DIMSEC_SENDFAILED {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_SENDFAILED();
      return ret;
    } 
  }

  public static ushort DIMSEC_UNEXPECTEDPDVTYPE {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_UNEXPECTEDPDVTYPE();
      return ret;
    } 
  }

  public static ushort DIMSEC_UNEXPECTEDREQUEST {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_UNEXPECTEDREQUEST();
      return ret;
    } 
  }

  public static ushort DIMSEC_UNEXPECTEDRESPONSE {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_UNEXPECTEDRESPONSE();
      return ret;
    } 
  }

  public static ushort DIMSEC_UNSUPPORTEDTRANSFERSYNTAX {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_UNSUPPORTEDTRANSFERSYNTAX();
      return ret;
    } 
  }

  public static ushort DIMSEC_NODATADICT {
    get {
      ushort ret = DCMTKPINVOKE.get_DIMSEC_NODATADICT();
      return ret;
    } 
  }

  public static OFCondition DIMSE_BADCOMMANDTYPE {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_BADCOMMANDTYPE();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_BADDATA {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_BADDATA();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_BADMESSAGE {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_BADMESSAGE();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_ILLEGALASSOCIATION {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_ILLEGALASSOCIATION();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_NODATAAVAILABLE {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_NODATAAVAILABLE();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_NOVALIDPRESENTATIONCONTEXTID {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_NOVALIDPRESENTATIONCONTEXTID();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_NULLKEY {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_NULLKEY();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_OUTOFRESOURCES {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_OUTOFRESOURCES();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_PARSEFAILED {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_PARSEFAILED();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_READPDVFAILED {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_READPDVFAILED();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_RECEIVEFAILED {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_RECEIVEFAILED();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_SENDFAILED {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_SENDFAILED();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_UNEXPECTEDPDVTYPE {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_UNEXPECTEDPDVTYPE();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DIMSE_NODATADICT {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DIMSE_NODATADICT();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static ushort DULC_ASSOCIATIONREJECTED {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_ASSOCIATIONREJECTED();
      return ret;
    } 
  }

  public static ushort DULC_CODINGERROR {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_CODINGERROR();
      return ret;
    } 
  }

  public static ushort DULC_FSMERROR {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_FSMERROR();
      return ret;
    } 
  }

  public static ushort DULC_ILLEGALACCEPT {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_ILLEGALACCEPT();
      return ret;
    } 
  }

  public static ushort DULC_ILLEGALKEY {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_ILLEGALKEY();
      return ret;
    } 
  }

  public static ushort DULC_ILLEGALPARAMETER {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_ILLEGALPARAMETER();
      return ret;
    } 
  }

  public static ushort DULC_ILLEGALPDU {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_ILLEGALPDU();
      return ret;
    } 
  }

  public static ushort DULC_ILLEGALPDULENGTH {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_ILLEGALPDULENGTH();
      return ret;
    } 
  }

  public static ushort DULC_ILLEGALREJECTREASON {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_ILLEGALREJECTREASON();
      return ret;
    } 
  }

  public static ushort DULC_ILLEGALREJECTRESULT {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_ILLEGALREJECTRESULT();
      return ret;
    } 
  }

  public static ushort DULC_ILLEGALREQUEST {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_ILLEGALREQUEST();
      return ret;
    } 
  }

  public static ushort DULC_ILLEGALSERVICEPARAMETER {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_ILLEGALSERVICEPARAMETER();
      return ret;
    } 
  }

  public static ushort DULC_INCORRECTBUFFERLENGTH {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_INCORRECTBUFFERLENGTH();
      return ret;
    } 
  }

  public static ushort DULC_INSUFFICIENTBUFFERLENGTH {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_INSUFFICIENTBUFFERLENGTH();
      return ret;
    } 
  }

  public static ushort DULC_LISTERROR {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_LISTERROR();
      return ret;
    } 
  }

  public static ushort DULC_NETWORKCLOSED {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_NETWORKCLOSED();
      return ret;
    } 
  }

  public static ushort DULC_NOASSOCIATIONREQUEST {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_NOASSOCIATIONREQUEST();
      return ret;
    } 
  }

  public static ushort DULC_NOPDVS {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_NOPDVS();
      return ret;
    } 
  }

  public static ushort DULC_NULLKEY {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_NULLKEY();
      return ret;
    } 
  }

  public static ushort DULC_PCTRANSLATIONFAILURE {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_PCTRANSLATIONFAILURE();
      return ret;
    } 
  }

  public static ushort DULC_PDATAPDUARRIVED {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_PDATAPDUARRIVED();
      return ret;
    } 
  }

  public static ushort DULC_PEERABORTEDASSOCIATION {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_PEERABORTEDASSOCIATION();
      return ret;
    } 
  }

  public static ushort DULC_PEERILLEGALXFERSYNTAXCOUNT {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_PEERILLEGALXFERSYNTAXCOUNT();
      return ret;
    } 
  }

  public static ushort DULC_PEERREQUESTEDRELEASE {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_PEERREQUESTEDRELEASE();
      return ret;
    } 
  }

  public static ushort DULC_READTIMEOUT {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_READTIMEOUT();
      return ret;
    } 
  }

  public static ushort DULC_REQUESTASSOCIATIONFAILED {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_REQUESTASSOCIATIONFAILED();
      return ret;
    } 
  }

  public static ushort DULC_TCPINITERROR {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_TCPINITERROR();
      return ret;
    } 
  }

  public static ushort DULC_TCPIOERROR {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_TCPIOERROR();
      return ret;
    } 
  }

  public static ushort DULC_TLSERROR {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_TLSERROR();
      return ret;
    } 
  }

  public static ushort DULC_UNEXPECTEDPDU {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_UNEXPECTEDPDU();
      return ret;
    } 
  }

  public static ushort DULC_UNKNOWNHOST {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_UNKNOWNHOST();
      return ret;
    } 
  }

  public static ushort DULC_UNRECOGNIZEDPDUTYPE {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_UNRECOGNIZEDPDUTYPE();
      return ret;
    } 
  }

  public static ushort DULC_UNSUPPORTEDPEERPROTOCOL {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_UNSUPPORTEDPEERPROTOCOL();
      return ret;
    } 
  }

  public static ushort DULC_WRONGDATATYPE {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_WRONGDATATYPE();
      return ret;
    } 
  }

  public static ushort DULC_TCPWRAPPER {
    get {
      ushort ret = DCMTKPINVOKE.get_DULC_TCPWRAPPER();
      return ret;
    } 
  }

  public static OFCondition DUL_ASSOCIATIONREJECTED {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_ASSOCIATIONREJECTED();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_ILLEGALACCEPT {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_ILLEGALACCEPT();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_ILLEGALKEY {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_ILLEGALKEY();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_ILLEGALPDU {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_ILLEGALPDU();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_ILLEGALPDULENGTH {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_ILLEGALPDULENGTH();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_ILLEGALREQUEST {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_ILLEGALREQUEST();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_INCORRECTBUFFERLENGTH {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_INCORRECTBUFFERLENGTH();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_INSUFFICIENTBUFFERLENGTH {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_INSUFFICIENTBUFFERLENGTH();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_LISTERROR {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_LISTERROR();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_NETWORKCLOSED {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_NETWORKCLOSED();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_NOASSOCIATIONREQUEST {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_NOASSOCIATIONREQUEST();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_NOPDVS {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_NOPDVS();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_NULLKEY {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_NULLKEY();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_PCTRANSLATIONFAILURE {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_PCTRANSLATIONFAILURE();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_PDATAPDUARRIVED {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_PDATAPDUARRIVED();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_PEERABORTEDASSOCIATION {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_PEERABORTEDASSOCIATION();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_PEERREQUESTEDRELEASE {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_PEERREQUESTEDRELEASE();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_READTIMEOUT {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_READTIMEOUT();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_REQUESTASSOCIATIONFAILED {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_REQUESTASSOCIATIONFAILED();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_UNEXPECTEDPDU {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_UNEXPECTEDPDU();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_UNSUPPORTEDPEERPROTOCOL {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_UNSUPPORTEDPEERPROTOCOL();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static OFCondition DUL_WRONGDATATYPE {
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_DUL_WRONGDATATYPE();
      OFCondition ret = (cPtr == IntPtr.Zero) ? null : new OFCondition(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_OFGlobalTbool_t dcmPeerRequiresExactUIDCopy {
    set {
      DCMTKPINVOKE.set_dcmPeerRequiresExactUIDCopy(SWIGTYPE_p_OFGlobalTbool_t.getCPtr(value));
    } 
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_dcmPeerRequiresExactUIDCopy();
      SWIGTYPE_p_OFGlobalTbool_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OFGlobalTbool_t(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_OFGlobalTunsigned_long_t dcmMaxOutgoingPDUSize {
    set {
      DCMTKPINVOKE.set_dcmMaxOutgoingPDUSize(SWIGTYPE_p_OFGlobalTunsigned_long_t.getCPtr(value));
    } 
    get {
      IntPtr cPtr = DCMTKPINVOKE.get_dcmMaxOutgoingPDUSize();
      SWIGTYPE_p_OFGlobalTunsigned_long_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OFGlobalTunsigned_long_t(cPtr, false);
      return ret;
    } 
  }

  public static E_GrpLenEncoding g_dimse_send_groupLength_encoding {
    set {
      DCMTKPINVOKE.set_g_dimse_send_groupLength_encoding((int)value);
    } 
    get {
      E_GrpLenEncoding ret = (E_GrpLenEncoding)DCMTKPINVOKE.get_g_dimse_send_groupLength_encoding();
      return ret;
    } 
  }

  public static E_EncodingType g_dimse_send_sequenceType_encoding {
    set {
      DCMTKPINVOKE.set_g_dimse_send_sequenceType_encoding((int)value);
    } 
    get {
      E_EncodingType ret = (E_EncodingType)DCMTKPINVOKE.get_g_dimse_send_sequenceType_encoding();
      return ret;
    } 
  }

  public static bool g_dimse_save_dimse_data {
    set {
      DCMTKPINVOKE.set_g_dimse_save_dimse_data(value);
    } 
    get {
      bool ret = DCMTKPINVOKE.get_g_dimse_save_dimse_data();
      return ret;
    } 
  }

  public static OFCondition DIMSE_echoUser(T_ASC_Association assoc, ushort msgId, T_DIMSE_BlockingMode blockMode, int timeout, ushort[] status, SWIGTYPE_p_p_DcmDataset statusDetail) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_echoUser(T_ASC_Association.getCPtr(assoc), msgId, (int)blockMode, timeout, status, SWIGTYPE_p_p_DcmDataset.getCPtr(statusDetail)), true);
    return ret;
  }

  public static OFCondition DIMSE_sendEchoResponse(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_C_EchoRQ request, ushort status, DcmDataset statusDetail) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_sendEchoResponse(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_C_EchoRQ.getCPtr(request), status, DcmDataset.getCPtr(statusDetail)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_storeUser(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presId, T_DIMSE_C_StoreRQ request, string imageFileName, DcmDataset imageDataSet, SWIGTYPE_p_f_p_void_p_T_DIMSE_StoreProgress_p_T_DIMSE_C_StoreRQ__void callback, SWIGTYPE_p_void callbackData, T_DIMSE_BlockingMode blockMode, int timeout, T_DIMSE_C_StoreRSP response, SWIGTYPE_p_p_DcmDataset statusDetail, T_DIMSE_DetectedCancelParameters checkForCancelParams, int imageFileTotalBytes) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_storeUser__SWIG_0(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presId), T_DIMSE_C_StoreRQ.getCPtr(request), imageFileName, DcmDataset.getCPtr(imageDataSet), SWIGTYPE_p_f_p_void_p_T_DIMSE_StoreProgress_p_T_DIMSE_C_StoreRQ__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData), (int)blockMode, timeout, T_DIMSE_C_StoreRSP.getCPtr(response), SWIGTYPE_p_p_DcmDataset.getCPtr(statusDetail), T_DIMSE_DetectedCancelParameters.getCPtr(checkForCancelParams), imageFileTotalBytes), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_storeUser(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presId, T_DIMSE_C_StoreRQ request, string imageFileName, DcmDataset imageDataSet, SWIGTYPE_p_f_p_void_p_T_DIMSE_StoreProgress_p_T_DIMSE_C_StoreRQ__void callback, SWIGTYPE_p_void callbackData, T_DIMSE_BlockingMode blockMode, int timeout, T_DIMSE_C_StoreRSP response, SWIGTYPE_p_p_DcmDataset statusDetail, T_DIMSE_DetectedCancelParameters checkForCancelParams) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_storeUser__SWIG_1(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presId), T_DIMSE_C_StoreRQ.getCPtr(request), imageFileName, DcmDataset.getCPtr(imageDataSet), SWIGTYPE_p_f_p_void_p_T_DIMSE_StoreProgress_p_T_DIMSE_C_StoreRQ__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData), (int)blockMode, timeout, T_DIMSE_C_StoreRSP.getCPtr(response), SWIGTYPE_p_p_DcmDataset.getCPtr(statusDetail), T_DIMSE_DetectedCancelParameters.getCPtr(checkForCancelParams)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_storeUser(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presId, T_DIMSE_C_StoreRQ request, string imageFileName, DcmDataset imageDataSet, SWIGTYPE_p_f_p_void_p_T_DIMSE_StoreProgress_p_T_DIMSE_C_StoreRQ__void callback, SWIGTYPE_p_void callbackData, T_DIMSE_BlockingMode blockMode, int timeout, T_DIMSE_C_StoreRSP response, SWIGTYPE_p_p_DcmDataset statusDetail) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_storeUser__SWIG_2(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presId), T_DIMSE_C_StoreRQ.getCPtr(request), imageFileName, DcmDataset.getCPtr(imageDataSet), SWIGTYPE_p_f_p_void_p_T_DIMSE_StoreProgress_p_T_DIMSE_C_StoreRQ__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData), (int)blockMode, timeout, T_DIMSE_C_StoreRSP.getCPtr(response), SWIGTYPE_p_p_DcmDataset.getCPtr(statusDetail)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_storeProvider(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presIdCmd, T_DIMSE_C_StoreRQ request, string imageFileName, int writeMetaheader, SWIGTYPE_p_p_DcmDataset imageDataSet, SWIGTYPE_p_f_p_void_p_T_DIMSE_StoreProgress_p_T_DIMSE_C_StoreRQ_p_char_p_p_DcmDataset_p_T_DIMSE_C_StoreRSP_p_p_DcmDataset__void callback, SWIGTYPE_p_void callbackData, T_DIMSE_BlockingMode blockMode, int timeout) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_storeProvider(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presIdCmd), T_DIMSE_C_StoreRQ.getCPtr(request), imageFileName, writeMetaheader, SWIGTYPE_p_p_DcmDataset.getCPtr(imageDataSet), SWIGTYPE_p_f_p_void_p_T_DIMSE_StoreProgress_p_T_DIMSE_C_StoreRQ_p_char_p_p_DcmDataset_p_T_DIMSE_C_StoreRSP_p_p_DcmDataset__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData), (int)blockMode, timeout), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_sendStoreResponse(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_C_StoreRQ request, T_DIMSE_C_StoreRSP response, DcmDataset statusDetail) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_sendStoreResponse(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_C_StoreRQ.getCPtr(request), T_DIMSE_C_StoreRSP.getCPtr(response), DcmDataset.getCPtr(statusDetail)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_findUser(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_C_FindRQ request, DcmDataset requestIdentifiers, SWIGTYPE_p_f_p_void_p_T_DIMSE_C_FindRQ_int_p_T_DIMSE_C_FindRSP_p_DcmDataset__void callback, SWIGTYPE_p_void callbackData, T_DIMSE_BlockingMode blockMode, int timeout, T_DIMSE_C_FindRSP response, SWIGTYPE_p_p_DcmDataset statusDetail) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_findUser(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_C_FindRQ.getCPtr(request), DcmDataset.getCPtr(requestIdentifiers), SWIGTYPE_p_f_p_void_p_T_DIMSE_C_FindRQ_int_p_T_DIMSE_C_FindRSP_p_DcmDataset__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData), (int)blockMode, timeout, T_DIMSE_C_FindRSP.getCPtr(response), SWIGTYPE_p_p_DcmDataset.getCPtr(statusDetail)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_findProvider(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presIdCmd, T_DIMSE_C_FindRQ request, SWIGTYPE_p_f_p_void_bool_p_T_DIMSE_C_FindRQ_p_DcmDataset_int_p_T_DIMSE_C_FindRSP_p_p_DcmDataset_p_p_DcmDataset__void callback, SWIGTYPE_p_void callbackData, T_DIMSE_BlockingMode blockMode, int timeout) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_findProvider(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presIdCmd), T_DIMSE_C_FindRQ.getCPtr(request), SWIGTYPE_p_f_p_void_bool_p_T_DIMSE_C_FindRQ_p_DcmDataset_int_p_T_DIMSE_C_FindRSP_p_p_DcmDataset_p_p_DcmDataset__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData), (int)blockMode, timeout), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_sendFindResponse(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_C_FindRQ request, T_DIMSE_C_FindRSP response, DcmDataset responseIdentifiers, DcmDataset statusDetail) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_sendFindResponse(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_C_FindRQ.getCPtr(request), T_DIMSE_C_FindRSP.getCPtr(response), DcmDataset.getCPtr(responseIdentifiers), DcmDataset.getCPtr(statusDetail)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_moveUser(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_C_MoveRQ request, DcmDataset requestIdentifiers, SWIGTYPE_p_f_p_void_p_T_DIMSE_C_MoveRQ_int_p_T_DIMSE_C_MoveRSP__void callback, SWIGTYPE_p_void callbackData, T_DIMSE_BlockingMode blockMode, int timeout, T_ASC_Network net, SWIGTYPE_p_f_p_void_p_T_ASC_Network_p_p_T_ASC_Association__void subOpCallback, SWIGTYPE_p_void subOpCallbackData, T_DIMSE_C_MoveRSP response, SWIGTYPE_p_p_DcmDataset statusDetail, SWIGTYPE_p_p_DcmDataset responseIdentifers) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_moveUser(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_C_MoveRQ.getCPtr(request), DcmDataset.getCPtr(requestIdentifiers), SWIGTYPE_p_f_p_void_p_T_DIMSE_C_MoveRQ_int_p_T_DIMSE_C_MoveRSP__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData), (int)blockMode, timeout, T_ASC_Network.getCPtr(net), SWIGTYPE_p_f_p_void_p_T_ASC_Network_p_p_T_ASC_Association__void.getCPtr(subOpCallback), SWIGTYPE_p_void.getCPtr(subOpCallbackData), T_DIMSE_C_MoveRSP.getCPtr(response), SWIGTYPE_p_p_DcmDataset.getCPtr(statusDetail), SWIGTYPE_p_p_DcmDataset.getCPtr(responseIdentifers)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_moveProvider(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presIdCmd, T_DIMSE_C_MoveRQ request, SWIGTYPE_p_f_p_void_bool_p_T_DIMSE_C_MoveRQ_p_DcmDataset_int_p_T_DIMSE_C_MoveRSP_p_p_DcmDataset_p_p_DcmDataset__void callback, SWIGTYPE_p_void callbackData, T_DIMSE_BlockingMode blockMode, int timeout) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_moveProvider(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presIdCmd), T_DIMSE_C_MoveRQ.getCPtr(request), SWIGTYPE_p_f_p_void_bool_p_T_DIMSE_C_MoveRQ_p_DcmDataset_int_p_T_DIMSE_C_MoveRSP_p_p_DcmDataset_p_p_DcmDataset__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData), (int)blockMode, timeout), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_sendMoveResponse(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_C_MoveRQ request, T_DIMSE_C_MoveRSP response, DcmDataset rspIds, DcmDataset statusDetail) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_sendMoveResponse(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_C_MoveRQ.getCPtr(request), T_DIMSE_C_MoveRSP.getCPtr(response), DcmDataset.getCPtr(rspIds), DcmDataset.getCPtr(statusDetail)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_getUser(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_C_GetRQ request, DcmDataset requestIdentifiers, SWIGTYPE_p_f_p_void_p_T_DIMSE_C_GetRQ_int_p_T_DIMSE_C_GetRSP__void callback, SWIGTYPE_p_void callbackData, T_DIMSE_BlockingMode blockMode, int timeout, T_ASC_Network net, SWIGTYPE_p_f_p_void_p_T_ASC_Network_p_p_T_ASC_Association__void subOpCallback, SWIGTYPE_p_void subOpCallbackData, T_DIMSE_C_GetRSP response, SWIGTYPE_p_p_DcmDataset statusDetail, SWIGTYPE_p_p_DcmDataset responseIdentifers) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_getUser(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_C_GetRQ.getCPtr(request), DcmDataset.getCPtr(requestIdentifiers), SWIGTYPE_p_f_p_void_p_T_DIMSE_C_GetRQ_int_p_T_DIMSE_C_GetRSP__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData), (int)blockMode, timeout, T_ASC_Network.getCPtr(net), SWIGTYPE_p_f_p_void_p_T_ASC_Network_p_p_T_ASC_Association__void.getCPtr(subOpCallback), SWIGTYPE_p_void.getCPtr(subOpCallbackData), T_DIMSE_C_GetRSP.getCPtr(response), SWIGTYPE_p_p_DcmDataset.getCPtr(statusDetail), SWIGTYPE_p_p_DcmDataset.getCPtr(responseIdentifers)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_getProvider(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presIdCmd, T_DIMSE_C_GetRQ request, SWIGTYPE_p_f_p_void_bool_p_T_DIMSE_C_GetRQ_p_DcmDataset_int_p_T_DIMSE_C_GetRSP_p_p_DcmDataset_p_p_DcmDataset__void callback, SWIGTYPE_p_void callbackData, T_DIMSE_BlockingMode blockMode, int timeout) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_getProvider(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presIdCmd), T_DIMSE_C_GetRQ.getCPtr(request), SWIGTYPE_p_f_p_void_bool_p_T_DIMSE_C_GetRQ_p_DcmDataset_int_p_T_DIMSE_C_GetRSP_p_p_DcmDataset_p_p_DcmDataset__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData), (int)blockMode, timeout), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_sendGetResponse(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_C_GetRQ request, T_DIMSE_C_GetRSP response, DcmDataset rspIds, DcmDataset statusDetail) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_sendGetResponse(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_C_GetRQ.getCPtr(request), T_DIMSE_C_GetRSP.getCPtr(response), DcmDataset.getCPtr(rspIds), DcmDataset.getCPtr(statusDetail)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_sendCancelRequest(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presId, ushort msgId) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_sendCancelRequest(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presId), msgId), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_checkForCancelRQ(T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presId, ushort msgId) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_checkForCancelRQ(T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presId), msgId), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_sendMessageUsingFileData(T_ASC_Association association, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_Message msg, DcmDataset statusDetail, string dataFileName, SWIGTYPE_p_f_p_void_unsigned_long__void callback, SWIGTYPE_p_void callbackContext, SWIGTYPE_p_p_DcmDataset commandSet) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_sendMessageUsingFileData__SWIG_0(T_ASC_Association.getCPtr(association), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_Message.getCPtr(msg), DcmDataset.getCPtr(statusDetail), dataFileName, SWIGTYPE_p_f_p_void_unsigned_long__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackContext), SWIGTYPE_p_p_DcmDataset.getCPtr(commandSet)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_sendMessageUsingFileData(T_ASC_Association association, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_Message msg, DcmDataset statusDetail, string dataFileName, SWIGTYPE_p_f_p_void_unsigned_long__void callback, SWIGTYPE_p_void callbackContext) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_sendMessageUsingFileData__SWIG_1(T_ASC_Association.getCPtr(association), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_Message.getCPtr(msg), DcmDataset.getCPtr(statusDetail), dataFileName, SWIGTYPE_p_f_p_void_unsigned_long__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackContext)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_sendMessageUsingMemoryData(T_ASC_Association association, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_Message msg, DcmDataset statusDetail, DcmDataset dataObject, SWIGTYPE_p_f_p_void_unsigned_long__void callback, SWIGTYPE_p_void callbackContext, SWIGTYPE_p_p_DcmDataset commandSet) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_sendMessageUsingMemoryData__SWIG_0(T_ASC_Association.getCPtr(association), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_Message.getCPtr(msg), DcmDataset.getCPtr(statusDetail), DcmDataset.getCPtr(dataObject), SWIGTYPE_p_f_p_void_unsigned_long__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackContext), SWIGTYPE_p_p_DcmDataset.getCPtr(commandSet)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_sendMessageUsingMemoryData(T_ASC_Association association, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_Message msg, DcmDataset statusDetail, DcmDataset dataObject, SWIGTYPE_p_f_p_void_unsigned_long__void callback, SWIGTYPE_p_void callbackContext) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_sendMessageUsingMemoryData__SWIG_1(T_ASC_Association.getCPtr(association), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_Message.getCPtr(msg), DcmDataset.getCPtr(statusDetail), DcmDataset.getCPtr(dataObject), SWIGTYPE_p_f_p_void_unsigned_long__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackContext)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_receiveCommand(T_ASC_Association association, T_DIMSE_BlockingMode blocking, int timeout, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_Message msg, SWIGTYPE_p_p_DcmDataset statusDetail, SWIGTYPE_p_p_DcmDataset commandSet) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_receiveCommand__SWIG_0(T_ASC_Association.getCPtr(association), (int)blocking, timeout, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_Message.getCPtr(msg), SWIGTYPE_p_p_DcmDataset.getCPtr(statusDetail), SWIGTYPE_p_p_DcmDataset.getCPtr(commandSet)), true);
    return ret;
  }

  public static OFCondition DIMSE_receiveCommand(T_ASC_Association association, T_DIMSE_BlockingMode blocking, int timeout, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, T_DIMSE_Message msg, SWIGTYPE_p_p_DcmDataset statusDetail) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_receiveCommand__SWIG_1(T_ASC_Association.getCPtr(association), (int)blocking, timeout, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), T_DIMSE_Message.getCPtr(msg), SWIGTYPE_p_p_DcmDataset.getCPtr(statusDetail)), true);
    return ret;
  }

  public static OFCondition DIMSE_receiveDataSetInMemory(T_ASC_Association association, T_DIMSE_BlockingMode blocking, int timeout, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, SWIGTYPE_p_p_DcmDataset dataObject, SWIGTYPE_p_f_p_void_unsigned_long__void callback, SWIGTYPE_p_void callbackContext) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_receiveDataSetInMemory(T_ASC_Association.getCPtr(association), (int)blocking, timeout, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), SWIGTYPE_p_p_DcmDataset.getCPtr(dataObject), SWIGTYPE_p_f_p_void_unsigned_long__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackContext)), true);
    return ret;
  }

  public static OFCondition DIMSE_createFilestream(string filename, T_DIMSE_C_StoreRQ request, T_ASC_Association assoc, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presIdCmd, int writeMetaheader, SWIGTYPE_p_p_DcmOutputFileStream filestream) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_createFilestream(filename, T_DIMSE_C_StoreRQ.getCPtr(request), T_ASC_Association.getCPtr(assoc), SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presIdCmd), writeMetaheader, SWIGTYPE_p_p_DcmOutputFileStream.getCPtr(filestream)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFCondition DIMSE_receiveDataSetInFile(T_ASC_Association assoc, T_DIMSE_BlockingMode blocking, int timeout, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID presID, DcmOutputStream filestream, SWIGTYPE_p_f_p_void_unsigned_long__void callback, SWIGTYPE_p_void callbackData) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DIMSE_receiveDataSetInFile(T_ASC_Association.getCPtr(assoc), (int)blocking, timeout, SWIGTYPE_p_DUL_PRESENTATIONCONTEXTID.getCPtr(presID), DcmOutputStream.getCPtr(filestream), SWIGTYPE_p_f_p_void_unsigned_long__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callbackData)), true);
    return ret;
  }

  public static void DIMSE_debug(int level) {
    DCMTKPINVOKE.DIMSE_debug(level);
  }

  public static void DIMSE_warning(T_ASC_Association assoc, string format) {
    DCMTKPINVOKE.DIMSE_warning(T_ASC_Association.getCPtr(assoc), format);
  }

  public static void DIMSE_printCommand(SWIGTYPE_p_FILE f, T_DIMSE_Message msg) {
    DCMTKPINVOKE.DIMSE_printCommand(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_Message.getCPtr(msg));
  }

  public static void DIMSE_printCEchoRQ(SWIGTYPE_p_FILE f, T_DIMSE_C_EchoRQ req) {
    DCMTKPINVOKE.DIMSE_printCEchoRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_EchoRQ.getCPtr(req));
  }

  public static void DIMSE_printCEchoRSP(SWIGTYPE_p_FILE f, T_DIMSE_C_EchoRSP rsp) {
    DCMTKPINVOKE.DIMSE_printCEchoRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_EchoRSP.getCPtr(rsp));
  }

  public static void DIMSE_printCStoreRQ(SWIGTYPE_p_FILE f, T_DIMSE_C_StoreRQ req) {
    DCMTKPINVOKE.DIMSE_printCStoreRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_StoreRQ.getCPtr(req));
  }

  public static void DIMSE_printCStoreRSP(SWIGTYPE_p_FILE f, T_DIMSE_C_StoreRSP rsp) {
    DCMTKPINVOKE.DIMSE_printCStoreRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_StoreRSP.getCPtr(rsp));
  }

  public static void DIMSE_printCGetRQ(SWIGTYPE_p_FILE f, T_DIMSE_C_GetRQ req) {
    DCMTKPINVOKE.DIMSE_printCGetRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_GetRQ.getCPtr(req));
  }

  public static void DIMSE_printCGetRSP(SWIGTYPE_p_FILE f, T_DIMSE_C_GetRSP rsp) {
    DCMTKPINVOKE.DIMSE_printCGetRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_GetRSP.getCPtr(rsp));
  }

  public static void DIMSE_printCMoveRQ(SWIGTYPE_p_FILE f, T_DIMSE_C_MoveRQ req) {
    DCMTKPINVOKE.DIMSE_printCMoveRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_MoveRQ.getCPtr(req));
  }

  public static void DIMSE_printCMoveRSP(SWIGTYPE_p_FILE f, T_DIMSE_C_MoveRSP rsp) {
    DCMTKPINVOKE.DIMSE_printCMoveRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_MoveRSP.getCPtr(rsp));
  }

  public static void DIMSE_printCFindRQ(SWIGTYPE_p_FILE f, T_DIMSE_C_FindRQ req) {
    DCMTKPINVOKE.DIMSE_printCFindRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_FindRQ.getCPtr(req));
  }

  public static void DIMSE_printCFindRSP(SWIGTYPE_p_FILE f, T_DIMSE_C_FindRSP rsp) {
    DCMTKPINVOKE.DIMSE_printCFindRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_FindRSP.getCPtr(rsp));
  }

  public static void DIMSE_printCCancelRQ(SWIGTYPE_p_FILE f, T_DIMSE_C_CancelRQ req) {
    DCMTKPINVOKE.DIMSE_printCCancelRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_C_CancelRQ.getCPtr(req));
  }

  public static void DIMSE_printNEventReportRQ(SWIGTYPE_p_FILE f, T_DIMSE_N_EventReportRQ req) {
    DCMTKPINVOKE.DIMSE_printNEventReportRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_EventReportRQ.getCPtr(req));
  }

  public static void DIMSE_printNEventReportRSP(SWIGTYPE_p_FILE f, T_DIMSE_N_EventReportRSP rsp) {
    DCMTKPINVOKE.DIMSE_printNEventReportRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_EventReportRSP.getCPtr(rsp));
  }

  public static void DIMSE_printNGetRQ(SWIGTYPE_p_FILE f, T_DIMSE_N_GetRQ req) {
    DCMTKPINVOKE.DIMSE_printNGetRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_GetRQ.getCPtr(req));
  }

  public static void DIMSE_printNGetRSP(SWIGTYPE_p_FILE f, T_DIMSE_N_GetRSP rsp) {
    DCMTKPINVOKE.DIMSE_printNGetRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_GetRSP.getCPtr(rsp));
  }

  public static void DIMSE_printNSetRQ(SWIGTYPE_p_FILE f, T_DIMSE_N_SetRQ req) {
    DCMTKPINVOKE.DIMSE_printNSetRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_SetRQ.getCPtr(req));
  }

  public static void DIMSE_printNSetRSP(SWIGTYPE_p_FILE f, T_DIMSE_N_SetRSP rsp) {
    DCMTKPINVOKE.DIMSE_printNSetRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_SetRSP.getCPtr(rsp));
  }

  public static void DIMSE_printNActionRQ(SWIGTYPE_p_FILE f, T_DIMSE_N_ActionRQ req) {
    DCMTKPINVOKE.DIMSE_printNActionRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_ActionRQ.getCPtr(req));
  }

  public static void DIMSE_printNActionRSP(SWIGTYPE_p_FILE f, T_DIMSE_N_ActionRSP rsp) {
    DCMTKPINVOKE.DIMSE_printNActionRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_ActionRSP.getCPtr(rsp));
  }

  public static void DIMSE_printNCreateRQ(SWIGTYPE_p_FILE f, T_DIMSE_N_CreateRQ req) {
    DCMTKPINVOKE.DIMSE_printNCreateRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_CreateRQ.getCPtr(req));
  }

  public static void DIMSE_printNCreateRSP(SWIGTYPE_p_FILE f, T_DIMSE_N_CreateRSP rsp) {
    DCMTKPINVOKE.DIMSE_printNCreateRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_CreateRSP.getCPtr(rsp));
  }

  public static void DIMSE_printNDeleteRQ(SWIGTYPE_p_FILE f, T_DIMSE_N_DeleteRQ req) {
    DCMTKPINVOKE.DIMSE_printNDeleteRQ(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_DeleteRQ.getCPtr(req));
  }

  public static void DIMSE_printNDeleteRSP(SWIGTYPE_p_FILE f, T_DIMSE_N_DeleteRSP rsp) {
    DCMTKPINVOKE.DIMSE_printNDeleteRSP(SWIGTYPE_p_FILE.getCPtr(f), T_DIMSE_N_DeleteRSP.getCPtr(rsp));
  }

  public static void DIMSE_printMessage(SWIGTYPE_p_ostream outstream, T_DIMSE_Message msg, DcmItem dataset) {
    DCMTKPINVOKE.DIMSE_printMessage__SWIG_0(SWIGTYPE_p_ostream.getCPtr(outstream), T_DIMSE_Message.getCPtr(msg), DcmItem.getCPtr(dataset));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DIMSE_printMessage(SWIGTYPE_p_ostream outstream, T_DIMSE_Message msg) {
    DCMTKPINVOKE.DIMSE_printMessage__SWIG_1(SWIGTYPE_p_ostream.getCPtr(outstream), T_DIMSE_Message.getCPtr(msg));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string DU_stripTrailingSpaces(string s) {
    string ret = DCMTKPINVOKE.DU_stripTrailingSpaces(s);
    return ret;
  }

  public static string DU_stripLeadingSpaces(string s) {
    string ret = DCMTKPINVOKE.DU_stripLeadingSpaces(s);
    return ret;
  }

  public static string DU_stripLeadingAndTrailingSpaces(string s) {
    string ret = DCMTKPINVOKE.DU_stripLeadingAndTrailingSpaces(s);
    return ret;
  }

  public static bool DU_getStringDOElement(DcmItem obj, DcmTagKey t, string s) {
    bool ret = DCMTKPINVOKE.DU_getStringDOElement(DcmItem.getCPtr(obj), DcmTagKey.getCPtr(t), s);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DU_putStringDOElement(DcmItem obj, DcmTagKey t, string s) {
    bool ret = DCMTKPINVOKE.DU_putStringDOElement(DcmItem.getCPtr(obj), DcmTagKey.getCPtr(t), s);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DU_getShortDOElement(DcmItem obj, DcmTagKey t, ushort[] us) {
    bool ret = DCMTKPINVOKE.DU_getShortDOElement(DcmItem.getCPtr(obj), DcmTagKey.getCPtr(t), us);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DU_putShortDOElement(DcmItem obj, DcmTagKey t, ushort us) {
    bool ret = DCMTKPINVOKE.DU_putShortDOElement(DcmItem.getCPtr(obj), DcmTagKey.getCPtr(t), us);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DU_findSOPClassAndInstanceInDataSet(DcmItem obj, string sopClass, string sopInstance, bool tolerateSpacePaddedUIDs) {
    bool ret = DCMTKPINVOKE.DU_findSOPClassAndInstanceInDataSet__SWIG_0(DcmItem.getCPtr(obj), sopClass, sopInstance, tolerateSpacePaddedUIDs);
    return ret;
  }

  public static bool DU_findSOPClassAndInstanceInDataSet(DcmItem obj, string sopClass, string sopInstance) {
    bool ret = DCMTKPINVOKE.DU_findSOPClassAndInstanceInDataSet__SWIG_1(DcmItem.getCPtr(obj), sopClass, sopInstance);
    return ret;
  }

  public static bool DU_findSOPClassAndInstanceInFile(string fname, string sopClass, string sopInstance, bool tolerateSpacePaddedUIDs) {
    bool ret = DCMTKPINVOKE.DU_findSOPClassAndInstanceInFile__SWIG_0(fname, sopClass, sopInstance, tolerateSpacePaddedUIDs);
    return ret;
  }

  public static bool DU_findSOPClassAndInstanceInFile(string fname, string sopClass, string sopInstance) {
    bool ret = DCMTKPINVOKE.DU_findSOPClassAndInstanceInFile__SWIG_1(fname, sopClass, sopInstance);
    return ret;
  }

  public static uint DU_fileSize(string fname) {
    uint ret = DCMTKPINVOKE.DU_fileSize(fname);
    return ret;
  }

  public static string DU_cstoreStatusString(ushort statusCode) {
    string ret = DCMTKPINVOKE.DU_cstoreStatusString(statusCode);
    return ret;
  }

  public static string DU_cfindStatusString(ushort statusCode) {
    string ret = DCMTKPINVOKE.DU_cfindStatusString(statusCode);
    return ret;
  }

  public static string DU_cmoveStatusString(ushort statusCode) {
    string ret = DCMTKPINVOKE.DU_cmoveStatusString(statusCode);
    return ret;
  }

  public static string DU_cgetStatusString(ushort statusCode) {
    string ret = DCMTKPINVOKE.DU_cgetStatusString(statusCode);
    return ret;
  }

  public static LST_HEAD LST_Create() {
    IntPtr cPtr = DCMTKPINVOKE.LST_Create();
    LST_HEAD ret = (cPtr == IntPtr.Zero) ? null : new LST_HEAD(cPtr, false);
    return ret;
  }

  public static OFCondition LST_Destroy(SWIGTYPE_p_p_LST_HEAD lst) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.LST_Destroy(SWIGTYPE_p_p_LST_HEAD.getCPtr(lst)), true);
    return ret;
  }

  public static OFCondition LST_Enqueue(SWIGTYPE_p_p_LST_HEAD lst, SWIGTYPE_p_void node) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.LST_Enqueue(SWIGTYPE_p_p_LST_HEAD.getCPtr(lst), SWIGTYPE_p_void.getCPtr(node)), true);
    return ret;
  }

  public static SWIGTYPE_p_void LST_Dequeue(SWIGTYPE_p_p_LST_HEAD lst) {
    IntPtr cPtr = DCMTKPINVOKE.LST_Dequeue(SWIGTYPE_p_p_LST_HEAD.getCPtr(lst));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void LST_Pop(SWIGTYPE_p_p_LST_HEAD lst) {
    IntPtr cPtr = DCMTKPINVOKE.LST_Pop(SWIGTYPE_p_p_LST_HEAD.getCPtr(lst));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static uint LST_Count(SWIGTYPE_p_p_LST_HEAD lst) {
    uint ret = DCMTKPINVOKE.LST_Count(SWIGTYPE_p_p_LST_HEAD.getCPtr(lst));
    return ret;
  }

  public static SWIGTYPE_p_void LST_Head(SWIGTYPE_p_p_LST_HEAD lst) {
    IntPtr cPtr = DCMTKPINVOKE.LST_Head(SWIGTYPE_p_p_LST_HEAD.getCPtr(lst));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void LST_Current(SWIGTYPE_p_p_LST_HEAD lst) {
    IntPtr cPtr = DCMTKPINVOKE.LST_Current(SWIGTYPE_p_p_LST_HEAD.getCPtr(lst));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void LST_Next(SWIGTYPE_p_p_LST_HEAD lst) {
    IntPtr cPtr = DCMTKPINVOKE.LST_Next(SWIGTYPE_p_p_LST_HEAD.getCPtr(lst));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void LST_Position(SWIGTYPE_p_p_LST_HEAD lst, SWIGTYPE_p_void node) {
    IntPtr cPtr = DCMTKPINVOKE.LST_Position(SWIGTYPE_p_p_LST_HEAD.getCPtr(lst), SWIGTYPE_p_void.getCPtr(node));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static readonly int DCTYPES_H = DCMTKPINVOKE.get_DCTYPES_H();
  public static readonly string DCMTK_XML_NAMESPACE_URI = DCMTKPINVOKE.get_DCMTK_XML_NAMESPACE_URI();
  public static readonly int DCMVR_H = DCMTKPINVOKE.get_DCMVR_H();
  public static readonly string OFFIS_DTK_IMPLEMENTATION_VERSION_NAME = DCMTKPINVOKE.get_OFFIS_DTK_IMPLEMENTATION_VERSION_NAME();
  public static readonly string OFFIS_DTK_IMPLEMENTATION_VERSION_NAME2 = DCMTKPINVOKE.get_OFFIS_DTK_IMPLEMENTATION_VERSION_NAME2();
  public static readonly string OFFIS_DCMTK_RELEASEDATE = DCMTKPINVOKE.get_OFFIS_DCMTK_RELEASEDATE();
  public static readonly string OFFIS_UID_ROOT = DCMTKPINVOKE.get_OFFIS_UID_ROOT();
  public static readonly int OFFIS_DCMTK_VERSION_NUMBER = DCMTKPINVOKE.get_OFFIS_DCMTK_VERSION_NUMBER();
  public static readonly string OFFIS_DCMTK_VERSION_STRING = DCMTKPINVOKE.get_OFFIS_DCMTK_VERSION_STRING();
  public static readonly string OFFIS_DCMTK_VERSION_SUFFIX = DCMTKPINVOKE.get_OFFIS_DCMTK_VERSION_SUFFIX();
  public static readonly string OFFIS_DCMTK_VERSION = DCMTKPINVOKE.get_OFFIS_DCMTK_VERSION();
  public static readonly string OFFIS_IMPLEMENTATION_CLASS_UID = DCMTKPINVOKE.get_OFFIS_IMPLEMENTATION_CLASS_UID();
  public static readonly string OFFIS_INSTANCE_CREATOR_UID = DCMTKPINVOKE.get_OFFIS_INSTANCE_CREATOR_UID();
  public static readonly string OFFIS_CODING_SCHEME_UID_ROOT = DCMTKPINVOKE.get_OFFIS_CODING_SCHEME_UID_ROOT();
  public static readonly string OFFIS_CODING_SCHEME_VERSION = DCMTKPINVOKE.get_OFFIS_CODING_SCHEME_VERSION();
  public static readonly string OFFIS_CODING_SCHEME_UID = DCMTKPINVOKE.get_OFFIS_CODING_SCHEME_UID();
  public static readonly string SITE_UID_ROOT = DCMTKPINVOKE.get_SITE_UID_ROOT();
  public static readonly string SITE_STUDY_UID_ROOT = DCMTKPINVOKE.get_SITE_STUDY_UID_ROOT();
  public static readonly string SITE_SERIES_UID_ROOT = DCMTKPINVOKE.get_SITE_SERIES_UID_ROOT();
  public static readonly string SITE_INSTANCE_UID_ROOT = DCMTKPINVOKE.get_SITE_INSTANCE_UID_ROOT();
  public static readonly string UID_PrivateGenericFileSOPClass = DCMTKPINVOKE.get_UID_PrivateGenericFileSOPClass();
  public static readonly string UID_StandardApplicationContext = DCMTKPINVOKE.get_UID_StandardApplicationContext();
  public static readonly string UID_LittleEndianImplicitTransferSyntax = DCMTKPINVOKE.get_UID_LittleEndianImplicitTransferSyntax();
  public static readonly string UID_LittleEndianExplicitTransferSyntax = DCMTKPINVOKE.get_UID_LittleEndianExplicitTransferSyntax();
  public static readonly string UID_BigEndianExplicitTransferSyntax = DCMTKPINVOKE.get_UID_BigEndianExplicitTransferSyntax();
  public static readonly string UID_JPEGProcess1TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess1TransferSyntax();
  public static readonly string UID_JPEGProcess2_4TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess2_4TransferSyntax();
  public static readonly string UID_JPEGProcess3_5TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess3_5TransferSyntax();
  public static readonly string UID_JPEGProcess6_8TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess6_8TransferSyntax();
  public static readonly string UID_JPEGProcess7_9TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess7_9TransferSyntax();
  public static readonly string UID_JPEGProcess10_12TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess10_12TransferSyntax();
  public static readonly string UID_JPEGProcess11_13TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess11_13TransferSyntax();
  public static readonly string UID_JPEGProcess14TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess14TransferSyntax();
  public static readonly string UID_JPEGProcess15TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess15TransferSyntax();
  public static readonly string UID_JPEGProcess16_18TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess16_18TransferSyntax();
  public static readonly string UID_JPEGProcess17_19TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess17_19TransferSyntax();
  public static readonly string UID_JPEGProcess20_22TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess20_22TransferSyntax();
  public static readonly string UID_JPEGProcess21_23TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess21_23TransferSyntax();
  public static readonly string UID_JPEGProcess24_26TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess24_26TransferSyntax();
  public static readonly string UID_JPEGProcess25_27TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess25_27TransferSyntax();
  public static readonly string UID_JPEGProcess28TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess28TransferSyntax();
  public static readonly string UID_JPEGProcess29TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess29TransferSyntax();
  public static readonly string UID_JPEGProcess14SV1TransferSyntax = DCMTKPINVOKE.get_UID_JPEGProcess14SV1TransferSyntax();
  public static readonly string UID_JPEGLSLosslessTransferSyntax = DCMTKPINVOKE.get_UID_JPEGLSLosslessTransferSyntax();
  public static readonly string UID_JPEGLSLossyTransferSyntax = DCMTKPINVOKE.get_UID_JPEGLSLossyTransferSyntax();
  public static readonly string UID_RLELosslessTransferSyntax = DCMTKPINVOKE.get_UID_RLELosslessTransferSyntax();
  public static readonly string UID_DeflatedExplicitVRLittleEndianTransferSyntax = DCMTKPINVOKE.get_UID_DeflatedExplicitVRLittleEndianTransferSyntax();
  public static readonly string UID_JPEG2000LosslessOnlyTransferSyntax = DCMTKPINVOKE.get_UID_JPEG2000LosslessOnlyTransferSyntax();
  public static readonly string UID_JPEG2000TransferSyntax = DCMTKPINVOKE.get_UID_JPEG2000TransferSyntax();
  public static readonly string UID_MPEG2MainProfileAtMainLevelTransferSyntax = DCMTKPINVOKE.get_UID_MPEG2MainProfileAtMainLevelTransferSyntax();
  public static readonly string UID_StoredPrintStorage = DCMTKPINVOKE.get_UID_StoredPrintStorage();
  public static readonly string UID_HardcopyGrayscaleImageStorage = DCMTKPINVOKE.get_UID_HardcopyGrayscaleImageStorage();
  public static readonly string UID_HardcopyColorImageStorage = DCMTKPINVOKE.get_UID_HardcopyColorImageStorage();
  public static readonly string UID_ComputedRadiographyImageStorage = DCMTKPINVOKE.get_UID_ComputedRadiographyImageStorage();
  public static readonly string UID_DigitalXRayImageStorageForPresentation = DCMTKPINVOKE.get_UID_DigitalXRayImageStorageForPresentation();
  public static readonly string UID_DigitalXRayImageStorageForProcessing = DCMTKPINVOKE.get_UID_DigitalXRayImageStorageForProcessing();
  public static readonly string UID_DigitalMammographyXRayImageStorageForPresentation = DCMTKPINVOKE.get_UID_DigitalMammographyXRayImageStorageForPresentation();
  public static readonly string UID_DigitalMammographyXRayImageStorageForProcessing = DCMTKPINVOKE.get_UID_DigitalMammographyXRayImageStorageForProcessing();
  public static readonly string UID_DigitalIntraOralXRayImageStorageForPresentation = DCMTKPINVOKE.get_UID_DigitalIntraOralXRayImageStorageForPresentation();
  public static readonly string UID_DigitalIntraOralXRayImageStorageForProcessing = DCMTKPINVOKE.get_UID_DigitalIntraOralXRayImageStorageForProcessing();
  public static readonly string UID_CTImageStorage = DCMTKPINVOKE.get_UID_CTImageStorage();
  public static readonly string UID_EnhancedCTImageStorage = DCMTKPINVOKE.get_UID_EnhancedCTImageStorage();
  public static readonly string UID_RETIRED_UltrasoundMultiframeImageStorage = DCMTKPINVOKE.get_UID_RETIRED_UltrasoundMultiframeImageStorage();
  public static readonly string UID_UltrasoundMultiframeImageStorage = DCMTKPINVOKE.get_UID_UltrasoundMultiframeImageStorage();
  public static readonly string UID_MRImageStorage = DCMTKPINVOKE.get_UID_MRImageStorage();
  public static readonly string UID_RETIRED_NuclearMedicineImageStorage = DCMTKPINVOKE.get_UID_RETIRED_NuclearMedicineImageStorage();
  public static readonly string UID_RETIRED_UltrasoundImageStorage = DCMTKPINVOKE.get_UID_RETIRED_UltrasoundImageStorage();
  public static readonly string UID_UltrasoundImageStorage = DCMTKPINVOKE.get_UID_UltrasoundImageStorage();
  public static readonly string UID_SecondaryCaptureImageStorage = DCMTKPINVOKE.get_UID_SecondaryCaptureImageStorage();
  public static readonly string UID_StandaloneOverlayStorage = DCMTKPINVOKE.get_UID_StandaloneOverlayStorage();
  public static readonly string UID_StandaloneCurveStorage = DCMTKPINVOKE.get_UID_StandaloneCurveStorage();
  public static readonly string UID_TwelveLeadECGWaveformStorage = DCMTKPINVOKE.get_UID_TwelveLeadECGWaveformStorage();
  public static readonly string UID_GeneralECGWaveformStorage = DCMTKPINVOKE.get_UID_GeneralECGWaveformStorage();
  public static readonly string UID_AmbulatoryECGWaveformStorage = DCMTKPINVOKE.get_UID_AmbulatoryECGWaveformStorage();
  public static readonly string UID_HemodynamicWaveformStorage = DCMTKPINVOKE.get_UID_HemodynamicWaveformStorage();
  public static readonly string UID_CardiacElectrophysiologyWaveformStorage = DCMTKPINVOKE.get_UID_CardiacElectrophysiologyWaveformStorage();
  public static readonly string UID_BasicVoiceAudioWaveformStorage = DCMTKPINVOKE.get_UID_BasicVoiceAudioWaveformStorage();
  public static readonly string UID_StandaloneModalityLUTStorage = DCMTKPINVOKE.get_UID_StandaloneModalityLUTStorage();
  public static readonly string UID_StandaloneVOILUTStorage = DCMTKPINVOKE.get_UID_StandaloneVOILUTStorage();
  public static readonly string UID_GrayscaleSoftcopyPresentationStateStorage = DCMTKPINVOKE.get_UID_GrayscaleSoftcopyPresentationStateStorage();
  public static readonly string UID_XRayAngiographicImageStorage = DCMTKPINVOKE.get_UID_XRayAngiographicImageStorage();
  public static readonly string UID_XRayFluoroscopyImageStorage = DCMTKPINVOKE.get_UID_XRayFluoroscopyImageStorage();
  public static readonly string UID_RETIRED_XRayAngiographicBiPlaneImageStorage = DCMTKPINVOKE.get_UID_RETIRED_XRayAngiographicBiPlaneImageStorage();
  public static readonly string UID_NuclearMedicineImageStorage = DCMTKPINVOKE.get_UID_NuclearMedicineImageStorage();
  public static readonly string UID_RETIRED_VLImageStorage = DCMTKPINVOKE.get_UID_RETIRED_VLImageStorage();
  public static readonly string UID_VLEndoscopicImageStorage = DCMTKPINVOKE.get_UID_VLEndoscopicImageStorage();
  public static readonly string UID_VLMicroscopicImageStorage = DCMTKPINVOKE.get_UID_VLMicroscopicImageStorage();
  public static readonly string UID_VLSlideCoordinatesMicroscopicImageStorage = DCMTKPINVOKE.get_UID_VLSlideCoordinatesMicroscopicImageStorage();
  public static readonly string UID_VLPhotographicImageStorage = DCMTKPINVOKE.get_UID_VLPhotographicImageStorage();
  public static readonly string UID_RETIRED_VLMultiFrameImageStorage = DCMTKPINVOKE.get_UID_RETIRED_VLMultiFrameImageStorage();
  public static readonly string UID_BasicTextSR = DCMTKPINVOKE.get_UID_BasicTextSR();
  public static readonly string UID_EnhancedSR = DCMTKPINVOKE.get_UID_EnhancedSR();
  public static readonly string UID_ComprehensiveSR = DCMTKPINVOKE.get_UID_ComprehensiveSR();
  public static readonly string UID_PETImageStorage = DCMTKPINVOKE.get_UID_PETImageStorage();
  public static readonly string UID_PETCurveStorage = DCMTKPINVOKE.get_UID_PETCurveStorage();
  public static readonly string UID_RTImageStorage = DCMTKPINVOKE.get_UID_RTImageStorage();
  public static readonly string UID_RTDoseStorage = DCMTKPINVOKE.get_UID_RTDoseStorage();
  public static readonly string UID_RTStructureSetStorage = DCMTKPINVOKE.get_UID_RTStructureSetStorage();
  public static readonly string UID_RTBeamsTreatmentRecordStorage = DCMTKPINVOKE.get_UID_RTBeamsTreatmentRecordStorage();
  public static readonly string UID_RTPlanStorage = DCMTKPINVOKE.get_UID_RTPlanStorage();
  public static readonly string UID_RTBrachyTreatmentRecordStorage = DCMTKPINVOKE.get_UID_RTBrachyTreatmentRecordStorage();
  public static readonly string UID_RTTreatmentSummaryRecordStorage = DCMTKPINVOKE.get_UID_RTTreatmentSummaryRecordStorage();
  public static readonly string UID_EnhancedMRImageStorage = DCMTKPINVOKE.get_UID_EnhancedMRImageStorage();
  public static readonly string UID_MRSpectroscopyStorage = DCMTKPINVOKE.get_UID_MRSpectroscopyStorage();
  public static readonly string UID_RawDataStorage = DCMTKPINVOKE.get_UID_RawDataStorage();
  public static readonly string UID_MammographyCADSR = DCMTKPINVOKE.get_UID_MammographyCADSR();
  public static readonly string UID_MultiframeSingleBitSecondaryCaptureImageStorage = DCMTKPINVOKE.get_UID_MultiframeSingleBitSecondaryCaptureImageStorage();
  public static readonly string UID_MultiframeGrayscaleByteSecondaryCaptureImageStorage = DCMTKPINVOKE.get_UID_MultiframeGrayscaleByteSecondaryCaptureImageStorage();
  public static readonly string UID_MultiframeGrayscaleWordSecondaryCaptureImageStorage = DCMTKPINVOKE.get_UID_MultiframeGrayscaleWordSecondaryCaptureImageStorage();
  public static readonly string UID_MultiframeTrueColorSecondaryCaptureImageStorage = DCMTKPINVOKE.get_UID_MultiframeTrueColorSecondaryCaptureImageStorage();
  public static readonly string UID_KeyObjectSelectionDocument = DCMTKPINVOKE.get_UID_KeyObjectSelectionDocument();
  public static readonly string UID_ChestCADSR = DCMTKPINVOKE.get_UID_ChestCADSR();
  public static readonly string UID_ProcedureLogStorage = DCMTKPINVOKE.get_UID_ProcedureLogStorage();
  public static readonly string UID_SpatialRegistrationStorage = DCMTKPINVOKE.get_UID_SpatialRegistrationStorage();
  public static readonly string UID_SpatialFiducialsStorage = DCMTKPINVOKE.get_UID_SpatialFiducialsStorage();
  public static readonly string UID_FINDPatientRootQueryRetrieveInformationModel = DCMTKPINVOKE.get_UID_FINDPatientRootQueryRetrieveInformationModel();
  public static readonly string UID_MOVEPatientRootQueryRetrieveInformationModel = DCMTKPINVOKE.get_UID_MOVEPatientRootQueryRetrieveInformationModel();
  public static readonly string UID_GETPatientRootQueryRetrieveInformationModel = DCMTKPINVOKE.get_UID_GETPatientRootQueryRetrieveInformationModel();
  public static readonly string UID_FINDStudyRootQueryRetrieveInformationModel = DCMTKPINVOKE.get_UID_FINDStudyRootQueryRetrieveInformationModel();
  public static readonly string UID_MOVEStudyRootQueryRetrieveInformationModel = DCMTKPINVOKE.get_UID_MOVEStudyRootQueryRetrieveInformationModel();
  public static readonly string UID_GETStudyRootQueryRetrieveInformationModel = DCMTKPINVOKE.get_UID_GETStudyRootQueryRetrieveInformationModel();
  public static readonly string UID_FINDPatientStudyOnlyQueryRetrieveInformationModel = DCMTKPINVOKE.get_UID_FINDPatientStudyOnlyQueryRetrieveInformationModel();
  public static readonly string UID_MOVEPatientStudyOnlyQueryRetrieveInformationModel = DCMTKPINVOKE.get_UID_MOVEPatientStudyOnlyQueryRetrieveInformationModel();
  public static readonly string UID_GETPatientStudyOnlyQueryRetrieveInformationModel = DCMTKPINVOKE.get_UID_GETPatientStudyOnlyQueryRetrieveInformationModel();
  public static readonly string UID_FINDModalityWorklistInformationModel = DCMTKPINVOKE.get_UID_FINDModalityWorklistInformationModel();
  public static readonly string UID_FINDGeneralPurposeWorklistInformationModel = DCMTKPINVOKE.get_UID_FINDGeneralPurposeWorklistInformationModel();
  public static readonly string UID_BasicFilmSessionSOPClass = DCMTKPINVOKE.get_UID_BasicFilmSessionSOPClass();
  public static readonly string UID_BasicFilmBoxSOPClass = DCMTKPINVOKE.get_UID_BasicFilmBoxSOPClass();
  public static readonly string UID_BasicGrayscaleImageBoxSOPClass = DCMTKPINVOKE.get_UID_BasicGrayscaleImageBoxSOPClass();
  public static readonly string UID_BasicColorImageBoxSOPClass = DCMTKPINVOKE.get_UID_BasicColorImageBoxSOPClass();
  public static readonly string UID_RETIRED_ReferencedImageBoxSOPClass = DCMTKPINVOKE.get_UID_RETIRED_ReferencedImageBoxSOPClass();
  public static readonly string UID_BasicGrayscalePrintManagementMetaSOPClass = DCMTKPINVOKE.get_UID_BasicGrayscalePrintManagementMetaSOPClass();
  public static readonly string UID_RETIRED_ReferencedGrayscalePrintManagementMetaSOPClass = DCMTKPINVOKE.get_UID_RETIRED_ReferencedGrayscalePrintManagementMetaSOPClass();
  public static readonly string UID_PrintJobSOPClass = DCMTKPINVOKE.get_UID_PrintJobSOPClass();
  public static readonly string UID_BasicAnnotationBoxSOPClass = DCMTKPINVOKE.get_UID_BasicAnnotationBoxSOPClass();
  public static readonly string UID_PrinterSOPClass = DCMTKPINVOKE.get_UID_PrinterSOPClass();
  public static readonly string UID_PrinterConfigurationRetrievalSOPClass = DCMTKPINVOKE.get_UID_PrinterConfigurationRetrievalSOPClass();
  public static readonly string UID_PrinterSOPInstance = DCMTKPINVOKE.get_UID_PrinterSOPInstance();
  public static readonly string UID_PrinterConfigurationRetrievalSOPInstance = DCMTKPINVOKE.get_UID_PrinterConfigurationRetrievalSOPInstance();
  public static readonly string UID_BasicColorPrintManagementMetaSOPClass = DCMTKPINVOKE.get_UID_BasicColorPrintManagementMetaSOPClass();
  public static readonly string UID_RETIRED_ReferencedColorPrintManagementMetaSOPClass = DCMTKPINVOKE.get_UID_RETIRED_ReferencedColorPrintManagementMetaSOPClass();
  public static readonly string UID_VOILUTBoxSOPClass = DCMTKPINVOKE.get_UID_VOILUTBoxSOPClass();
  public static readonly string UID_PresentationLUTSOPClass = DCMTKPINVOKE.get_UID_PresentationLUTSOPClass();
  public static readonly string UID_ImageOverlayBoxSOPClass = DCMTKPINVOKE.get_UID_ImageOverlayBoxSOPClass();
  public static readonly string UID_BasicPrintImageOverlayBoxSOPClass = DCMTKPINVOKE.get_UID_BasicPrintImageOverlayBoxSOPClass();
  public static readonly string UID_PrintQueueSOPInstance = DCMTKPINVOKE.get_UID_PrintQueueSOPInstance();
  public static readonly string UID_PrintQueueManagementSOPClass = DCMTKPINVOKE.get_UID_PrintQueueManagementSOPClass();
  public static readonly string UID_PullPrintRequestSOPClass = DCMTKPINVOKE.get_UID_PullPrintRequestSOPClass();
  public static readonly string UID_PullStoredPrintManagementMetaSOPClass = DCMTKPINVOKE.get_UID_PullStoredPrintManagementMetaSOPClass();
  public static readonly string UID_StorageCommitmentPushModelSOPClass = DCMTKPINVOKE.get_UID_StorageCommitmentPushModelSOPClass();
  public static readonly string UID_StorageCommitmentPushModelSOPInstance = DCMTKPINVOKE.get_UID_StorageCommitmentPushModelSOPInstance();
  public static readonly string UID_RETIRED_StorageCommitmentPullModelSOPClass = DCMTKPINVOKE.get_UID_RETIRED_StorageCommitmentPullModelSOPClass();
  public static readonly string UID_RETIRED_StorageCommitmentPullModelSOPInstance = DCMTKPINVOKE.get_UID_RETIRED_StorageCommitmentPullModelSOPInstance();
  public static readonly string UID_ModalityPerformedProcedureStepSOPClass = DCMTKPINVOKE.get_UID_ModalityPerformedProcedureStepSOPClass();
  public static readonly string UID_ModalityPerformedProcedureStepRetrieveSOPClass = DCMTKPINVOKE.get_UID_ModalityPerformedProcedureStepRetrieveSOPClass();
  public static readonly string UID_ModalityPerformedProcedureStepNotificationSOPClass = DCMTKPINVOKE.get_UID_ModalityPerformedProcedureStepNotificationSOPClass();
  public static readonly string UID_DetachedPatientManagementSOPClass = DCMTKPINVOKE.get_UID_DetachedPatientManagementSOPClass();
  public static readonly string UID_DetachedPatientManagementMetaSOPClass = DCMTKPINVOKE.get_UID_DetachedPatientManagementMetaSOPClass();
  public static readonly string UID_DetachedVisitManagementSOPClass = DCMTKPINVOKE.get_UID_DetachedVisitManagementSOPClass();
  public static readonly string UID_DetachedStudyManagementSOPClass = DCMTKPINVOKE.get_UID_DetachedStudyManagementSOPClass();
  public static readonly string UID_DetachedResultsManagementSOPClass = DCMTKPINVOKE.get_UID_DetachedResultsManagementSOPClass();
  public static readonly string UID_DetachedResultsManagementMetaSOPClass = DCMTKPINVOKE.get_UID_DetachedResultsManagementMetaSOPClass();
  public static readonly string UID_DetachedStudyManagementMetaSOPClass = DCMTKPINVOKE.get_UID_DetachedStudyManagementMetaSOPClass();
  public static readonly string UID_DetachedInterpretationManagementSOPClass = DCMTKPINVOKE.get_UID_DetachedInterpretationManagementSOPClass();
  public static readonly string UID_GeneralPurposeScheduledProcedureStepSOPClass = DCMTKPINVOKE.get_UID_GeneralPurposeScheduledProcedureStepSOPClass();
  public static readonly string UID_GeneralPurposePerformedProcedureStepSOPClass = DCMTKPINVOKE.get_UID_GeneralPurposePerformedProcedureStepSOPClass();
  public static readonly string UID_GeneralPurposeWorklistManagementMetaSOPClass = DCMTKPINVOKE.get_UID_GeneralPurposeWorklistManagementMetaSOPClass();
  public static readonly string UID_VerificationSOPClass = DCMTKPINVOKE.get_UID_VerificationSOPClass();
  public static readonly string UID_MediaStorageDirectoryStorage = DCMTKPINVOKE.get_UID_MediaStorageDirectoryStorage();
  public static readonly string UID_BasicStudyContentNotificationSOPClass = DCMTKPINVOKE.get_UID_BasicStudyContentNotificationSOPClass();
  public static readonly string UID_StudyComponentManagementSOPClass = DCMTKPINVOKE.get_UID_StudyComponentManagementSOPClass();
  public static readonly string UID_DICOMControlledTerminologyCodingScheme = DCMTKPINVOKE.get_UID_DICOMControlledTerminologyCodingScheme();
  public static readonly string UID_VideoEndoscopicImageStorage = DCMTKPINVOKE.get_UID_VideoEndoscopicImageStorage();
  public static readonly string UID_MicroscopicImageStorage = DCMTKPINVOKE.get_UID_MicroscopicImageStorage();
  public static readonly string UID_VideoPhotographicImageStorage = DCMTKPINVOKE.get_UID_VideoPhotographicImageStorage();
  public static readonly string UID_ProceduralEventLoggingSOPClass = DCMTKPINVOKE.get_UID_ProceduralEventLoggingSOPClass();
  public static readonly string UID_ProceduralEventLoggingSOPInstance = DCMTKPINVOKE.get_UID_ProceduralEventLoggingSOPInstance();
  public static readonly string UID_TalairachBrainAtlasFrameOfReference = DCMTKPINVOKE.get_UID_TalairachBrainAtlasFrameOfReference();
  public static readonly string UID_SPM2T1FrameOfReference = DCMTKPINVOKE.get_UID_SPM2T1FrameOfReference();
  public static readonly string UID_SPM2T2FrameOfReference = DCMTKPINVOKE.get_UID_SPM2T2FrameOfReference();
  public static readonly string UID_SPM2PDFrameOfReference = DCMTKPINVOKE.get_UID_SPM2PDFrameOfReference();
  public static readonly string UID_SPM2EPIFrameOfReference = DCMTKPINVOKE.get_UID_SPM2EPIFrameOfReference();
  public static readonly string UID_SPM2FILT1FrameOfReference = DCMTKPINVOKE.get_UID_SPM2FILT1FrameOfReference();
  public static readonly string UID_SPM2PETFrameOfReference = DCMTKPINVOKE.get_UID_SPM2PETFrameOfReference();
  public static readonly string UID_SPM2TRANSMFrameOfReference = DCMTKPINVOKE.get_UID_SPM2TRANSMFrameOfReference();
  public static readonly string UID_SPM2SPECTFrameOfReference = DCMTKPINVOKE.get_UID_SPM2SPECTFrameOfReference();
  public static readonly string UID_SPM2GRAYFrameOfReference = DCMTKPINVOKE.get_UID_SPM2GRAYFrameOfReference();
  public static readonly string UID_SPM2WHITEFrameOfReference = DCMTKPINVOKE.get_UID_SPM2WHITEFrameOfReference();
  public static readonly string UID_SPM2CSFFrameOfReference = DCMTKPINVOKE.get_UID_SPM2CSFFrameOfReference();
  public static readonly string UID_SPM2BRAINMASKFrameOfReference = DCMTKPINVOKE.get_UID_SPM2BRAINMASKFrameOfReference();
  public static readonly string UID_SPM2AVG305T1FrameOfReference = DCMTKPINVOKE.get_UID_SPM2AVG305T1FrameOfReference();
  public static readonly string UID_SPM2AVG152T1FrameOfReference = DCMTKPINVOKE.get_UID_SPM2AVG152T1FrameOfReference();
  public static readonly string UID_SPM2AVG152T2FrameOfReference = DCMTKPINVOKE.get_UID_SPM2AVG152T2FrameOfReference();
  public static readonly string UID_SPM2AVG152PDFrameOfReference = DCMTKPINVOKE.get_UID_SPM2AVG152PDFrameOfReference();
  public static readonly string UID_SPM2SINGLESUBJT1FrameOfReference = DCMTKPINVOKE.get_UID_SPM2SINGLESUBJT1FrameOfReference();
  public static readonly string UID_ICBM452T1FrameOfReference = DCMTKPINVOKE.get_UID_ICBM452T1FrameOfReference();
  public static readonly string UID_ICBMSingleSubjectMRIFrameOfReference = DCMTKPINVOKE.get_UID_ICBMSingleSubjectMRIFrameOfReference();
  public static readonly string UID_PrivateShutdownSOPClass = DCMTKPINVOKE.get_UID_PrivateShutdownSOPClass();
  public static readonly string UID_DRAFT_SRTextStorage = DCMTKPINVOKE.get_UID_DRAFT_SRTextStorage();
  public static readonly string UID_DRAFT_SRAudioStorage = DCMTKPINVOKE.get_UID_DRAFT_SRAudioStorage();
  public static readonly string UID_DRAFT_SRDetailStorage = DCMTKPINVOKE.get_UID_DRAFT_SRDetailStorage();
  public static readonly string UID_DRAFT_SRComprehensiveStorage = DCMTKPINVOKE.get_UID_DRAFT_SRComprehensiveStorage();
  public static readonly string UID_DRAFT_WaveformStorage = DCMTKPINVOKE.get_UID_DRAFT_WaveformStorage();
  public static readonly int DCMTAGKEY_H = DCMTKPINVOKE.get_DCMTAGKEY_H();
  public static readonly string DcmTag_ERROR_TagName = DCMTKPINVOKE.get_DcmTag_ERROR_TagName();
  public static readonly int DcmVariableVM = DCMTKPINVOKE.get_DcmVariableVM();
  public static readonly int DCM_MAXDICTLINESIZE = DCMTKPINVOKE.get_DCM_MAXDICTLINESIZE();
  public static readonly int DCM_MAXDICTFIELDS = DCMTKPINVOKE.get_DCM_MAXDICTFIELDS();
  public static readonly string DCM_DICT_ENVIRONMENT_VARIABLE = DCMTKPINVOKE.get_DCM_DICT_ENVIRONMENT_VARIABLE();
  public static readonly char ENVIRONMENT_PATH_SEPARATOR = DCMTKPINVOKE.get_ENVIRONMENT_PATH_SEPARATOR();
  public static readonly string DCM_DICT_DEFTAG_BUILD_DATE = DCMTKPINVOKE.get_DCM_DICT_DEFTAG_BUILD_DATE();
  public static readonly string DCM_Magic = DCMTKPINVOKE.get_DCM_Magic();
  public static readonly int DCM_MagicLen = DCMTKPINVOKE.get_DCM_MagicLen();
  public static readonly int DCM_PreambleLen = DCMTKPINVOKE.get_DCM_PreambleLen();
  public static readonly string DEFAULT_DICOMDIR_NAME = DCMTKPINVOKE.get_DEFAULT_DICOMDIR_NAME();
  public static readonly string TEMPNAME_TEMPLATE = DCMTKPINVOKE.get_TEMPNAME_TEMPLATE();
  public static readonly string DICOMDIR_BACKUP_SUFFIX = DCMTKPINVOKE.get_DICOMDIR_BACKUP_SUFFIX();
  public static readonly string DICOM_STDAPPLICATIONCONTEXT = DCMTKPINVOKE.get_DICOM_STDAPPLICATIONCONTEXT();
  public static readonly string DICOM_NET_IMPLEMENTATIONCLASSUID = DCMTKPINVOKE.get_DICOM_NET_IMPLEMENTATIONCLASSUID();
  public static readonly string DICOM_NET_IMPLEMENTATIONVERSIONNAME = DCMTKPINVOKE.get_DICOM_NET_IMPLEMENTATIONVERSIONNAME();
  public static readonly int DICOM_APPLICATION_ACCEPTOR = DCMTKPINVOKE.get_DICOM_APPLICATION_ACCEPTOR();
  public static readonly int DICOM_APPLICATION_REQUESTOR = DCMTKPINVOKE.get_DICOM_APPLICATION_REQUESTOR();
  public static readonly int DIC_UI_LEN = DCMTKPINVOKE.get_DIC_UI_LEN();
  public static readonly int DIC_AE_LEN = DCMTKPINVOKE.get_DIC_AE_LEN();
  public static readonly int DIC_SH_LEN = DCMTKPINVOKE.get_DIC_SH_LEN();
  public static readonly int DIC_PN_LEN = DCMTKPINVOKE.get_DIC_PN_LEN();
  public static readonly int DIC_LO_LEN = DCMTKPINVOKE.get_DIC_LO_LEN();
  public static readonly int DIC_CS_LEN = DCMTKPINVOKE.get_DIC_CS_LEN();
  public static readonly int DIC_DS_LEN = DCMTKPINVOKE.get_DIC_DS_LEN();
  public static readonly int DIC_IS_LEN = DCMTKPINVOKE.get_DIC_IS_LEN();
  public static readonly int DIC_NODENAME_LEN = DCMTKPINVOKE.get_DIC_NODENAME_LEN();
  public static readonly int DICOM_UI_LENGTH = DCMTKPINVOKE.get_DICOM_UI_LENGTH();
  public static readonly int ASC_DEFAULTMAXPDU = DCMTKPINVOKE.get_ASC_DEFAULTMAXPDU();
  public static readonly int ASC_MINIMUMPDUSIZE = DCMTKPINVOKE.get_ASC_MINIMUMPDUSIZE();
  public static readonly int ASC_MAXIMUMPDUSIZE = DCMTKPINVOKE.get_ASC_MAXIMUMPDUSIZE();
  public static readonly int DICOM_MAXTRANSFERSYNTAXES = DCMTKPINVOKE.get_DICOM_MAXTRANSFERSYNTAXES();
  public static readonly int STATUS_Success = DCMTKPINVOKE.get_STATUS_Success();
  public static readonly int STATUS_Pending = DCMTKPINVOKE.get_STATUS_Pending();
  public static readonly int STATUS_STORE_Refused_OutOfResources = DCMTKPINVOKE.get_STATUS_STORE_Refused_OutOfResources();
  public static readonly int STATUS_STORE_Refused_SOPClassNotSupported = DCMTKPINVOKE.get_STATUS_STORE_Refused_SOPClassNotSupported();
  public static readonly int STATUS_STORE_Error_DataSetDoesNotMatchSOPClass = DCMTKPINVOKE.get_STATUS_STORE_Error_DataSetDoesNotMatchSOPClass();
  public static readonly int STATUS_STORE_Error_CannotUnderstand = DCMTKPINVOKE.get_STATUS_STORE_Error_CannotUnderstand();
  public static readonly int STATUS_STORE_Warning_CoersionOfDataElements = DCMTKPINVOKE.get_STATUS_STORE_Warning_CoersionOfDataElements();
  public static readonly int STATUS_STORE_Warning_DataSetDoesNotMatchSOPClass = DCMTKPINVOKE.get_STATUS_STORE_Warning_DataSetDoesNotMatchSOPClass();
  public static readonly int STATUS_STORE_Warning_ElementsDiscarded = DCMTKPINVOKE.get_STATUS_STORE_Warning_ElementsDiscarded();
  public static readonly int STATUS_FIND_Refused_OutOfResources = DCMTKPINVOKE.get_STATUS_FIND_Refused_OutOfResources();
  public static readonly int STATUS_FIND_Refused_SOPClassNotSupported = DCMTKPINVOKE.get_STATUS_FIND_Refused_SOPClassNotSupported();
  public static readonly int STATUS_FIND_Failed_IdentifierDoesNotMatchSOPClass = DCMTKPINVOKE.get_STATUS_FIND_Failed_IdentifierDoesNotMatchSOPClass();
  public static readonly int STATUS_FIND_Failed_UnableToProcess = DCMTKPINVOKE.get_STATUS_FIND_Failed_UnableToProcess();
  public static readonly int STATUS_FIND_Cancel_MatchingTerminatedDueToCancelRequest = DCMTKPINVOKE.get_STATUS_FIND_Cancel_MatchingTerminatedDueToCancelRequest();
  public static readonly int STATUS_FIND_Pending_WarningUnsupportedOptionalKeys = DCMTKPINVOKE.get_STATUS_FIND_Pending_WarningUnsupportedOptionalKeys();
  public static readonly int STATUS_MOVE_Refused_OutOfResourcesNumberOfMatches = DCMTKPINVOKE.get_STATUS_MOVE_Refused_OutOfResourcesNumberOfMatches();
  public static readonly int STATUS_MOVE_Refused_OutOfResourcesSubOperations = DCMTKPINVOKE.get_STATUS_MOVE_Refused_OutOfResourcesSubOperations();
  public static readonly int STATUS_MOVE_Failed_SOPClassNotSupported = DCMTKPINVOKE.get_STATUS_MOVE_Failed_SOPClassNotSupported();
  public static readonly int STATUS_MOVE_Failed_MoveDestinationUnknown = DCMTKPINVOKE.get_STATUS_MOVE_Failed_MoveDestinationUnknown();
  public static readonly int STATUS_MOVE_Failed_IdentifierDoesNotMatchSOPClass = DCMTKPINVOKE.get_STATUS_MOVE_Failed_IdentifierDoesNotMatchSOPClass();
  public static readonly int STATUS_MOVE_Failed_UnableToProcess = DCMTKPINVOKE.get_STATUS_MOVE_Failed_UnableToProcess();
  public static readonly int STATUS_MOVE_Cancel_SubOperationsTerminatedDueToCancelIndication = DCMTKPINVOKE.get_STATUS_MOVE_Cancel_SubOperationsTerminatedDueToCancelIndication();
  public static readonly int STATUS_MOVE_Warning_SubOperationsCompleteOneOrMoreFailures = DCMTKPINVOKE.get_STATUS_MOVE_Warning_SubOperationsCompleteOneOrMoreFailures();
  public static readonly int STATUS_GET_Refused_OutOfResourcesNumberOfMatches = DCMTKPINVOKE.get_STATUS_GET_Refused_OutOfResourcesNumberOfMatches();
  public static readonly int STATUS_GET_Refused_OutOfResourcesSubOperations = DCMTKPINVOKE.get_STATUS_GET_Refused_OutOfResourcesSubOperations();
  public static readonly int STATUS_GET_Failed_SOPClassNotSupported = DCMTKPINVOKE.get_STATUS_GET_Failed_SOPClassNotSupported();
  public static readonly int STATUS_GET_Failed_IdentifierDoesNotMatchSOPClass = DCMTKPINVOKE.get_STATUS_GET_Failed_IdentifierDoesNotMatchSOPClass();
  public static readonly int STATUS_GET_Failed_UnableToProcess = DCMTKPINVOKE.get_STATUS_GET_Failed_UnableToProcess();
  public static readonly int STATUS_GET_Cancel_SubOperationsTerminatedDueToCancelIndication = DCMTKPINVOKE.get_STATUS_GET_Cancel_SubOperationsTerminatedDueToCancelIndication();
  public static readonly int STATUS_GET_Warning_SubOperationsCompleteOneOrMoreFailures = DCMTKPINVOKE.get_STATUS_GET_Warning_SubOperationsCompleteOneOrMoreFailures();
  public static readonly int STATUS_N_Cancel = DCMTKPINVOKE.get_STATUS_N_Cancel();
  public static readonly int STATUS_N_AttributeListError = DCMTKPINVOKE.get_STATUS_N_AttributeListError();
  public static readonly int STATUS_N_SOPClassNotSupported = DCMTKPINVOKE.get_STATUS_N_SOPClassNotSupported();
  public static readonly int STATUS_N_ClassInstanceConflict = DCMTKPINVOKE.get_STATUS_N_ClassInstanceConflict();
  public static readonly int STATUS_N_DuplicateSOPInstance = DCMTKPINVOKE.get_STATUS_N_DuplicateSOPInstance();
  public static readonly int STATUS_N_DuplicateInvocation = DCMTKPINVOKE.get_STATUS_N_DuplicateInvocation();
  public static readonly int STATUS_N_InvalidArgumentValue = DCMTKPINVOKE.get_STATUS_N_InvalidArgumentValue();
  public static readonly int STATUS_N_InvalidAttributeValue = DCMTKPINVOKE.get_STATUS_N_InvalidAttributeValue();
  public static readonly int STATUS_N_InvalidObjectInstance = DCMTKPINVOKE.get_STATUS_N_InvalidObjectInstance();
  public static readonly int STATUS_N_MissingAttribute = DCMTKPINVOKE.get_STATUS_N_MissingAttribute();
  public static readonly int STATUS_N_MissingAttributeValue = DCMTKPINVOKE.get_STATUS_N_MissingAttributeValue();
  public static readonly int STATUS_N_MistypedArgument = DCMTKPINVOKE.get_STATUS_N_MistypedArgument();
  public static readonly int STATUS_N_NoSuchArgument = DCMTKPINVOKE.get_STATUS_N_NoSuchArgument();
  public static readonly int STATUS_N_NoSuchAttribute = DCMTKPINVOKE.get_STATUS_N_NoSuchAttribute();
  public static readonly int STATUS_N_NoSuchEventType = DCMTKPINVOKE.get_STATUS_N_NoSuchEventType();
  public static readonly int STATUS_N_NoSuchObjectInstance = DCMTKPINVOKE.get_STATUS_N_NoSuchObjectInstance();
  public static readonly int STATUS_N_NoSuchSOPClass = DCMTKPINVOKE.get_STATUS_N_NoSuchSOPClass();
  public static readonly int STATUS_N_ProcessingFailure = DCMTKPINVOKE.get_STATUS_N_ProcessingFailure();
  public static readonly int STATUS_N_ResourceLimitation = DCMTKPINVOKE.get_STATUS_N_ResourceLimitation();
  public static readonly int STATUS_N_UnrecognizedOperation = DCMTKPINVOKE.get_STATUS_N_UnrecognizedOperation();
  public static readonly int STATUS_N_PRINT_BFS_Warn_MemoryAllocation = DCMTKPINVOKE.get_STATUS_N_PRINT_BFS_Warn_MemoryAllocation();
  public static readonly int STATUS_N_PRINT_BFS_Warn_NoSessionPrinting = DCMTKPINVOKE.get_STATUS_N_PRINT_BFS_Warn_NoSessionPrinting();
  public static readonly int STATUS_N_PRINT_BFS_Warn_EmptyPage = DCMTKPINVOKE.get_STATUS_N_PRINT_BFS_Warn_EmptyPage();
  public static readonly int STATUS_N_PRINT_BFB_Warn_EmptyPage = DCMTKPINVOKE.get_STATUS_N_PRINT_BFB_Warn_EmptyPage();
  public static readonly int STATUS_N_PRINT_BFS_Fail_NoFilmBox = DCMTKPINVOKE.get_STATUS_N_PRINT_BFS_Fail_NoFilmBox();
  public static readonly int STATUS_N_PRINT_BFS_Fail_PrintQueueFull = DCMTKPINVOKE.get_STATUS_N_PRINT_BFS_Fail_PrintQueueFull();
  public static readonly int STATUS_N_PRINT_BSB_Fail_PrintQueueFull = DCMTKPINVOKE.get_STATUS_N_PRINT_BSB_Fail_PrintQueueFull();
  public static readonly int STATUS_N_PRINT_BFS_BFB_Fail_ImageSize = DCMTKPINVOKE.get_STATUS_N_PRINT_BFS_BFB_Fail_ImageSize();
  public static readonly int STATUS_N_PRINT_BFS_BFB_Fail_PositionCollision = DCMTKPINVOKE.get_STATUS_N_PRINT_BFS_BFB_Fail_PositionCollision();
  public static readonly int STATUS_N_PRINT_IB_Fail_InsufficientMemory = DCMTKPINVOKE.get_STATUS_N_PRINT_IB_Fail_InsufficientMemory();
  public static readonly int STATUS_N_PRINT_IB_Fail_MoreThanOneVOILUT = DCMTKPINVOKE.get_STATUS_N_PRINT_IB_Fail_MoreThanOneVOILUT();
  public static readonly int O_STORE_MOVEORIGINATORAETITLE = DCMTKPINVOKE.get_O_STORE_MOVEORIGINATORAETITLE();
  public static readonly int O_STORE_MOVEORIGINATORID = DCMTKPINVOKE.get_O_STORE_MOVEORIGINATORID();
  public static readonly int O_STORE_RQ_BLANK_PADDING = DCMTKPINVOKE.get_O_STORE_RQ_BLANK_PADDING();
  public static readonly int O_STORE_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_STORE_AFFECTEDSOPCLASSUID();
  public static readonly int O_STORE_AFFECTEDSOPINSTANCEUID = DCMTKPINVOKE.get_O_STORE_AFFECTEDSOPINSTANCEUID();
  public static readonly int O_STORE_PEER_REQUIRES_EXACT_UID_COPY = DCMTKPINVOKE.get_O_STORE_PEER_REQUIRES_EXACT_UID_COPY();
  public static readonly int O_STORE_RSP_BLANK_PADDING = DCMTKPINVOKE.get_O_STORE_RSP_BLANK_PADDING();
  public static readonly int O_ECHO_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_ECHO_AFFECTEDSOPCLASSUID();
  public static readonly int O_FIND_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_FIND_AFFECTEDSOPCLASSUID();
  public static readonly int O_GET_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_GET_AFFECTEDSOPCLASSUID();
  public static readonly int O_GET_NUMBEROFREMAININGSUBOPERATIONS = DCMTKPINVOKE.get_O_GET_NUMBEROFREMAININGSUBOPERATIONS();
  public static readonly int O_GET_NUMBEROFCOMPLETEDSUBOPERATIONS = DCMTKPINVOKE.get_O_GET_NUMBEROFCOMPLETEDSUBOPERATIONS();
  public static readonly int O_GET_NUMBEROFFAILEDSUBOPERATIONS = DCMTKPINVOKE.get_O_GET_NUMBEROFFAILEDSUBOPERATIONS();
  public static readonly int O_GET_NUMBEROFWARNINGSUBOPERATIONS = DCMTKPINVOKE.get_O_GET_NUMBEROFWARNINGSUBOPERATIONS();
  public static readonly int O_MOVE_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_MOVE_AFFECTEDSOPCLASSUID();
  public static readonly int O_MOVE_NUMBEROFREMAININGSUBOPERATIONS = DCMTKPINVOKE.get_O_MOVE_NUMBEROFREMAININGSUBOPERATIONS();
  public static readonly int O_MOVE_NUMBEROFCOMPLETEDSUBOPERATIONS = DCMTKPINVOKE.get_O_MOVE_NUMBEROFCOMPLETEDSUBOPERATIONS();
  public static readonly int O_MOVE_NUMBEROFFAILEDSUBOPERATIONS = DCMTKPINVOKE.get_O_MOVE_NUMBEROFFAILEDSUBOPERATIONS();
  public static readonly int O_MOVE_NUMBEROFWARNINGSUBOPERATIONS = DCMTKPINVOKE.get_O_MOVE_NUMBEROFWARNINGSUBOPERATIONS();
  public static readonly int O_NEVENTREPORT_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_NEVENTREPORT_AFFECTEDSOPCLASSUID();
  public static readonly int O_NEVENTREPORT_AFFECTEDSOPINSTANCEUID = DCMTKPINVOKE.get_O_NEVENTREPORT_AFFECTEDSOPINSTANCEUID();
  public static readonly int O_NEVENTREPORT_EVENTTYPEID = DCMTKPINVOKE.get_O_NEVENTREPORT_EVENTTYPEID();
  public static readonly int O_NGET_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_NGET_AFFECTEDSOPCLASSUID();
  public static readonly int O_NGET_AFFECTEDSOPINSTANCEUID = DCMTKPINVOKE.get_O_NGET_AFFECTEDSOPINSTANCEUID();
  public static readonly int O_NSET_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_NSET_AFFECTEDSOPCLASSUID();
  public static readonly int O_NSET_AFFECTEDSOPINSTANCEUID = DCMTKPINVOKE.get_O_NSET_AFFECTEDSOPINSTANCEUID();
  public static readonly int O_NACTION_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_NACTION_AFFECTEDSOPCLASSUID();
  public static readonly int O_NACTION_AFFECTEDSOPINSTANCEUID = DCMTKPINVOKE.get_O_NACTION_AFFECTEDSOPINSTANCEUID();
  public static readonly int O_NACTION_ACTIONTYPEID = DCMTKPINVOKE.get_O_NACTION_ACTIONTYPEID();
  public static readonly int O_NCREATE_AFFECTEDSOPINSTANCEUID = DCMTKPINVOKE.get_O_NCREATE_AFFECTEDSOPINSTANCEUID();
  public static readonly int O_NCREATE_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_NCREATE_AFFECTEDSOPCLASSUID();
  public static readonly int O_NDELETE_AFFECTEDSOPCLASSUID = DCMTKPINVOKE.get_O_NDELETE_AFFECTEDSOPCLASSUID();
  public static readonly int O_NDELETE_AFFECTEDSOPINSTANCEUID = DCMTKPINVOKE.get_O_NDELETE_AFFECTEDSOPINSTANCEUID();
}

}
