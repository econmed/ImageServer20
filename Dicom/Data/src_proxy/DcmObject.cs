/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class DcmObject : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DcmObject(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DcmObject obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DcmObject() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmObject(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public virtual DcmEVR ident() {
    DcmEVR ret = (DcmEVR)DCMTKPINVOKE.DcmObject_ident(swigCPtr);
    return ret;
  }

  public DcmEVR getVR() {
    DcmEVR ret = (DcmEVR)DCMTKPINVOKE.DcmObject_getVR(swigCPtr);
    return ret;
  }

  public bool isaString() {
    bool ret = DCMTKPINVOKE.DcmObject_isaString(swigCPtr);
    return ret;
  }

  public virtual bool isLeaf() {
    bool ret = DCMTKPINVOKE.DcmObject_isLeaf(swigCPtr);
    return ret;
  }

  public virtual void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName, SWIGTYPE_p_size_t pixelCounter) {
    DCMTKPINVOKE.DcmObject_print__SWIG_0(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName, SWIGTYPE_p_size_t.getCPtr(pixelCounter));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName) {
    DCMTKPINVOKE.DcmObject_print__SWIG_1(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void print(SWIGTYPE_p_ostream outStream, uint flags, int level) {
    DCMTKPINVOKE.DcmObject_print__SWIG_2(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void print(SWIGTYPE_p_ostream outStream, uint flags) {
    DCMTKPINVOKE.DcmObject_print__SWIG_3(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void print(SWIGTYPE_p_ostream outStream) {
    DCMTKPINVOKE.DcmObject_print__SWIG_4(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public OFCondition error() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_error(swigCPtr), true);
    return ret;
  }

  public E_TransferState transferState() {
    E_TransferState ret = (E_TransferState)DCMTKPINVOKE.DcmObject_transferState(swigCPtr);
    return ret;
  }

  public virtual void transferInit() {
    DCMTKPINVOKE.DcmObject_transferInit(swigCPtr);
  }

  public virtual void transferEnd() {
    DCMTKPINVOKE.DcmObject_transferEnd(swigCPtr);
  }

  public ushort getGTag() {
    ushort ret = DCMTKPINVOKE.DcmObject_getGTag(swigCPtr);
    return ret;
  }

  public ushort getETag() {
    ushort ret = DCMTKPINVOKE.DcmObject_getETag(swigCPtr);
    return ret;
  }

  public DcmTag getTag() {
    DcmTag ret = new DcmTag(DCMTKPINVOKE.DcmObject_getTag(swigCPtr), false);
    return ret;
  }

  public void setGTag(ushort gtag) {
    DCMTKPINVOKE.DcmObject_setGTag(swigCPtr, gtag);
  }

  public virtual OFCondition setVR(DcmEVR arg0) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_setVR(swigCPtr, (int)arg0), true);
    return ret;
  }

  public virtual uint getVM() {
    uint ret = DCMTKPINVOKE.DcmObject_getVM(swigCPtr);
    return ret;
  }

  public virtual uint calcElementLength(E_TransferSyntax xfer, E_EncodingType enctype) {
    uint ret = DCMTKPINVOKE.DcmObject_calcElementLength(swigCPtr, (int)xfer, (int)enctype);
    return ret;
  }

  public virtual uint getLength(E_TransferSyntax xfer, E_EncodingType enctype) {
    uint ret = DCMTKPINVOKE.DcmObject_getLength__SWIG_0(swigCPtr, (int)xfer, (int)enctype);
    return ret;
  }

  public virtual uint getLength(E_TransferSyntax xfer) {
    uint ret = DCMTKPINVOKE.DcmObject_getLength__SWIG_1(swigCPtr, (int)xfer);
    return ret;
  }

  public virtual uint getLength() {
    uint ret = DCMTKPINVOKE.DcmObject_getLength__SWIG_2(swigCPtr);
    return ret;
  }

  public virtual bool canWriteXfer(E_TransferSyntax newXfer, E_TransferSyntax oldXfer) {
    bool ret = DCMTKPINVOKE.DcmObject_canWriteXfer(swigCPtr, (int)newXfer, (int)oldXfer);
    return ret;
  }

  public virtual OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer, E_GrpLenEncoding glenc, uint maxReadLength) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_read__SWIG_0(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer, (int)glenc, maxReadLength), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer, E_GrpLenEncoding glenc) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_read__SWIG_1(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer, (int)glenc), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_read__SWIG_2(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition write(DcmOutputStream outStream, E_TransferSyntax oxfer, E_EncodingType enctype) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_write__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer, (int)enctype), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition write(DcmOutputStream outStream, E_TransferSyntax oxfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_write__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition writeXML(SWIGTYPE_p_ostream outStream, uint flags) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_writeXML__SWIG_0(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition writeXML(SWIGTYPE_p_ostream outStream) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_writeXML__SWIG_1(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax oxfer, E_EncodingType enctype) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_writeSignatureFormat__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer, (int)enctype), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax oxfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_writeSignatureFormat__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isSignable() {
    bool ret = DCMTKPINVOKE.DcmObject_isSignable(swigCPtr);
    return ret;
  }

  public virtual bool containsUnknownVR() {
    bool ret = DCMTKPINVOKE.DcmObject_containsUnknownVR(swigCPtr);
    return ret;
  }

  public virtual OFCondition clear() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_clear(swigCPtr), true);
    return ret;
  }

  public virtual OFCondition verify(bool autocorrect) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_verify__SWIG_0(swigCPtr, autocorrect), true);
    return ret;
  }

  public virtual OFCondition verify() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_verify__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual DcmObject nextInContainer(DcmObject obj) {
    IntPtr cPtr = DCMTKPINVOKE.DcmObject_nextInContainer(swigCPtr, DcmObject.getCPtr(obj));
    DcmObject ret = (cPtr == IntPtr.Zero) ? null : new DcmObject(cPtr, false);
    return ret;
  }

  public virtual OFCondition nextObject(SWIGTYPE_p_DcmStack stack, bool intoSub) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_nextObject(swigCPtr, SWIGTYPE_p_DcmStack.getCPtr(stack), intoSub), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition search(DcmTagKey xtag, SWIGTYPE_p_DcmStack resultStack, E_SearchMode mode, bool searchIntoSub) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_search__SWIG_0(swigCPtr, DcmTagKey.getCPtr(xtag), SWIGTYPE_p_DcmStack.getCPtr(resultStack), (int)mode, searchIntoSub), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition search(DcmTagKey xtag, SWIGTYPE_p_DcmStack resultStack, E_SearchMode mode) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_search__SWIG_1(swigCPtr, DcmTagKey.getCPtr(xtag), SWIGTYPE_p_DcmStack.getCPtr(resultStack), (int)mode), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition search(DcmTagKey xtag, SWIGTYPE_p_DcmStack resultStack) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_search__SWIG_2(swigCPtr, DcmTagKey.getCPtr(xtag), SWIGTYPE_p_DcmStack.getCPtr(resultStack)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition searchErrors(SWIGTYPE_p_DcmStack resultStack) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_searchErrors(swigCPtr, SWIGTYPE_p_DcmStack.getCPtr(resultStack)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition loadAllDataIntoMemory() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmObject_loadAllDataIntoMemory(swigCPtr), true);
    return ret;
  }

}

}
