/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class DcmDictEntry : DcmTagKey {
  private HandleRef swigCPtr;

  internal DcmDictEntry(IntPtr cPtr, bool cMemoryOwn) : base(DCMTKPINVOKE.DcmDictEntryUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DcmDictEntry obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DcmDictEntry() {
    Dispose();
  }

  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmDictEntry(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  public DcmDictEntry(ushort g, ushort e, DcmVR vr, string nam, int vmMin, int vmMax, string vers, bool doCopyStrings, string pcreator) : this(DCMTKPINVOKE.new_DcmDictEntry__SWIG_0(g, e, DcmVR.getCPtr(vr), nam, vmMin, vmMax, vers, doCopyStrings, pcreator), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmDictEntry(ushort g, ushort e, ushort ug, ushort ue, DcmVR vr, string nam, int vmMin, int vmMax, string vers, bool doCopyStrings, string pcreator) : this(DCMTKPINVOKE.new_DcmDictEntry__SWIG_1(g, e, ug, ue, DcmVR.getCPtr(vr), nam, vmMin, vmMax, vers, doCopyStrings, pcreator), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmDictEntry(DcmDictEntry e) : this(DCMTKPINVOKE.new_DcmDictEntry__SWIG_2(DcmDictEntry.getCPtr(e)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmVR getVR() {
    DcmVR ret = new DcmVR(DCMTKPINVOKE.DcmDictEntry_getVR(swigCPtr), true);
    return ret;
  }

  public DcmEVR getEVR() {
    DcmEVR ret = (DcmEVR)DCMTKPINVOKE.DcmDictEntry_getEVR(swigCPtr);
    return ret;
  }

  public string getStandardVersion() {
    string ret = DCMTKPINVOKE.DcmDictEntry_getStandardVersion(swigCPtr);
    return ret;
  }

  public string getTagName() {
    string ret = DCMTKPINVOKE.DcmDictEntry_getTagName(swigCPtr);
    return ret;
  }

  public string getPrivateCreator() {
    string ret = DCMTKPINVOKE.DcmDictEntry_getPrivateCreator(swigCPtr);
    return ret;
  }

  public int privateCreatorMatch(string c) {
    int ret = DCMTKPINVOKE.DcmDictEntry_privateCreatorMatch__SWIG_0(swigCPtr, c);
    return ret;
  }

  public int privateCreatorMatch(DcmDictEntry arg) {
    int ret = DCMTKPINVOKE.DcmDictEntry_privateCreatorMatch__SWIG_1(swigCPtr, DcmDictEntry.getCPtr(arg));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getVMMin() {
    int ret = DCMTKPINVOKE.DcmDictEntry_getVMMin(swigCPtr);
    return ret;
  }

  public int getVMMax() {
    int ret = DCMTKPINVOKE.DcmDictEntry_getVMMax(swigCPtr);
    return ret;
  }

  public bool isFixedSingleVM() {
    bool ret = DCMTKPINVOKE.DcmDictEntry_isFixedSingleVM(swigCPtr);
    return ret;
  }

  public bool isFixedRangeVM() {
    bool ret = DCMTKPINVOKE.DcmDictEntry_isFixedRangeVM(swigCPtr);
    return ret;
  }

  public bool isVariableRangeVM() {
    bool ret = DCMTKPINVOKE.DcmDictEntry_isVariableRangeVM(swigCPtr);
    return ret;
  }

  public void setUpper(DcmTagKey key) {
    DCMTKPINVOKE.DcmDictEntry_setUpper(swigCPtr, DcmTagKey.getCPtr(key));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setUpperGroup(ushort ug) {
    DCMTKPINVOKE.DcmDictEntry_setUpperGroup(swigCPtr, ug);
  }

  public void setUpperElement(ushort ue) {
    DCMTKPINVOKE.DcmDictEntry_setUpperElement(swigCPtr, ue);
  }

  public ushort getUpperGroup() {
    ushort ret = DCMTKPINVOKE.DcmDictEntry_getUpperGroup(swigCPtr);
    return ret;
  }

  public ushort getUpperElement() {
    ushort ret = DCMTKPINVOKE.DcmDictEntry_getUpperElement(swigCPtr);
    return ret;
  }

  public DcmTagKey getKey() {
    DcmTagKey ret = new DcmTagKey(DCMTKPINVOKE.DcmDictEntry_getKey(swigCPtr), true);
    return ret;
  }

  public DcmTagKey getUpperKey() {
    DcmTagKey ret = new DcmTagKey(DCMTKPINVOKE.DcmDictEntry_getUpperKey(swigCPtr), true);
    return ret;
  }

  public int isRepeatingGroup() {
    int ret = DCMTKPINVOKE.DcmDictEntry_isRepeatingGroup(swigCPtr);
    return ret;
  }

  public int isRepeatingElement() {
    int ret = DCMTKPINVOKE.DcmDictEntry_isRepeatingElement(swigCPtr);
    return ret;
  }

  public int isRepeating() {
    int ret = DCMTKPINVOKE.DcmDictEntry_isRepeating(swigCPtr);
    return ret;
  }

  public DcmDictRangeRestriction getGroupRangeRestriction() {
    DcmDictRangeRestriction ret = (DcmDictRangeRestriction)DCMTKPINVOKE.DcmDictEntry_getGroupRangeRestriction(swigCPtr);
    return ret;
  }

  public void setGroupRangeRestriction(DcmDictRangeRestriction rr) {
    DCMTKPINVOKE.DcmDictEntry_setGroupRangeRestriction(swigCPtr, (int)rr);
  }

  public DcmDictRangeRestriction getElementRangeRestriction() {
    DcmDictRangeRestriction ret = (DcmDictRangeRestriction)DCMTKPINVOKE.DcmDictEntry_getElementRangeRestriction(swigCPtr);
    return ret;
  }

  public void setElementRangeRestriction(DcmDictRangeRestriction rr) {
    DCMTKPINVOKE.DcmDictEntry_setElementRangeRestriction(swigCPtr, (int)rr);
  }

  public int contains(DcmTagKey key, string privCreator) {
    int ret = DCMTKPINVOKE.DcmDictEntry_contains__SWIG_0(swigCPtr, DcmTagKey.getCPtr(key), privCreator);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int contains(string name) {
    int ret = DCMTKPINVOKE.DcmDictEntry_contains__SWIG_1(swigCPtr, name);
    return ret;
  }

  public int subset(DcmDictEntry e) {
    int ret = DCMTKPINVOKE.DcmDictEntry_subset(swigCPtr, DcmDictEntry.getCPtr(e));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int setEQ(DcmDictEntry e) {
    int ret = DCMTKPINVOKE.DcmDictEntry_setEQ(swigCPtr, DcmDictEntry.getCPtr(e));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
