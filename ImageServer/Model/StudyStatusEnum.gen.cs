#region License

// Copyright (c) 2006-2008, ClearCanvas Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, 
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, 
//      this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of ClearCanvas Inc. nor the names of its contributors 
//      may be used to endorse or promote products derived from this software without 
//      specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
// OF SUCH DAMAGE.

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Collections.Generic;
    using ClearCanvas.ImageServer.Enterprise;
    using System.Reflection;

  public enum StudyStatusEnum
  {
      [EnumValueDescriptionAttribute("Online", "Study is online")]
      Online = 100,

      [EnumValueDescriptionAttribute("Online (Lossless)", "Study is online and lossless compressed")]
      OnlineLossless = 101,

      [EnumValueDescriptionAttribute("Online (Lossy)", "Study is online and lossy compressed")]
      OnlineLossy = 102,

      [EnumValueDescriptionAttribute("Pending", "Pending")]
      Pending = 200
  }

  public static class StudyStatusEnumHelper
  {
      public static IList<StudyStatusEnum> GetAll()
      {
          List<StudyStatusEnum> values = new List<StudyStatusEnum>();
          Array array = Enum.GetValues(typeof (StudyStatusEnum));
          
          foreach(StudyStatusEnum value in array)
          {
              values.Add(value);
          }
          return values;
      }
      public static StudyStatusEnum Get(string lookup)
      {
          return (StudyStatusEnum) Enum.Parse(typeof (StudyStatusEnum), lookup);
      }
      public static bool IsDefined(string lookup)
      {
          return Enum.IsDefined(typeof (StudyStatusEnum), lookup);
      }
      public static string GetDescription(StudyStatusEnum value)
      {
          FieldInfo enumField = value.GetType().GetField(value.ToString());
          object[] attributes = enumField.GetCustomAttributes(typeof (EnumValueDescriptionAttribute), false);
          if (attributes!=null && attributes.Length>0)
          {
              return ((EnumValueDescriptionAttribute)attributes[0]).Description;
          }
          else
              return null;
      }
      public static string GetLongDescription(StudyStatusEnum value)
      {
          FieldInfo enumField = value.GetType().GetField(value.ToString());
          object[] attributes = enumField.GetCustomAttributes(typeof (EnumValueDescriptionAttribute), false);
          if (attributes!=null && attributes.Length>0)
          {
              return ((EnumValueDescriptionAttribute)attributes[0]).LongDescription;
          }
          else
              return null;
      }
  }
}
