#region License

// Copyright (c) 2009, ClearCanvas Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, 
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, 
//      this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of ClearCanvas Inc. nor the names of its contributors 
//      may be used to endorse or promote products derived from this software without 
//      specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
// OF SUCH DAMAGE.

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class Device: ServerEntity
    {
        #region Constructors
        public Device():base("Device")
        {}
        public Device(
             Boolean _dhcp_
            ,Boolean _enabled_
            ,Boolean _allowStorage_
            ,Boolean _acceptKOPR_
            ,Boolean _allowRetrieve_
            ,Boolean _allowQuery_
            ,Boolean _allowAutoRoute_
            ,Int16 _throttleMaxConnections_
            ,DateTime _lastAccessedTime_
            ,DeviceTypeEnum _deviceTypeEnum_
            ,ServerEntityKey _serverPartitionKey_
            ,String _aeTitle_
            ,Int32 _port_
            ,String _description_
            ,String _ipAddress_
            ):base("Device")
        {
            Dhcp = _dhcp_;
            Enabled = _enabled_;
            AllowStorage = _allowStorage_;
            AcceptKOPR = _acceptKOPR_;
            AllowRetrieve = _allowRetrieve_;
            AllowQuery = _allowQuery_;
            AllowAutoRoute = _allowAutoRoute_;
            ThrottleMaxConnections = _throttleMaxConnections_;
            LastAccessedTime = _lastAccessedTime_;
            DeviceTypeEnum = _deviceTypeEnum_;
            ServerPartitionKey = _serverPartitionKey_;
            AeTitle = _aeTitle_;
            Port = _port_;
            Description = _description_;
            IpAddress = _ipAddress_;
        }
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="Dhcp")]
        public Boolean Dhcp
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="Enabled")]
        public Boolean Enabled
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="AllowStorage")]
        public Boolean AllowStorage
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="AcceptKOPR")]
        public Boolean AcceptKOPR
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="AllowRetrieve")]
        public Boolean AllowRetrieve
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="AllowQuery")]
        public Boolean AllowQuery
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="AllowAutoRoute")]
        public Boolean AllowAutoRoute
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="ThrottleMaxConnections")]
        public Int16 ThrottleMaxConnections
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="LastAccessedTime")]
        public DateTime LastAccessedTime
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="DeviceTypeEnum")]
        public DeviceTypeEnum DeviceTypeEnum
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="ServerPartitionGUID")]
        public ServerEntityKey ServerPartitionKey
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="AeTitle")]
        public String AeTitle
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="Port")]
        public Int32 Port
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="Description")]
        public String Description
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Device", ColumnName="IpAddress")]
        public String IpAddress
        { get; set; }
        #endregion

        #region Static Methods
        static public Device Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public Device Load(IPersistenceContext read, ServerEntityKey key)
        {
            IDeviceEntityBroker broker = read.GetBroker<IDeviceEntityBroker>();
            Device theObject = broker.Load(key);
            return theObject;
        }
        static public Device Insert(Device entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                Device newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public Device Insert(IUpdateContext update, Device entity)
        {
            IDeviceEntityBroker broker = update.GetBroker<IDeviceEntityBroker>();
            DeviceUpdateColumns updateColumns = new DeviceUpdateColumns();
            updateColumns.Dhcp = entity.Dhcp;
            updateColumns.Enabled = entity.Enabled;
            updateColumns.AllowStorage = entity.AllowStorage;
            updateColumns.AcceptKOPR = entity.AcceptKOPR;
            updateColumns.AllowRetrieve = entity.AllowRetrieve;
            updateColumns.AllowQuery = entity.AllowQuery;
            updateColumns.AllowAutoRoute = entity.AllowAutoRoute;
            updateColumns.ThrottleMaxConnections = entity.ThrottleMaxConnections;
            updateColumns.LastAccessedTime = entity.LastAccessedTime;
            updateColumns.DeviceTypeEnum = entity.DeviceTypeEnum;
            updateColumns.ServerPartitionKey = entity.ServerPartitionKey;
            updateColumns.AeTitle = entity.AeTitle;
            updateColumns.Port = entity.Port;
            updateColumns.Description = entity.Description;
            updateColumns.IpAddress = entity.IpAddress;
            Device newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
