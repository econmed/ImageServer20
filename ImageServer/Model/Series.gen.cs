#region License

// Copyright (c) 2009, ClearCanvas Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, 
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, 
//      this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of ClearCanvas Inc. nor the names of its contributors 
//      may be used to endorse or promote products derived from this software without 
//      specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
// OF SUCH DAMAGE.

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Dicom;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class Series: ServerEntity
    {
        #region Constructors
        public Series():base("Series")
        {}
        public Series(
             ServerEntityKey _serverPartitionKey_
            ,ServerEntityKey _studyKey_
            ,String _seriesInstanceUid_
            ,String _modality_
            ,Int32 _numberOfSeriesRelatedInstances_
            ,String _performedProcedureStepStartDate_
            ,String _performedProcedureStepStartTime_
            ,String _sourceApplicationEntityTitle_
            ,String _seriesNumber_
            ,String _seriesDescription_
            ):base("Series")
        {
            ServerPartitionKey = _serverPartitionKey_;
            StudyKey = _studyKey_;
            SeriesInstanceUid = _seriesInstanceUid_;
            Modality = _modality_;
            NumberOfSeriesRelatedInstances = _numberOfSeriesRelatedInstances_;
            PerformedProcedureStepStartDate = _performedProcedureStepStartDate_;
            PerformedProcedureStepStartTime = _performedProcedureStepStartTime_;
            SourceApplicationEntityTitle = _sourceApplicationEntityTitle_;
            SeriesNumber = _seriesNumber_;
            SeriesDescription = _seriesDescription_;
        }
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="ServerPartitionGUID")]
        public ServerEntityKey ServerPartitionKey
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="StudyGUID")]
        public ServerEntityKey StudyKey
        { get; set; }
        [DicomField(DicomTags.SeriesInstanceUid, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="SeriesInstanceUid")]
        public String SeriesInstanceUid
        { get; set; }
        [DicomField(DicomTags.Modality, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="Modality")]
        public String Modality
        { get; set; }
        [DicomField(DicomTags.NumberOfSeriesRelatedInstances, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="NumberOfSeriesRelatedInstances")]
        public Int32 NumberOfSeriesRelatedInstances
        { get; set; }
        [DicomField(DicomTags.PerformedProcedureStepStartDate, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="PerformedProcedureStepStartDate")]
        public String PerformedProcedureStepStartDate
        { get; set; }
        [DicomField(DicomTags.PerformedProcedureStepStartTime, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="PerformedProcedureStepStartTime")]
        public String PerformedProcedureStepStartTime
        { get; set; }
        [DicomField(DicomTags.SourceApplicationEntityTitle, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="SourceApplicationEntityTitle")]
        public String SourceApplicationEntityTitle
        { get; set; }
        [DicomField(DicomTags.SeriesNumber, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="SeriesNumber")]
        public String SeriesNumber
        { get; set; }
        [DicomField(DicomTags.SeriesDescription, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="SeriesDescription")]
        public String SeriesDescription
        { get; set; }
        #endregion

        #region Static Methods
        static public Series Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public Series Load(IPersistenceContext read, ServerEntityKey key)
        {
            ISeriesEntityBroker broker = read.GetBroker<ISeriesEntityBroker>();
            Series theObject = broker.Load(key);
            return theObject;
        }
        static public Series Insert(Series entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                Series newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public Series Insert(IUpdateContext update, Series entity)
        {
            ISeriesEntityBroker broker = update.GetBroker<ISeriesEntityBroker>();
            SeriesUpdateColumns updateColumns = new SeriesUpdateColumns();
            updateColumns.ServerPartitionKey = entity.ServerPartitionKey;
            updateColumns.StudyKey = entity.StudyKey;
            updateColumns.SeriesInstanceUid = entity.SeriesInstanceUid;
            updateColumns.Modality = entity.Modality;
            updateColumns.NumberOfSeriesRelatedInstances = entity.NumberOfSeriesRelatedInstances;
            updateColumns.PerformedProcedureStepStartDate = entity.PerformedProcedureStepStartDate;
            updateColumns.PerformedProcedureStepStartTime = entity.PerformedProcedureStepStartTime;
            updateColumns.SourceApplicationEntityTitle = entity.SourceApplicationEntityTitle;
            updateColumns.SeriesNumber = entity.SeriesNumber;
            updateColumns.SeriesDescription = entity.SeriesDescription;
            Series newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
