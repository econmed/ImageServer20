#region License

// Copyright (c) 2009, ClearCanvas Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, 
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, 
//      this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of ClearCanvas Inc. nor the names of its contributors 
//      may be used to endorse or promote products derived from this software without 
//      specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
// OF SUCH DAMAGE.

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class WorkQueueTypeProperties: ServerEntity
    {
        #region Constructors
        public WorkQueueTypeProperties():base("WorkQueueTypeProperties")
        {}
        public WorkQueueTypeProperties(
             WorkQueueTypeEnum _workQueueTypeEnum_
            ,WorkQueuePriorityEnum _workQueuePriorityEnum_
            ,Boolean _memoryLimited_
            ,Boolean _alertFailedWorkQueue_
            ,Int32 _maxFailureCount_
            ,Int32 _processDelaySeconds_
            ,Int32 _failureDelaySeconds_
            ,Int32 _deleteDelaySeconds_
            ,Int32 _postponeDelaySeconds_
            ,Int32 _expireDelaySeconds_
            ,Int32 _maxBatchSize_
            ,QueueStudyStateEnum _queueStudyStateEnum_
            ,Int16 _queueStudyStateOrder_
            ):base("WorkQueueTypeProperties")
        {
            WorkQueueTypeEnum = _workQueueTypeEnum_;
            WorkQueuePriorityEnum = _workQueuePriorityEnum_;
            MemoryLimited = _memoryLimited_;
            AlertFailedWorkQueue = _alertFailedWorkQueue_;
            MaxFailureCount = _maxFailureCount_;
            ProcessDelaySeconds = _processDelaySeconds_;
            FailureDelaySeconds = _failureDelaySeconds_;
            DeleteDelaySeconds = _deleteDelaySeconds_;
            PostponeDelaySeconds = _postponeDelaySeconds_;
            ExpireDelaySeconds = _expireDelaySeconds_;
            MaxBatchSize = _maxBatchSize_;
            QueueStudyStateEnum = _queueStudyStateEnum_;
            QueueStudyStateOrder = _queueStudyStateOrder_;
        }
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="WorkQueueTypeEnum")]
        public WorkQueueTypeEnum WorkQueueTypeEnum
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="WorkQueuePriorityEnum")]
        public WorkQueuePriorityEnum WorkQueuePriorityEnum
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="MemoryLimited")]
        public Boolean MemoryLimited
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="AlertFailedWorkQueue")]
        public Boolean AlertFailedWorkQueue
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="MaxFailureCount")]
        public Int32 MaxFailureCount
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="ProcessDelaySeconds")]
        public Int32 ProcessDelaySeconds
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="FailureDelaySeconds")]
        public Int32 FailureDelaySeconds
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="DeleteDelaySeconds")]
        public Int32 DeleteDelaySeconds
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="PostponeDelaySeconds")]
        public Int32 PostponeDelaySeconds
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="ExpireDelaySeconds")]
        public Int32 ExpireDelaySeconds
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="MaxBatchSize")]
        public Int32 MaxBatchSize
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="QueueStudyStateEnum")]
        public QueueStudyStateEnum QueueStudyStateEnum
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="WorkQueueTypeProperties", ColumnName="QueueStudyStateOrder")]
        public Int16 QueueStudyStateOrder
        { get; set; }
        #endregion

        #region Static Methods
        static public WorkQueueTypeProperties Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public WorkQueueTypeProperties Load(IPersistenceContext read, ServerEntityKey key)
        {
            IWorkQueueTypePropertiesEntityBroker broker = read.GetBroker<IWorkQueueTypePropertiesEntityBroker>();
            WorkQueueTypeProperties theObject = broker.Load(key);
            return theObject;
        }
        static public WorkQueueTypeProperties Insert(WorkQueueTypeProperties entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                WorkQueueTypeProperties newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public WorkQueueTypeProperties Insert(IUpdateContext update, WorkQueueTypeProperties entity)
        {
            IWorkQueueTypePropertiesEntityBroker broker = update.GetBroker<IWorkQueueTypePropertiesEntityBroker>();
            WorkQueueTypePropertiesUpdateColumns updateColumns = new WorkQueueTypePropertiesUpdateColumns();
            updateColumns.WorkQueueTypeEnum = entity.WorkQueueTypeEnum;
            updateColumns.WorkQueuePriorityEnum = entity.WorkQueuePriorityEnum;
            updateColumns.MemoryLimited = entity.MemoryLimited;
            updateColumns.AlertFailedWorkQueue = entity.AlertFailedWorkQueue;
            updateColumns.MaxFailureCount = entity.MaxFailureCount;
            updateColumns.ProcessDelaySeconds = entity.ProcessDelaySeconds;
            updateColumns.FailureDelaySeconds = entity.FailureDelaySeconds;
            updateColumns.DeleteDelaySeconds = entity.DeleteDelaySeconds;
            updateColumns.PostponeDelaySeconds = entity.PostponeDelaySeconds;
            updateColumns.ExpireDelaySeconds = entity.ExpireDelaySeconds;
            updateColumns.MaxBatchSize = entity.MaxBatchSize;
            updateColumns.QueueStudyStateEnum = entity.QueueStudyStateEnum;
            updateColumns.QueueStudyStateOrder = entity.QueueStudyStateOrder;
            WorkQueueTypeProperties newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
