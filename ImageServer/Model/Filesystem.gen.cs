#region License

// Copyright (c) 2009, ClearCanvas Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, 
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, 
//      this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of ClearCanvas Inc. nor the names of its contributors 
//      may be used to endorse or promote products derived from this software without 
//      specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
// OF SUCH DAMAGE.

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class Filesystem: ServerEntity
    {
        #region Constructors
        public Filesystem():base("Filesystem")
        {}
        public Filesystem(
             System.String _description_
            ,System.Boolean _enabled_
            ,System.String _filesystemPath_
            ,FilesystemTierEnum _filesystemTierEnum_
            ,System.Decimal _highWatermark_
            ,System.Decimal _lowWatermark_
            ,System.Boolean _readOnly_
            ,System.Boolean _writeOnly_
            ):base("Filesystem")
        {
            _description = _description_;
            _enabled = _enabled_;
            _filesystemPath = _filesystemPath_;
            _filesystemTierEnum = _filesystemTierEnum_;
            _highWatermark = _highWatermark_;
            _lowWatermark = _lowWatermark_;
            _readOnly = _readOnly_;
            _writeOnly = _writeOnly_;
        }
        #endregion

        #region Private Members
        private String _description;
        private Boolean _enabled;
        private String _filesystemPath;
        private FilesystemTierEnum _filesystemTierEnum;
        private Decimal _highWatermark;
        private Decimal _lowWatermark;
        private Boolean _readOnly;
        private Boolean _writeOnly;
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="Description")]
        public String Description
        {
        get { return _description; }
        set { _description = value; }
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="Enabled")]
        public Boolean Enabled
        {
        get { return _enabled; }
        set { _enabled = value; }
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="FilesystemPath")]
        public String FilesystemPath
        {
        get { return _filesystemPath; }
        set { _filesystemPath = value; }
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="FilesystemTierEnum")]
        public FilesystemTierEnum FilesystemTierEnum
        {
        get { return _filesystemTierEnum; }
        set { _filesystemTierEnum = value; }
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="HighWatermark")]
        public Decimal HighWatermark
        {
        get { return _highWatermark; }
        set { _highWatermark = value; }
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="LowWatermark")]
        public Decimal LowWatermark
        {
        get { return _lowWatermark; }
        set { _lowWatermark = value; }
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="ReadOnly")]
        public Boolean ReadOnly
        {
        get { return _readOnly; }
        set { _readOnly = value; }
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="WriteOnly")]
        public Boolean WriteOnly
        {
        get { return _writeOnly; }
        set { _writeOnly = value; }
        }
        #endregion

        #region Static Methods
        static public Filesystem Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public Filesystem Load(IPersistenceContext read, ServerEntityKey key)
        {
            IFilesystemEntityBroker broker = read.GetBroker<IFilesystemEntityBroker>();
            Filesystem theObject = broker.Load(key);
            return theObject;
        }
        static public Filesystem Insert(Filesystem entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                Filesystem newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public Filesystem Insert(IUpdateContext update, Filesystem entity)
        {
            IFilesystemEntityBroker broker = update.GetBroker<IFilesystemEntityBroker>();
            FilesystemUpdateColumns updateColumns = new FilesystemUpdateColumns();
            updateColumns.Description = entity.Description;
            updateColumns.Enabled = entity.Enabled;
            updateColumns.FilesystemPath = entity.FilesystemPath;
            updateColumns.FilesystemTierEnum = entity.FilesystemTierEnum;
            updateColumns.HighWatermark = entity.HighWatermark;
            updateColumns.LowWatermark = entity.LowWatermark;
            updateColumns.ReadOnly = entity.ReadOnly;
            updateColumns.WriteOnly = entity.WriteOnly;
            Filesystem newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
