#region License

// Copyright (c) 2009, ClearCanvas Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, 
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, 
//      this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of ClearCanvas Inc. nor the names of its contributors 
//      may be used to endorse or promote products derived from this software without 
//      specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
// OF SUCH DAMAGE.

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model.EntityBrokers
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;

    public partial class SeriesSelectCriteria : EntitySelectCriteria
    {
        public SeriesSelectCriteria()
        : base("Series")
        {}
        public SeriesSelectCriteria(SeriesSelectCriteria other)
        : base(other)
        {}
        public override object Clone()
        {
            return new SeriesSelectCriteria(this);
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="Modality")]
        public ISearchCondition<String> Modality
        {
            get
            {
              if (!SubCriteria.ContainsKey("Modality"))
              {
                 SubCriteria["Modality"] = new SearchCondition<String>("Modality");
              }
              return (ISearchCondition<String>)SubCriteria["Modality"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="NumberOfSeriesRelatedInstances")]
        public ISearchCondition<Int32> NumberOfSeriesRelatedInstances
        {
            get
            {
              if (!SubCriteria.ContainsKey("NumberOfSeriesRelatedInstances"))
              {
                 SubCriteria["NumberOfSeriesRelatedInstances"] = new SearchCondition<Int32>("NumberOfSeriesRelatedInstances");
              }
              return (ISearchCondition<Int32>)SubCriteria["NumberOfSeriesRelatedInstances"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="PerformedProcedureStepStartDate")]
        public ISearchCondition<String> PerformedProcedureStepStartDate
        {
            get
            {
              if (!SubCriteria.ContainsKey("PerformedProcedureStepStartDate"))
              {
                 SubCriteria["PerformedProcedureStepStartDate"] = new SearchCondition<String>("PerformedProcedureStepStartDate");
              }
              return (ISearchCondition<String>)SubCriteria["PerformedProcedureStepStartDate"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="PerformedProcedureStepStartTime")]
        public ISearchCondition<String> PerformedProcedureStepStartTime
        {
            get
            {
              if (!SubCriteria.ContainsKey("PerformedProcedureStepStartTime"))
              {
                 SubCriteria["PerformedProcedureStepStartTime"] = new SearchCondition<String>("PerformedProcedureStepStartTime");
              }
              return (ISearchCondition<String>)SubCriteria["PerformedProcedureStepStartTime"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="SeriesDescription")]
        public ISearchCondition<String> SeriesDescription
        {
            get
            {
              if (!SubCriteria.ContainsKey("SeriesDescription"))
              {
                 SubCriteria["SeriesDescription"] = new SearchCondition<String>("SeriesDescription");
              }
              return (ISearchCondition<String>)SubCriteria["SeriesDescription"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="SeriesInstanceUid")]
        public ISearchCondition<String> SeriesInstanceUid
        {
            get
            {
              if (!SubCriteria.ContainsKey("SeriesInstanceUid"))
              {
                 SubCriteria["SeriesInstanceUid"] = new SearchCondition<String>("SeriesInstanceUid");
              }
              return (ISearchCondition<String>)SubCriteria["SeriesInstanceUid"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="SeriesNumber")]
        public ISearchCondition<String> SeriesNumber
        {
            get
            {
              if (!SubCriteria.ContainsKey("SeriesNumber"))
              {
                 SubCriteria["SeriesNumber"] = new SearchCondition<String>("SeriesNumber");
              }
              return (ISearchCondition<String>)SubCriteria["SeriesNumber"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="ServerPartitionGUID")]
        public ISearchCondition<ServerEntityKey> ServerPartitionKey
        {
            get
            {
              if (!SubCriteria.ContainsKey("ServerPartitionKey"))
              {
                 SubCriteria["ServerPartitionKey"] = new SearchCondition<ServerEntityKey>("ServerPartitionKey");
              }
              return (ISearchCondition<ServerEntityKey>)SubCriteria["ServerPartitionKey"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="SourceApplicationEntityTitle")]
        public ISearchCondition<String> SourceApplicationEntityTitle
        {
            get
            {
              if (!SubCriteria.ContainsKey("SourceApplicationEntityTitle"))
              {
                 SubCriteria["SourceApplicationEntityTitle"] = new SearchCondition<String>("SourceApplicationEntityTitle");
              }
              return (ISearchCondition<String>)SubCriteria["SourceApplicationEntityTitle"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Series", ColumnName="StudyGUID")]
        public ISearchCondition<ServerEntityKey> StudyKey
        {
            get
            {
              if (!SubCriteria.ContainsKey("StudyKey"))
              {
                 SubCriteria["StudyKey"] = new SearchCondition<ServerEntityKey>("StudyKey");
              }
              return (ISearchCondition<ServerEntityKey>)SubCriteria["StudyKey"];
            } 
        }
    }
}
