#region License

// Copyright (c) 2009, ClearCanvas Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, 
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, 
//      this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of ClearCanvas Inc. nor the names of its contributors 
//      may be used to endorse or promote products derived from this software without 
//      specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
// OF SUCH DAMAGE.

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model.EntityBrokers
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;

    public partial class FilesystemSelectCriteria : EntitySelectCriteria
    {
        public FilesystemSelectCriteria()
        : base("Filesystem")
        {}
        public FilesystemSelectCriteria(FilesystemSelectCriteria other)
        : base(other)
        {}
        public override object Clone()
        {
            return new FilesystemSelectCriteria(this);
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="Description")]
        public ISearchCondition<String> Description
        {
            get
            {
              if (!SubCriteria.ContainsKey("Description"))
              {
                 SubCriteria["Description"] = new SearchCondition<String>("Description");
              }
              return (ISearchCondition<String>)SubCriteria["Description"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="Enabled")]
        public ISearchCondition<Boolean> Enabled
        {
            get
            {
              if (!SubCriteria.ContainsKey("Enabled"))
              {
                 SubCriteria["Enabled"] = new SearchCondition<Boolean>("Enabled");
              }
              return (ISearchCondition<Boolean>)SubCriteria["Enabled"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="FilesystemPath")]
        public ISearchCondition<String> FilesystemPath
        {
            get
            {
              if (!SubCriteria.ContainsKey("FilesystemPath"))
              {
                 SubCriteria["FilesystemPath"] = new SearchCondition<String>("FilesystemPath");
              }
              return (ISearchCondition<String>)SubCriteria["FilesystemPath"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="FilesystemTierEnum")]
        public ISearchCondition<FilesystemTierEnum> FilesystemTierEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("FilesystemTierEnum"))
              {
                 SubCriteria["FilesystemTierEnum"] = new SearchCondition<FilesystemTierEnum>("FilesystemTierEnum");
              }
              return (ISearchCondition<FilesystemTierEnum>)SubCriteria["FilesystemTierEnum"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="HighWatermark")]
        public ISearchCondition<Decimal> HighWatermark
        {
            get
            {
              if (!SubCriteria.ContainsKey("HighWatermark"))
              {
                 SubCriteria["HighWatermark"] = new SearchCondition<Decimal>("HighWatermark");
              }
              return (ISearchCondition<Decimal>)SubCriteria["HighWatermark"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="LowWatermark")]
        public ISearchCondition<Decimal> LowWatermark
        {
            get
            {
              if (!SubCriteria.ContainsKey("LowWatermark"))
              {
                 SubCriteria["LowWatermark"] = new SearchCondition<Decimal>("LowWatermark");
              }
              return (ISearchCondition<Decimal>)SubCriteria["LowWatermark"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="ReadOnly")]
        public ISearchCondition<Boolean> ReadOnly
        {
            get
            {
              if (!SubCriteria.ContainsKey("ReadOnly"))
              {
                 SubCriteria["ReadOnly"] = new SearchCondition<Boolean>("ReadOnly");
              }
              return (ISearchCondition<Boolean>)SubCriteria["ReadOnly"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="WriteOnly")]
        public ISearchCondition<Boolean> WriteOnly
        {
            get
            {
              if (!SubCriteria.ContainsKey("WriteOnly"))
              {
                 SubCriteria["WriteOnly"] = new SearchCondition<Boolean>("WriteOnly");
              }
              return (ISearchCondition<Boolean>)SubCriteria["WriteOnly"];
            } 
        }
    }
}
