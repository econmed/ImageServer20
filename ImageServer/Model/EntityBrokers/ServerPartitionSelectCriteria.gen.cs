#region License

// Copyright (c) 2006-2008, ClearCanvas Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, 
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, 
//      this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of ClearCanvas Inc. nor the names of its contributors 
//      may be used to endorse or promote products derived from this software without 
//      specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
// OF SUCH DAMAGE.

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model.EntityBrokers
{
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;

    public partial class ServerPartitionSelectCriteria : EntitySelectCriteria
    {
        public ServerPartitionSelectCriteria()
        : base("ServerPartition")
        {}
        public ISearchCondition<System.Boolean> AcceptAnyDevice
        {
            get
            {
              if (!SubCriteria.ContainsKey("AcceptAnyDevice"))
              {
                 SubCriteria["AcceptAnyDevice"] = new SearchCondition<System.Boolean>("AcceptAnyDevice");
              }
              return (ISearchCondition<System.Boolean>)SubCriteria["AcceptAnyDevice"];
            } 
        }
        public ISearchCondition<System.String> AeTitle
        {
            get
            {
              if (!SubCriteria.ContainsKey("AeTitle"))
              {
                 SubCriteria["AeTitle"] = new SearchCondition<System.String>("AeTitle");
              }
              return (ISearchCondition<System.String>)SubCriteria["AeTitle"];
            } 
        }
        public ISearchCondition<System.Boolean> AutoInsertDevice
        {
            get
            {
              if (!SubCriteria.ContainsKey("AutoInsertDevice"))
              {
                 SubCriteria["AutoInsertDevice"] = new SearchCondition<System.Boolean>("AutoInsertDevice");
              }
              return (ISearchCondition<System.Boolean>)SubCriteria["AutoInsertDevice"];
            } 
        }
        public ISearchCondition<System.Int32> DefaultRemotePort
        {
            get
            {
              if (!SubCriteria.ContainsKey("DefaultRemotePort"))
              {
                 SubCriteria["DefaultRemotePort"] = new SearchCondition<System.Int32>("DefaultRemotePort");
              }
              return (ISearchCondition<System.Int32>)SubCriteria["DefaultRemotePort"];
            } 
        }
        public ISearchCondition<System.String> Description
        {
            get
            {
              if (!SubCriteria.ContainsKey("Description"))
              {
                 SubCriteria["Description"] = new SearchCondition<System.String>("Description");
              }
              return (ISearchCondition<System.String>)SubCriteria["Description"];
            } 
        }
        public ISearchCondition<DuplicateSopPolicyEnum> DuplicateSopPolicyEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("DuplicateSopPolicyEnum"))
              {
                 SubCriteria["DuplicateSopPolicyEnum"] = new SearchCondition<DuplicateSopPolicyEnum>("DuplicateSopPolicyEnum");
              }
              return (ISearchCondition<DuplicateSopPolicyEnum>)SubCriteria["DuplicateSopPolicyEnum"];
            } 
        }
        public ISearchCondition<System.Boolean> Enabled
        {
            get
            {
              if (!SubCriteria.ContainsKey("Enabled"))
              {
                 SubCriteria["Enabled"] = new SearchCondition<System.Boolean>("Enabled");
              }
              return (ISearchCondition<System.Boolean>)SubCriteria["Enabled"];
            } 
        }
        public ISearchCondition<System.Boolean> MatchAccesssionNumber
        {
            get
            {
              if (!SubCriteria.ContainsKey("MatchAccesssionNumber"))
              {
                 SubCriteria["MatchAccesssionNumber"] = new SearchCondition<System.Boolean>("MatchAccesssionNumber");
              }
              return (ISearchCondition<System.Boolean>)SubCriteria["MatchAccesssionNumber"];
            } 
        }
        public ISearchCondition<System.Boolean> MatchIssuerOfPatientId
        {
            get
            {
              if (!SubCriteria.ContainsKey("MatchIssuerOfPatientId"))
              {
                 SubCriteria["MatchIssuerOfPatientId"] = new SearchCondition<System.Boolean>("MatchIssuerOfPatientId");
              }
              return (ISearchCondition<System.Boolean>)SubCriteria["MatchIssuerOfPatientId"];
            } 
        }
        public ISearchCondition<System.Boolean> MatchPatientId
        {
            get
            {
              if (!SubCriteria.ContainsKey("MatchPatientId"))
              {
                 SubCriteria["MatchPatientId"] = new SearchCondition<System.Boolean>("MatchPatientId");
              }
              return (ISearchCondition<System.Boolean>)SubCriteria["MatchPatientId"];
            } 
        }
        public ISearchCondition<System.Boolean> MatchPatientsBirthDate
        {
            get
            {
              if (!SubCriteria.ContainsKey("MatchPatientsBirthDate"))
              {
                 SubCriteria["MatchPatientsBirthDate"] = new SearchCondition<System.Boolean>("MatchPatientsBirthDate");
              }
              return (ISearchCondition<System.Boolean>)SubCriteria["MatchPatientsBirthDate"];
            } 
        }
        public ISearchCondition<System.Boolean> MatchPatientsName
        {
            get
            {
              if (!SubCriteria.ContainsKey("MatchPatientsName"))
              {
                 SubCriteria["MatchPatientsName"] = new SearchCondition<System.Boolean>("MatchPatientsName");
              }
              return (ISearchCondition<System.Boolean>)SubCriteria["MatchPatientsName"];
            } 
        }
        public ISearchCondition<System.Boolean> MatchPatientsSex
        {
            get
            {
              if (!SubCriteria.ContainsKey("MatchPatientsSex"))
              {
                 SubCriteria["MatchPatientsSex"] = new SearchCondition<System.Boolean>("MatchPatientsSex");
              }
              return (ISearchCondition<System.Boolean>)SubCriteria["MatchPatientsSex"];
            } 
        }
        public ISearchCondition<System.String> PartitionFolder
        {
            get
            {
              if (!SubCriteria.ContainsKey("PartitionFolder"))
              {
                 SubCriteria["PartitionFolder"] = new SearchCondition<System.String>("PartitionFolder");
              }
              return (ISearchCondition<System.String>)SubCriteria["PartitionFolder"];
            } 
        }
        public ISearchCondition<System.Int32> Port
        {
            get
            {
              if (!SubCriteria.ContainsKey("Port"))
              {
                 SubCriteria["Port"] = new SearchCondition<System.Int32>("Port");
              }
              return (ISearchCondition<System.Int32>)SubCriteria["Port"];
            } 
        }
        public ISearchCondition<System.Int32> StudyCount
        {
            get
            {
              if (!SubCriteria.ContainsKey("StudyCount"))
              {
                 SubCriteria["StudyCount"] = new SearchCondition<System.Int32>("StudyCount");
              }
              return (ISearchCondition<System.Int32>)SubCriteria["StudyCount"];
            } 
        }
    }
}
