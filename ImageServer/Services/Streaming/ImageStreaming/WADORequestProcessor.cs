#region License

// Copyright (c) 2006-2008, ClearCanvas Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, 
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, 
//      this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of ClearCanvas Inc. nor the names of its contributors 
//      may be used to endorse or promote products derived from this software without 
//      specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
// OF SUCH DAMAGE.

#endregion


using System;
using System.Net;
using System.Text;
using ClearCanvas.Common;
using ClearCanvas.Common.Statistics;
using ClearCanvas.ImageServer.Services.Streaming.ImageStreaming;

namespace ClearCanvas.ImageServer.Services.Streaming.ImageStreaming
{
    /// <summary>
    /// Represents a Dicom WADO request processor.
    /// </summary>
    public class WADORequestProcessor
    {
        #region Private Members
        private int _readBufferSize = 0;
        private WADORequestProcessorStatistics _statistics;
        
        #endregion

        #region Public Properties

        /// <summary>
        /// Gets or sets the read buffer size used by the processor.
        /// </summary>
        public int ReadBufferSize
        {
            get { return _readBufferSize; }
            set { _readBufferSize = value; }
        }

        /// <summary>
        /// Gets the statistics generated by the processor.
        /// </summary>
        public WADORequestProcessorStatistics Statistics
        {
            get { return _statistics; }
        }

        #endregion

        #region Constructors
        public WADORequestProcessor()
        {
            ReadBufferSize = WADOServerSettings.Default.StreamBufferSize;
        }

        #endregion


        #region Private Methods

        /// <summary>
        /// Gets a string that represents the mime-types acceptable by the client for the specified context. The mime-types are separated by commas (,).
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        private string GetClientAcceptTypes(HttpListenerContext context)
        {
            Platform.CheckForNullReference(context, "context");

            if (context.Request.AcceptTypes == null)
                return null;

            StringBuilder mimes = new StringBuilder();
            foreach (string mime in context.Request.AcceptTypes)
            {
                if (mimes.Length > 0)
                    mimes.Append(",");
                mimes.Append(mime);
            }
            return mimes.ToString();
        }

        /// <summary>
        /// Logs information about the request.
        /// </summary>
        /// <param name="context"></param>
        private void LogRequest(HttpListenerContext context)
        {
            Platform.CheckForNullReference(context, "context");

            StringBuilder info = new StringBuilder();

            info.AppendFormat("\n\tAgents={0}", context.Request.UserAgent);
            info.AppendFormat("\n\tRequestType={0}", context.Request.QueryString["RequestType"]);
            info.AppendFormat("\n\tStudyUid={0}", context.Request.QueryString["StudyUid"]);
            info.AppendFormat("\n\tSeriesUid={0}", context.Request.QueryString["SeriesUid"]);
            info.AppendFormat("\n\tObjectUid={0}", context.Request.QueryString["ObjectUid"]);
            info.AppendFormat("\n\tAccepts={0}", GetClientAcceptTypes(context));

            Platform.Log(LogLevel.Debug, info);

        }

        /// <summary>
        /// Generates a http response based on the specified <see cref="response"/> object and send it to the client
        /// </summary>
        /// <param name="response"></param>
        /// <param name="context"></param>
        private void SendWADOResponse(WADOResponse response, HttpListenerContext context)
        {
            context.Response.StatusCode = (int) HttpStatusCode.OK; // TODO: what does http protocol say about how error that occurs after OK status has been sent should  be handled?

            context.Response.ContentType = response.ContentType;

            if (response.Stream == null)
            {
                context.Response.ContentLength64 = 0;

            }
            else
            {
                context.Response.ContentLength64 = response.Stream.Length;

                OptimizeBufferSize(context);

                Platform.Log(LogLevel.Debug, "Starting streaming image...");

                int count;
                byte[] buffer = new byte[ReadBufferSize];
                do
                {
                    count = response.Stream.Read(buffer, 0, buffer.Length);
                    Statistics.DiskAccessCount++;
                    if (count > 0)
                    {
                        Statistics.TransmissionTime.Start();
                        context.Response.OutputStream.Write(buffer, 0, count);
                        Statistics.TransmissionTime.End();
                        Statistics.NetworkWriteCount++;
                    }
                } while (count > 0);

            }
        }

        /// <summary>
        /// Adjust the buffer size
        /// </summary>
        /// <param name="context"></param>
        private void OptimizeBufferSize(HttpListenerContext context)
        {
            if (ReadBufferSize <= 0)
            {
                const int KILOBYTES = 1024;
                const int MEGABYTES = 1024 * KILOBYTES;

                long contentSize = context.Response.ContentLength64;

                // This is very simple optimization algorithm: the buffer size is set according to the content size
                // Other factors may be considered in the future: disk access speed, available physical memory, network speed, cpu usage
                if (contentSize > 3 * MEGABYTES)
                    ReadBufferSize = 3 * MEGABYTES;
                else if (contentSize > 1 * MEGABYTES)
                    ReadBufferSize = 1 * MEGABYTES;
                else if (contentSize > 500 * KILOBYTES)
                    ReadBufferSize = 256 * KILOBYTES;
                else if (contentSize > 100 * KILOBYTES)
                    ReadBufferSize = 128 * KILOBYTES;
                else
                    ReadBufferSize = 64 * KILOBYTES;


            }

            Statistics.ImageSize = (ulong)context.Response.ContentLength64;
            Statistics.BufferSize = (ulong)ReadBufferSize;
        }

       
        #endregion

        #region Public Methods

        public void Process(HttpListenerContext context)
        {
            Platform.CheckForNullReference(context, "context");

            string requestType = context.Request.QueryString["requestType"];
            if (String.IsNullOrEmpty(requestType))
            {
                throw new WADOException((int)HttpStatusCode.BadRequest, "RequestType parameter is required");
            }

                        
            _statistics = new WADORequestProcessorStatistics(context.Request.RemoteEndPoint.Address.ToString());
            _statistics.TotalProcessTime.Add(delegate()
                {
                    LogRequest(context);

                    using(WADORequestTypeHandlerManager handlerManager = new WADORequestTypeHandlerManager())
                    {
                        IWADORequestTypeHandler typeHandler = handlerManager.GetHandler(requestType);
                        using(WADOResponse response = typeHandler.Process(context.Request))
                        {
                            if (response != null)
                            {
                                SendWADOResponse(response, context);
                            }    
                        }
                        
                    }
                });

            StatisticsLogger.Log(LogLevel.Info, Statistics);
        }

        #endregion

    }
}