using System;
using System.Collections.Generic;
using System.Text;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using ClearCanvas.Common;

namespace ClearCanvas.ImageServer.Web.Common.WebControls
{
    /// <summary>
    /// Provide validation functionality which works based on a Web Service.
    /// </summary>
    /// <remarks>
    /// The Web service must have [ScriptService] attribute in order to be accessible by the javascript generated by this control.
    /// </remarks>
    public class WebServiceValidator : BaseValidator
    {
        #region Private members
        private string _servicePath = "Not Specified";
        private string _serviceOperation = "Not Specified";
        private string _paramsFunction;
        #endregion Private members


        #region Public Properties

        /// <summary>
        /// The relative path to the asmx web service 
        /// eg. /Services/ValidationServices.asmx
        /// </summary>
        public string ServicePath
        {
            get { return _servicePath; }
            set { _servicePath = value; }
        }

        

        /// <summary>
        /// Name of the service operation
        /// </summary>
        public string ServiceOperation
        {
            get { return _serviceOperation; }
            set { _serviceOperation = value; }
        }

        /// <summary>
        /// Name of the javascript function used to create the parameter object passed to the service.
        /// </summary>
        /// 
        /// <example>
        /// The following example shows the javascript function that create the parameter object
        /// which contains a single parameter 'path' (as specified in ValidateFilesystemPath argument).
        /// The value for this parameter is taken from the text box with ID of 'PathTextBox'.
        /// 
        /// 
        /// Web service code:
        /// <code>
        /// [WebMethod]
        /// public ValidationResult ValidateFilesystemPath(string path)
        /// {
        ///     .....
        /// }
        /// </code>
        /// 
        /// Javascript code:
        /// 
        /// <code>
        ///  function CreateParams()
        ///  {
        ///     control = document.getElementById('PathTextBox');
        ///     params = new Array();
        ///     params.path=control.value;
        ///  
        ///     return params;
        ///  }
        ///  </code>
        /// 
        /// ASPX code:
        /// 
        /// <code>
        /// <clearcanvas:WebServiceValidator 
        ///       runat="server" ID="PathValidator" 
        ///       ControlToValidate="PathTextBox" 
        ///       InvalidInputBackColor="#FAFFB5" 
        ///       ServicePath="/Services/ValidationServices.asmx" 
        ///       ServiceOperation="ValidateFilesystemPath" 
        ///       ParamsFunction="CreateParams"
        ///       Display="None" 
        ///       ValidationGroup="vg1" />
        /// </code>
        /// 
        /// </example>
        public string ParamsFunction
        {
            get { return _paramsFunction; }
            set { _paramsFunction = value; }
        }


        #endregion Public Properties

        #region Protected Properties
        protected string ServiceURL
        {
            get
            {
                string baseUrl = Page.Request.Url.Scheme + "://" + Page.Request.Url.Authority +
                        Page.Request.ApplicationPath.TrimEnd('/');
                return baseUrl + Page.ResolveUrl(ServicePath); 
            }
        }

       
        #endregion Protected Properties


        #region Protected Methods
        protected override void OnInit(EventArgs e)
        {

            base.OnInit(e);
            
            RegisterWebServiceScripts();

            RegisterWebServiceInitScripts();
        }

        protected void RegisterWebServiceInitScripts()
        {
            string script;
            script = "<script type='text/javascript'>" + @"

                        function addLoadEvent(func) {
                          var oldonload = window.onload;
                          if (typeof window.onload != 'function') {
                            window.onload = func;
                          } else {
                            window.onload = function() {
                              if (oldonload) {
                                oldonload();
                              }
                              func();
                            }
                          }
                        }



                        function initwebservice()
                        {
                            service.useService('" + ServiceURL + @"?WSDL','ValidationServices');
                            service.onserviceavailable = onserviceavailable();
                       
                        }
                       
                       
                        function onserviceavailable(){
                            //alert('web service ready');
                        }
                        
                       
                        addLoadEvent(function() {
                            //alert('Adding load event');
                            initwebservice();
                        });       
                    </script>";

            Page.ClientScript.RegisterStartupScript(GetType(), "WebServiceInit", script);
        }

        protected void RegisterWebServiceScripts()
        {
            string script =

                "<script type='text/javascript'>" + @"

                        function " + EvalFunctionName + @"()
                        {              

                            control = document.getElementById('" + GetControlRenderID(ControlToValidate) + @"');

                            //alert('sending web service request');             
                            var res;
                            callObj = service.createCallOptions();
                            callObj.funcName = '" + ServiceOperation + @"';
                            callObj.async = false;
                            callObj.timeOut=1000;
                            callObj.params = " + ParamsFunction + @"();

                            //callObj.params = 'path=' + control.value;
                    	    
	                        
                            resObj = service.ValidationServices.callService(callObj, res);

                            if (!resObj.error)
                            {
                                result = eval(resObj.value); 

                                if (!result.Success)
                                {

                                    if (result.ErrorCode == -5000)
                                    {
                                        var ans = window.confirm('Unable to validate " + InputName + @" : ' + result.ErrorText + '\nDo you want to ignore it? You can re-validate it in the future');
                                        if (ans)
                                        {
                                            return true;
                                        }
                                    }

                                    
                                    control.style.backgroundColor = '" + InvalidInputBackColor + @"';
                                    helpCtrl = document.getElementById('" + GetControlRenderID(PopupHelpControlID) + @"');

                                    if (helpCtrl!=null){
                                        helpCtrl.style.visibility='visible';
                                        helpCtrl.alt= result.ErrorText;
                                    }
                                }
                                else
                                {
                                    control.style.backgroundColor = '';

                                    helpCtrl = document.getElementById('" + GetControlRenderID(PopupHelpControlID) + @"');
                                    if (helpCtrl!=null){
                                        helpCtrl.style.visibility='hidden';
                                    }
                                    
                                }


                                return result.Success;
                            }
                            else
                            {
                                alert('Error occurs while calling " + ServiceOperation + @" at " + ServiceURL + @" : ' + resObj.errorDetail.string);
                            }
                            
                        
                        }

    

        
                </script>";

           

            Page.ClientScript.RegisterClientScriptBlock(GetType(), ClientID, script);
        }

        
        protected override bool EvaluateIsValid()
        {
            
            return true;
        }


        #endregion Protected Methods

    }
}
