<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>MPPS Details Dispatcher page</title>
		<link href="../css/default.css" rel="stylesheet" type="text/css" />
		<script type="text/javascript" src="../js/jsx.js"></script>
		<script type="text/javascript" src="../js/jsml.js"></script>
		<script type="text/javascript" src="../js/ui.js"></script>
		<script type="text/javascript" src="../js/ris.js"></script>
		<script type="text/javascript" src="../js/layout.js"></script>
		<script type="text/javascript" >
		var imagePath = "../images";
		
		function onBodyLoad()
		{
				try
				{
					if(!Ris)
						return;

					var faxboxItem = Ris.getHealthcareContext();

					var faxUrl = faxboxItem ? Ris.getMimeDocumentUrl(faxboxItem.FaxDocument) : "about:blank";
					
					var urlExtension = faxUrl.substring(faxUrl.length - 3, faxUrl.length).toLowerCase();;
					if (urlExtension == "pdf")
					{
						// show PDF in the embedded object.  Use exposed methods to hide toolbar
						var pdfObject = PdfObject("PdfObject", faxUrl);
						pdfObject.createToolbar("PdfButtons");
					}
					else
					{
						// redirect all other documents
						window.location = faxUrl;
					}
				}
				catch(e)
				{
					var message = "Failed to load details page.  An exception occurred in the script. Error name: " + e.name + ". Error message: " + e.message;
					Field.setValue($("errorMsg"), message);
				}
		}

		/* PDF ActiveX object have these supported functions.  Not all are exposed by PdfObject
			GoBackwardStack()
			GoForwardStack()
			GotoFirstPage()
			GotoLastPage()
			GotoNextPage()
			GotoPreviousPage()
			LoadFile(fileName)
			Print()
			PrintAll()
			PrintAllFit()
			PrintPages(from, to)
			PrintPagesFit()
			PrintWithDialog()
			SetCurrentHighlight(left, top, width, height)
			SetCurrentPage(pageNumber)
			SetLayoutMode(mode)
				'DontCare'      - use the current user preference
				'SinglePage'    - use single page mode (pre Acrobat 3.0 style)
				'OneColumn'     - use one-column continuous mode
				'TwoColumnLeft' - use two-column continuous mode with the first page on the left
				'TwoColumnRight'- use two-column continuous mode with the first page on the right  
			SetNamedDest(destination)
			SetPageMode(mode)
				'none'      - displays the document, but does not display bookmarks or thumbnails (default)
				'bookmarks' - displays the document and bookmarks
				'thumbs'    - displays the document and thumbnails
			SetShowScrollbars(bool)
			SetShowToolbar(bool)
			SetView(view)
				'Fit'   - Fits the entire page within the window both vertically and horizontally.
				'FitH'  - Fits the entire width of the page within the window.
				'FitV'  - Fits the entire height of the page within the window.
				'FitB'  - Fits the bounding box within the window both vertically and horizontally.
				'FitBH' - Fits the width of the bounding box within the window.
				'FitBV' - Fits the height of the bounding box within the window
			SetViewRect(left, top, width, height)
			SetViewScroll(view, offset)
				view - see SetView
				offset - The horizontal or vertical coordinate positioned either at the left or top edge.
			SetZoom(percent)
				percent -   The desired zoom factor, expressed as a percentage.
			SetZoomScroll(percent, left, top)
				percent - see SetZoom
				left - The horizontal coordinate positioned at the left edge.
				top - The vertical coordinate positioned at the top edge.
		 */
		function PdfObject(id, fileUrl) 
		{
			var thisObject = this;
			var _activeXObject = document.getElementById(id);
			var _preDefinedZoom = [ 12.5, 25, 33.3, 50, 75, 100, 125, 150, 200, 300, 400, 600, 800];
			var _defaultZoom = 75;
			var _currentZoom;

			// Set the width of the ActiveX control
			this.setWidth = function(value)
				{ _activeXObject.width = value; }

			// Set the height of the ActiveX control
			this.setHeight = function(value)
				{ _activeXObject.height = value; }

			// Opens and displays the specified document within the ActiveX control.
			this.loadFile = function(fileName)
				{ _activeXObject.LoadFile(fileName); }

			// Prints the document according to the options selected in a user dialog box.
			this.printWithDialog = function()
				{ _activeXObject.PrintWithDialog(); }

			// Determines whether a toolbar will appear in the viewer.
			this.setShowToolbar = function(show)
				{ _activeXObject.SetShowToolbar(show); }

			// Sets the view of a page according to the specified string.
			this.setView = function(view)
				{ _activeXObject.SetView(view); }

			// Sets the magnification according to the specified value.
			this.setZoom = function(percentage)
				{ 
					_currentZoom = percentage;
					_activeXObject.SetZoom(_currentZoom); 
				}

			// Sets the magnification to the next smaller zoom.
			this.zoomOut = function()
				{
					var currentZoomIndex = _preDefinedZoom.indexOf(_currentZoom);
					if (currentZoomIndex + 1 < _preDefinedZoom.length)
						this.setZoom(_preDefinedZoom[currentZoomIndex + 1]);
				}

			// Sets the magnification to the next largest zoom.
			this.zoomIn = function()
				{
					var currentZoomIndex = _preDefinedZoom.indexOf(_currentZoom);
					if (currentZoomIndex - 1 > 0)
						this.setZoom(_preDefinedZoom[currentZoomIndex - 1]);
				}

			this.createToolbar = function(id)
				{
					function createButton(icon, tooltip, onClickCallBack)
					{
						var button = document.createElement("<image src='" + imagePath + "/" + icon + "' alt='" + tooltip + "'>");
						button.onclick = onClickCallBack;
						return button;
					}
					
					var parentElement = document.getElementById(id);
					var printButton = createButton("Print.png", "Print", function() { thisObject.printWithDialog(); });
					var zoomInButton = createButton("ZoomIn.png", "Zoom In", function() { thisObject.zoomIn(); });
					var zoomOutButton = createButton("ZoomOut.png", "Zoom Out", function() { thisObject.zoomOut(); });
					var restoreButton = createButton("ZoomRestore.png", "Restore Zoom", function() { thisObject.setZoom(_defaultZoom); });
					parentElement.appendChild(printButton);
					parentElement.appendChild(zoomInButton);
					parentElement.appendChild(zoomOutButton);
					parentElement.appendChild(restoreButton);
				}

			if (fileUrl)
				this.loadFile(fileUrl);

			this.setWidth("100%");
			this.setHeight("95%");
			this.setZoom(_defaultZoom);
			this.setShowToolbar(false);

			return this;
		}
		</script>
	</head>
	<body onload="onBodyLoad()">
	<div id="PdfButtons"></div>
	<object id="PdfObject" type="application/pdf"></object>
	<div id="errorMsg" />
	</body>
</html>
