<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
        <title>Nuclear Medicine</title>
        <link href="css/default.css" rel="stylesheet" type="text/css" />
        <link href="js/calendar/calendar-system.css" rel="stylesheet" type="text/css" />
        <script type="text/javascript" src="js/calendar/calendar.js"></script>
        <script type="text/javascript" src="js/calendar/lang/calendar-en.js"></script>
        <script type="text/javascript" src="js/jsx.js"></script>
	<script type="text/javascript" src="js/jsml.js"></script>
	<script type="text/javascript" src="js/ui.js"></script>
	<script type="text/javascript" src="js/ris.js"></script>
	<script type="text/javascript" >
		
            var radioPharms = 
            [		
                "Tc 99m Macro-aggregated albumin (MAA)",
                "Tc 99m Bicisate (ECD)",
                "Tc 99m Damaged RBC's",
                "Tc 99m Disofenin",
                "Tc 99m DMSA",
                "Tc 99m Exametazime (HMPAO)",
                "Tc 99m Gluceptate (GH)",
                "Tc 99m MAG3",
                "Tc 99m Medronate (MDP)",
                "Tc 99m Pentetate (DTPA)",
                "Tc 99m Pertechnetate",
                "Tc 99m Pyrophosphate",
                "Tc 99m RBC's",
                "Tc 99m Sestamibi",
                "Tc 99m Sulphur Colloid",
                "Tc 99m Tetrafosmine",
                "Tc 99m WBC's",
                "Cold Pyrophosphate",
                "C 14 Urea",
                "Co 57 with IF",
                "Cr 51 Chromic Chloride",
                "Cr 51 RBC's",
                "F 18 FDG",
                "Fe 59 Ferrous Citrate",
                "Ga 67 Gallium Citrate",
                "I 123 MIBG",
                "I 123 Sodium Iodide",
                "I 125 Human Serum Albumin",
                "I 125 Iothalamate",
                "I 131 Hippuran",
                "I 131 MIBG",
                "I 131 NP59",
                "I 131 Sodium Iodide",
                "In 111 DTPA",
                "In 111 Pentetreotide (octreotide)",
                "In 111 Platelets",
                "In 111 RBC's",
                "In 111 WBC's",
                "P 32 Sodium Phosphate",
                "S 89 Strontium Chloride",
                "Tl 201",
                "Xe 133",
                "Y 90 Colloid",
                "Co 57 without IF"
            ];

            var drugs = 
            [
                "AMINOPHYLLINE",
                "CAPTOPRIL",
                "CCK",
                "CIMETIDINE",
                "DEXAMETHAZONE",
                "DOBUTAMINE",
                "DIAMOX",
                "DIPYRAMIDOLE(PERSANTINE)",
                "LASIX",
                "LUGOL'S IODINE",
                "NITROGLYCERINE",
                "PERCID(FAMOTIDINE)",
                "PYROPHOSPHATE(COLD)",
                "THYROGEN",
                "TYLENOL",
                "VITAMIN B12",
                "MORPHINE"
            ];
		
		
		
		    var data;
		    var errorProvider = new ErrorProvider();
	    
		    function onBodyLoad()
		    {
			    data = Ris ? JSML.parse(Ris.getData("ExamDetails")) : {};
			    data.injections = data.injections || [];
			    data.scans = data.scans || [];
		        var injectionsTable = Table.createTable($("injectionsTable"), { editInPlace: true, flow: true },
		             [
		                {   label: "Injection",
		                    cellType: "choice",
		                    choices: [ { group: "Radiopharmaceuticals", choices: radioPharms }, { group: "Drugs", choices: drugs }],
		                    getValue: function(item) { return item.injection; },
		                    setValue: function(item, value) { item.injection = value; },
		                    getError: function(item) { return item.injection ? null : "Injection name required"; }
		                },
		                {   label: "Activity",
		                    cellType: "text",
		                    size: 4,
		                    getValue: function(item) { return item.activity; },
		                    setValue: function(item, value) { item.activity = parseFloat(value); },
		                    getError: function(item) { return (parseFloat(item.activity) > 0) ? null : "Activity required"; }
		                },
		                {   label: "Units",
		                    cellType: "choice",
		                    choices: ["capsule(s)", "GBq", "kBq", "MBq", "vial"],
		                    getValue: function(item) { return item.units; },
		                    setValue: function(item, value) { item.units = value; },
		                    getError: function(item) { return item.units ? null : "Units required"; }
		                },
		                {   label: "Site",
		                    cellType: "choice",
		                    choices: ["Antecubital Fossa", "Buttocks", "Deltoid", "Foot", "Forearm", "Hand", "Wrist"],
		                    getValue: function(item) { return item.bodySite; },
		                    setValue: function(item, value) { item.bodySite = value; },
		                    getError: function(item) { return item.bodySite ? null : "Site required"; }
		                },
		                {   label: "L",
		                    cellType: "bool",
		                    getValue: function(item) { return item.left; },
		                    setValue: function(item, value) { item.left = value; }
		                },
		                {   label: "R",
		                    cellType: "bool",
		                    getValue: function(item) { return item.right; },
		                    setValue: function(item, value) { item.right = value; },
		                    getError: function(item) { return (item.left || item.right) ? null : "L or R required"; }
		                },
		                {   label: "Method",
		                    cellType: "choice",
		                    choices: ["IM", "inhalation", "IV", "PO"],
		                    getValue: function(item) { return item.method; },
		                    setValue: function(item, value) { item.method = value; },
		                    getError: function(item) { return item.method ? null : "Method required"; }
		                },
		                {   label: "Time",
		                    cellType: "datetime",
		                    getValue: function(item) { return item.time; },
		                    setValue: function(item, value) { item.time = value; },
		                    getError: function(item) { return item.time ? null : "Time required"; }
		                },
		                {   label: "Admin By",
		                    cellType: "lookup",
		                    lookup: function(query) { return Ris.resolveStaffName(query); },
		                    getValue: function(item) { return item.staff; },
		                    setValue: function(item, value) { item.staff = value; },
		                    getError: function(item) { return item.staff ? null : "Staff required"; }
		                }
		             ]);
		        
		        injectionsTable.errorProvider = errorProvider;   // share errorProvider with the rest of the form
		        injectionsTable.bindItems(data.injections);
		        
		        var scansTable = Table.createTable($("scansTable"), { editInPlace: true, flow: true },
		             [
		                {   label: "Start Time",
		                    cellType: "datetime",
		                    getValue: function(item) { return item.startTime; },
		                    setValue: function(item, value) { item.startTime = value; },
		                    getError: function(item) { return item.startTime ? null : "Start time required"; }
		                },
		                {   label: "Stop Time",
		                    cellType: "datetime",
		                    getValue: function(item) { return item.stopTime; },
		                    setValue: function(item, value) { item.stopTime = value; },
		                    getError: function(item)
		                    {
		                        if(!item.stopTime)
		                            return "Stop time required";
		                        if(item.stopTime <= item.startTime)
		                            return "Stop time must be later than start time";
		                        return null;
		                    }
		                },
		                {   label: "Location",
		                    cellType: "lookup",
		                    lookup: function(query) { return "TODO"; },
		                    getValue: function(item) { return item.location; },
		                    setValue: function(item, value) { item.location = value; },
		                    getError: function(item) { return item.location ? null : "Location required"; }
		                }
		             ]);
		             
		        scansTable.errorProvider = errorProvider;   // share errorProvider with the rest of the form
		        scansTable.bindItems(data.scans);
		    }
		    
		    //////////////////////////////////////////////////////////////////////////
		    // RIS integration API
		    function hasValidationErrors()
		    {
		        return errorProvider.hasErrors();
		    }

			function showValidation(show)
			{
			    errorProvider.setVisible(show);
			}
			
		    function saveData()
		    {
				return Ris.setData("ExamDetails", JSML.create(data, "data"));
		    }
		    //////////////////////////////////////////////////////////////////////////
		    
			
			function onAddInjection()
			{
			    data.injections.add( {} );   // add an empty item
			}
			
			function onDeleteInjection()
			{
			    var checkedItems = $("injectionsTable").getCheckedItems();
			    if(checkedItems.length > 0)
			    {
			        if(confirm("Deleted selected injections?"))
			        {
			            checkedItems.each(function(item) { data.injections.remove(item); });
			            $("injectionsCheckAllNone").checked = false;
			        }
			    }
			    else
			    {
			        alert("Nothing selected");
			    }
			}
			function onInjectionsCheckAllNone()
			{
			    data.injections.each(function(item) { $("injectionsTable").setItemCheckState(item, $("injectionsCheckAllNone").checked); });
			}
			
			
			function onAddScan()
			{
			    data.scans.add( {} );   // add an empty item
			}
			
			function onDeleteScan()
			{
			    var checkedItems = $("scansTable").getCheckedItems();
			    if(checkedItems.length > 0)
			    {
			        if(confirm("Deleted selected scans?"))
			        {
			            checkedItems.each(function(item) { data.scans.remove(item); });
			            $("scansCheckAllNone").checked = false;
			        }
			    }
			    else
			    {
			        alert("Nothing selected");
			    }
			}
			function onScansCheckAllNone()
			{
			    data.scans.each(function(item) { $("scansTable").setItemCheckState(item, $("scansCheckAllNone").checked); });
			}
		</script>
	</head>
	<body onload="javascript: onBodyLoad()">
	
		<form id="myForm">
		<p class="sectionheading">Injections</p>
		<p>
		    <input type="button" value="Add" onclick="javascript: onAddInjection()" />
		    <input type="button" value="Delete" onclick="javascript: onDeleteInjection()" />
		</p>
			<table id="injectionsTable" border="1" width="100%">
			  <tr>
			    <td><input id="injectionsCheckAllNone" type="checkbox" onclick="javascript: onInjectionsCheckAllNone()" /></td>
				<td class="tableheading">Injection Details</td>
			  </tr>
			</table>
		<p></p>
		<p class="sectionheading">Scans</p>
		<p>
		    <input type="button" value="Add" onclick="javascript: onAddScan()" />
		    <input type="button" value="Delete" onclick="javascript: onDeleteScan()" />
		</p>
			<table id="scansTable" border="1">
			  <tr>
			    <td><input id="scansCheckAllNone" type="checkbox" onclick="javascript: onScansCheckAllNone()" /></td>
				<td class="tableheading">Scan Details</td>
			  </tr>
			</table>
		</form>
	</body>
</html>