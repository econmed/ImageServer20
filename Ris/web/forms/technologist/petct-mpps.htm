<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <title>Technologist Preview</title>
      <link href="../../css/default.css" rel="stylesheet" type="text/css" />
      <link href="../../js/calendar/calendar-system.css" rel="stylesheet" type="text/css" />
      <script type="text/javascript" src="../../js/calendar/calendar.js"></script>
      <script type="text/javascript" src="../../js/calendar/lang/calendar-en.js"></script>
      <script type="text/javascript" src="../../js/jsx.js"></script>
      <script type="text/javascript" src="../../js/jsml.js"></script>
      <script type="text/javascript" src="../../js/ui.js"></script>
      <script type="text/javascript" src="../../js/ris.js"></script>
      <script type="text/javascript" src="../../js/preview.js"></script>
      <script type="text/javascript" src="../../js/layout.js"></script>
      <script type="text/javascript" >
         var data = {};
         var errorProvider = new ErrorProvider();

         var oralTypes = 
         [
            "air",
            "barium",
            "gas pills",
            "gastrographin",
            "water",
            "water soluble",
            "Telebrix"
         ]
         
         var ivContrastTypes =
         [
            "air",
            "barium",
            "isovue",
            "Visipaque 270",
            "Visipaque 320",
            "Omnipaque",
            "water",
            "water soluble",
            "saline flush"
         ]

         var drugNames =
         [
            "Ativan",
            "Lasix",
            "Insulin",
            "Dobutamine"
         ]
         
         function onBodyLoad()
         {
            try
            {
               scaleWidth();
               
               var startTime;
               var stopTime;
            
               if(Ris)
               {
                  data = JSML.parse(Ris.getTag("Documentation")) || {};

				  var mpps = Ris.getHealthcareContext();
                  startTime = mpps ? mpps.StartTime;
                  stopTime = mpps ? mpps.EndTime;
               }

               data.acquisition = data.acquisition || {};
               data.acquisition.startTime = data.acquisition.startTime || startTime;
               data.acquisition.stopTime = data.acquisition.stopTime || stopTime;
               data.scanPositioning = data.scanPositioning || {};
               
               data.oral = data.oral || [];
               data.ivAccess = data.ivAccess || [];
               data.ivContrast = data.ivContrast || [];
               data.radiopharmaceutical = data.radiopharmaceutical || [];
               data.drugs = data.drugs || [];

               initAcquisitionTable();
               initScanPositioningTable();

               initOralTable();
               initIVAccessTable();
               initIVContrastTable();                                           
               initRadiopharmaceuticalTable();
               initDrugsTable();
            }
            catch(e)
            {
               var message = "Failed to load details page.  An exception occurred in the script. Error name: " + e.name + ". Error message: " + e.message;
               Field.setValue($("myForm"), message);
            }
         }
         
         function initAcquisitionTable()
         {
           var table = Table.createTable($("acquisitionTable"), { editInPlace: true, flow: true, checkBoxes: false },
             [
               {  label: "Start Date/Time",
                  cellType: "datetime",
                  getValue: function(item) { return item.startTime; },
                  setValue: function(item, value) { item.startTime = value; },
                  getError: function(item) { return null; }
               },
               {  label: "Stop Date/Time",
                  cellType: "datetime",
                  getValue: function(item) { return item.stopTime; },
                  setValue: function(item, value) { item.stopTime = value; },
                  getError: function(item) { return null; }
               },
               {  label: "Equipment/Device ID/Location",
                  cellType: "text",
                  size: 30,
                  getValue: function(item) { return item.equipment; },
                  setValue: function(item, value) { item.equipment = value; },
                  getError: function(item) { return null; }
               },
               {  label: "Radiation Dose",
                  cellType: "text",
                  size: 10,
                  getValue: function(item) { return item.dose; },
                  setValue: function(item, value) { item.dose = value; },
                  getError: function(item) { return null; }
               }
             ]);
                
           table.errorProvider = errorProvider;   // share errorProvider with the rest of the form
           table.bindItems([data.acquisition]);
         }
         
         function initScanPositioningTable()
         {
            var table = Table.createTable($("scanPositioningTable"), {editInPlace: true, flow: true, checkBoxes: false },
               [
                  {  label: "Type",
                     cellType: "choice",
                     choices: ["Head and Neck", "Whole Body"],
                     getValue: function(item) { return item.type; },
                     setValue: function(item, value) { item.type = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Zero on Tattoo",
                     cellType: "choice",
                     choices: ["Yes", "No"],
                     getValue: function(item) { return item.zeroOnTattoo; },
                     getVisible: function(item) { return item.type == "Head and Neck"; },
                     setValue: function(item, value) { item.zeroOnTattoo = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Zero on SSN",
                     cellType: "choice",
                     choices: ["Yes", "No"],
                     getValue: function(item) { return item.zeroOnSSN; },
                     getVisible: function(item) { return item.type == "Whole Body"; },
                     setValue: function(item, value) { item.zeroOnSSN = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "SOR Start Position (SPI)",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.spi; },
                     setValue: function(item, value) { item.spi = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "# Bed Positions",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.bedPositions; },
                     setValue: function(item, value) { item.bedPositions = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Time/Position",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.time; },
                     setValue: function(item, value) { item.time = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Couch Height",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.couchHeight; },
                     setValue: function(item, value) { item.couchHeight = value; },
                     getError: function(item) { return null; }
                  }
               ]);
                  
            table.errorProvider = errorProvider;
            table.bindItems([data.scanPositioning]);
         }
                  
         function initOralTable()
         {
            var table = Table.createTable($("oralTable"), {editInPlace: true, flow: true, checkBoxes: true },
               [
                  {  label: "Type",
                     cellType: "choice",
                     choices: oralTypes,
                     getValue: function(item) { return item.type; },
                     setValue: function(item, value) { item.type = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Amount",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.amount; },
                     setValue: function(item, value) { item.amount = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Measurement",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.measurement; },
                     setValue: function(item, value) { item.measurement = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Admin By",
                     cellType: "lookup",
                     lookup: function(query) { return Ris.resolveStaffName(query); },
                     getValue: function(item) { return item.staff; },
                     setValue: function(item, value) { item.staff = value; },
                     getError: function(item) { return null; }
                  }
               ]);
                  
            table.errorProvider = errorProvider;
            table.bindItems(data.oral);
         }

         function onAddOral()
         {
            data.oral.add( {} );
         }

         function onDeleteOral()
         {
            var checkedItems = $("oralTable").getCheckedItems();
            if(checkedItems.length > 0)
            {
              if(confirm("Deleted selected oral contrast documentation?"))
              {
                  checkedItems.each(function(item) { data.oral.remove(item); });
                  $("oralCheckAllNone").checked = false;
              }
            }
            else
            {
              alert("Nothing selected");
            }
         }

         function onOralCheckAllNone()
         {
            data.oral.each(function(item) { $("oralTable").setItemCheckState(item, $("oralCheckAllNone").checked); });
         }         

         function initIVAccessTable()
         {
            var table = Table.createTable($("ivAccessTable"), {editInPlace: true, flow: true, checkBoxes: true },
               [
                  {  label: "Type",
                     cellType: "choice",
                     choices: ["New", "Existing"],
                     getValue: function(item) { return item.type; },
                     setValue: function(item, value) { item.type = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Side",
                     cellType: "choice",
                     choices: ["Right", "Left"],
                     getValue: function(item) { return item.side; },
                     setValue: function(item, value) { item.side = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Site",
                     cellType: "choice",
                     choices: ["Antecubital Fossa", "Forearm", "Hand", "Wrist"],
                     getValue: function(item) { return item.bodySite; },
                     setValue: function(item, value) { item.bodySite = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Accessed By",
                     cellType: "lookup",
                     lookup: function(query) { return Ris.resolveStaffName(query); },
                     getValue: function(item) { return item.staff; },
                     setValue: function(item, value) { item.staff = value; },
                     getError: function(item) { return null; }
                  }
               ]);
            
            table.errorProvider = errorProvider;
            table.bindItems(data.ivAccess);               
         }
         
         function onAddIVAccess()
         {
            data.ivAccess.add( {} );
         }

         function onDeleteIVAccess()
         {
            var checkedItems = $("ivAccessTable").getCheckedItems();
            if(checkedItems.length > 0)
            {
              if(confirm("Deleted selected IV access documentation?"))
              {
                  checkedItems.each(function(item) { data.ivAccess.remove(item); });
                  $("ivAccessCheckAllNone").checked = false;
              }
            }
            else
            {
              alert("Nothing selected");
            }
         }

         function onIVAccessCheckAllNone()
         {
            data.ivAccess.each(function(item) { $("ivAccessTable").setItemCheckState(item, $("ivAccessCheckAllNone").checked); });
         }         

         function initIVContrastTable()
         {
            var table = Table.createTable($("ivContrastTable"), {editInPlace: true, flow: true, checkBoxes: true },
               [
                  {  label: "Type",
                     cellType: "choice",
                     choices: ivContrastTypes,
                     getValue: function(item) { return item.type; },
                     setValue: function(item, value) { item.type = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Amount",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.amount; },
                     setValue: function(item, value) { item.amount = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Measurement",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.measurement; },
                     setValue: function(item, value) { item.measurement = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Pump/Rate",
                     cellType: "choice",
                     choices: ["Yes", "No"],
                     getValue: function(item) { return item.pumprate; },
                     setValue: function(item, value) { item.pumprate = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Rate",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.rate; },
                     setValue: function(item, value) { item.rate = value; },
                     getVisible: function(item) { return item.pumprate == "Yes"; },
                     getError: function(item) { return null; }
                  },                    
                  {  label: "Power Injection",
                     cellType: "choice",
                     choices: ["Yes", "No"],
                     getValue: function(item) { return item.powerinjection; },
                     setValue: function(item, value) { item.powerinjection = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Lot #",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.lot; },
                     setValue: function(item, value) { item.lot = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Admin By",
                     cellType: "lookup",
                     lookup: function(query) { return Ris.resolveStaffName(query); },
                     getValue: function(item) { return item.staff; },
                     setValue: function(item, value) { item.staff = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Time",
                     cellType: "datetime",
                     getValue: function(item) { return item.time; },
                     setValue: function(item, value) { item.time = value; },
                     getError: function(item) { return null; }
                  }
               ]);
            
            table.errorProvider = errorProvider;
            table.bindItems(data.ivContrast);               
         }
         
         function onAddIVContrast()
         {
            data.ivContrast.add( {} );
         }

         function onDeleteIVContrast()
         {
            var checkedItems = $("ivContrastTable").getCheckedItems();
            if(checkedItems.length > 0)
            {
              if(confirm("Deleted selected IV contrasts documentation?"))
              {
                  checkedItems.each(function(item) { data.ivContrast.remove(item); });
                  $("ivContrastCheckAllNone").checked = false;
              }
            }
            else
            {
              alert("Nothing selected");
            }
         }

         function onIVContrastCheckAllNone()
         {
            data.ivContrast.each(function(item) { $("ivContrastTable").setItemCheckState(item, $("ivContrastCheckAllNone").checked); });
         }         

         function initRadiopharmaceuticalTable()
         {
            var table = Table.createTable($("radiopharmaceuticalTable"), {editInPlace: true, flow: true, checkBoxes: true },
               [
                  {  label: "Name",
                     cellType: "choice",
                     choices: ["FDG"],
                     getValue: function(item) { return item.name; },
                     setValue: function(item, value) { item.name = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Activity",
                     cellType: "text",
                     size: 10,
                     getValue: function(item) { return item.activity; },
                     setValue: function(item, value) { item.activity = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Unit",
                     cellType: "choice",
                     choices: ["GBq", "kBq", "MBq"],
                     getValue: function(item) { return item.unit; },
                     setValue: function(item, value) { item.unit = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Site",
                     cellType: "choice",
                     choices: ["Antecubital Fossa", "Buttocks", "Deltoid", "Foot", "Forearm", "Hand", "Wrist", "Mouth"],
                     getValue: function(item) { return item.bodySite; },
                     setValue: function(item, value) { item.bodySite = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Method",
                     cellType: "choice",
                     choices: ["IV", "sublingual"],
                     getValue: function(item) { return item.method; },
                     setValue: function(item, value) { item.method = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Admin By",
                     cellType: "lookup",
                     lookup: function(query) { return Ris.resolveStaffName(query); },
                     getValue: function(item) { return item.staff; },
                     setValue: function(item, value) { item.staff = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Time",
                     cellType: "datetime",
                     getValue: function(item) { return item.time; },
                     setValue: function(item, value) { item.time = value; },
                     getError: function(item) { return null; }
                  }
               ]);
                  
            table.errorProvider = errorProvider;
            table.bindItems(data.radiopharmaceutical);
         }
         
         function onAddRadiopharmaceutical()
         {
            data.radiopharmaceutical.add( {} );
         }

         function onDeleteRadiopharmaceutical()
         {
            var checkedItems = $("radiopharmaceuticalTable").getCheckedItems();
            if(checkedItems.length > 0)
            {
              if(confirm("Deleted selected radiopharmaceutical documentation?"))
              {
                  checkedItems.each(function(item) { data.radiopharmaceutical.remove(item); });
                  $("radiopharmaceuticalCheckAllNone").checked = false;
              }
            }
            else
            {
              alert("Nothing selected");
            }
         }

         function onRadiopharmaceuticalCheckAllNone()
         {
            data.radiopharmaceutical.each(function(item) { $("radiopharmaceuticalTable").setItemCheckState(item, $("radiopharmaceuticalCheckAllNone").checked); });
         }
         
         function initDrugsTable()
         {
            var table = Table.createTable($("drugsTable"), {editInPlace: true, flow: true, checkBoxes: true },
               [
                  {  label: "Name",
                     cellType: "choice",
                     choices: drugNames,
                     getValue: function(item) { return item.name; },
                     setValue: function(item, value) { item.name = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Admin By",
                     cellType: "lookup",
                     lookup: function(query) { return Ris.resolveStaffName(query); },
                     getValue: function(item) { return item.staff; },
                     setValue: function(item, value) { item.staff = value; },
                     getError: function(item) { return null; }
                  },
                  {  label: "Time",
                     cellType: "datetime",
                     getValue: function(item) { return item.time; },
                     setValue: function(item, value) { item.time = value; },
                     getError: function(item) { return null; }
                  }
               ]);
                  
            table.errorProvider = errorProvider;
            table.bindItems(data.drugs);
         }
         
         function onAddDrugs()
         {
            data.drugs.add( {} );
         }
         
         function onDeleteDrugs()
         {
            var checkedItems = $("drugsTable").getCheckedItems();
            if(checkedItems.length > 0)
            {
              if(confirm("Deleted selected drugs contrast documentation?"))
              {
                  checkedItems.each(function(item) { data.drugs.remove(item); });
                  $("drugsCheckAllNone").checked = false;
              }
            }
            else
            {
              alert("Nothing selected");
            }
         }
         
         function onDrugsCheckAllNone()
         {
            data.drugs.each(function(item) { $("drugsTable").setItemCheckState(item, $("drugsCheckAllNone").checked); });
         }

         //////////////////////////////////////////////////////////////////////////
         // RIS integration API
         function hasValidationErrors()
         {
            return errorProvider.hasErrors();
         }

         function showValidation(show)
         {
            errorProvider.setVisible(show);
         }

         function saveData()
         {
			data.capturePageUrl = window.location;
            return Ris.setTag("Documentation", JSML.create(data, "data"));
         }
         //////////////////////////////////////////////////////////////////////////
      </script>
   </head>
   <body onload="javascript: onBodyLoad()" onresize="javascript: scaleWidth()">
      <form id="myForm">
         <p class="sectionheading">Exam Acquisition/Mpps</p>
         <table id="acquisitionTable" width="100%">
           <tr><td class="tableheading"></td></tr>
         </table>

         <p class="sectionheading">Scan Positioning</p>   
         <table id="scanPositioningTable" width="100%">
           <tr><td class="tableheading"></td></tr>
         </table>

         <p class="sectionheading">Oral</p>
         <p>
             <input type="button" value="Add" onclick="javascript: onAddOral()" />
             <input type="button" value="Delete" onclick="javascript: onDeleteOral()" />
         </p>
         <table id="oralTable" border="1" width="100%">
            <tr>
               <td colspan="2"><input id="oralCheckAllNone" type="checkbox" onclick="javascript:onOralCheckAllNone()">Select All/None</input></td>
            </tr>
         </table>
         <p class="sectionheading">IV - Access</p>
         <p>
             <input type="button" value="Add" onclick="javascript: onAddIVAccess()" />
             <input type="button" value="Delete" onclick="javascript: onDeleteIVAccess()" />
         </p>
         <table id="ivAccessTable" border="1" width="100%">
            <tr>
               <td colspan="2"><input id="ivAccessCheckAllNone" type="checkbox" onclick="javascript:onIVAccessCheckAllNone()">Select All/None</input></td>
            </tr>
         </table>
         <p class="sectionheading">IV - Contrast</p>
         <p>
             <input type="button" value="Add" onclick="javascript: onAddIVContrast()" />
             <input type="button" value="Delete" onclick="javascript: onDeleteIVContrast()" />
         </p>
         <table id="ivContrastTable" border="1" width="100%">
            <tr>
               <td colspan="2"><input id="ivContrastCheckAllNone" type="checkbox" onclick="javascript:onIVContrastCheckAllNone()">Select All/None</input></td>
            </tr>
         </table>
         <p class="sectionheading">Radiopharmaceutical</p>
         <p>
             <input type="button" value="Add" onclick="javascript: onAddRadiopharmaceutical()" />
             <input type="button" value="Delete" onclick="javascript: onDeleteRadiopharmaceutical()" />
         </p>
         <table id="radiopharmaceuticalTable" border="1" width="100%">
            <tr>
               <td colspan="2"><input id="radiopharmaceuticalCheckAllNone" type="checkbox" onclick="javascript:onRadiopharmaceuticalCheckAllNone()">Select All/None</input></td>
            </tr>
         </table>
         <p class="sectionheading">Drugs</p>
         <p>
             <input type="button" value="Add" onclick="javascript: onAddDrugs()" />
             <input type="button" value="Delete" onclick="javascript: onDeleteDrugs()" />
         </p>
         <table id="drugsTable" border="1" width="100%">
            <tr>
               <td colspan="2"><input id="drugsCheckAllNone" type="checkbox" onclick="javascript:onDrugsCheckAllNone()">Select All/None</input></td>
            </tr>
         </table>
      </form>         
   </body>
</html>
