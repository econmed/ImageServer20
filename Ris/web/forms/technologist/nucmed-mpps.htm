<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>Angio/Interventional Details</title>
	<link href="../../css/default.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript" SRC="../../js/SparrowScripts/datepicker/ss_datepicker_settings.js"></script>
	<script type="text/javascript" SRC="../../js/SparrowScripts/datepicker/ss_datepicker.js"></script>
	<script type="text/javascript" SRC="../../js/SparrowScripts/timepicker/ss_timepicker_settings.js"></script>
	<script type="text/javascript" SRC="../../js/SparrowScripts/timepicker/ss_timepicker.js"></script>
	<script type="text/javascript" src="../../js/jsx.js"></script>
	<script type="text/javascript" src="../../js/jsml.js"></script>
	<script type="text/javascript" src="../../js/ui.js"></script>
	<script type="text/javascript" src="../../js/ris.js"></script>
	<script type="text/javascript" src="../../js/preview.js"></script>
	<script type="text/javascript" src="../../js/layout.js"></script>
	<script type="text/javascript" >
		var data = {};
		var errorProvider = new ErrorProvider();

		var radioPharms = 
		[
			"C-14 Urea",
			"Co 57 with IF",
			"Co 57 without IF",
			"Cold Pyrophosphate",
			"Cr 51 Chromic Chloride",
			"Cr 51 RBC",
			"FDG 18",
			"Fe 59 Ferrous Citrate",
			"Ga 67 Gallium Citrate",
			"I 123 MIBG",
			"I 123 Sodium Iodide",
			"I 124 Iothothalamate",
			"1 125 Human Serum Albumin",
			"I 131 Hippuran",
			"I 131 MIBG",
			"I 131 Sodium Iodide",
			"In 111 DTPA",
			"In 111 Penteriodide (Octreotide)",
			"In 111 Platelets",
			"In 111 RBC;'s",
			"In 111 WBC's",
			"P 32 Sodium Phosphate",
			"S 89 Strontium Chloride",
			"Tc 99m Bicisate (ECD)",
			"TC 99m  Damaged RBC's",
			"Tc 99m Disofenin",
			"Tc 99m DMSA",
			"Tc 99m Exametizime (HMPAO)",
			"Tc 99m Gluceptate (GH)",
			"Tc 99m Macro Aggregated Albumin (MAA)",
			"Tc 99m MAG3",
			"Tc 99m Medronate (MDP)",
			"Tc 99m Pentetate (DTPA)",
			"Tc 99m Pertechnetate",
			"Tc 99m Pyrophosphate",
			"Tc 99m RBC's",
			"Tc 99m Sestamibi",
			"Tc 99m Sulphur Colloid",
			"Tc 99m Tetrafosmine",
			"Tc 99m WBC's",
			"TI 201",
			"Xe 133",
			"Y90 colloid"
		];

		var drugs = 
		[
			"Aminophylline",
			"Captopril",
			"CCK",
			"CIMETIDINE",
			"DEXAMETHAZONE",
			"DIAMOX",
			"DOBUTAMINE",
			"LASIX",
			"LUGOL's IODINE",
			"Morphine",
			"Nitroglycerine",
			"Percid (Famotodine)",
			"Pyrophosphate (Cold)",
			"Thyrogen",
			"Tylenol",
			"Vitamin B12"
		];

		var examLocations =
		{
			"MSH" : [
				"17 N Rm 1735",
				"635",
				"Argus",
				"DPX Prodigy #1",
				"DPX Prodigy #2 (BI)",
				"DPX Prodigy #3",
				"Helix",
				"Millenium",
				"Picker 3000",
				"Picker IRIX",
				"Therapy 18b[107 and 104]PMH",
				"Thyroid Probe",
				"Toshiba Thyroid",
				"Transcam",
				"Bunker",
				"Radiopharmacy",
				"Therapy 17N Rm 1735",
				"Not Applicable"
			],
			"TGH" : [
				"Forte1",
				"Forte2",
				"Lab TGH",
				"Maxxus TGH",
				"Probe TGH",
				"Skylight1",
				"Symbia T6",
				"Transcam",
				"Treadmill",
				"Vertex",
				"Not Applicable"
			],
			"TWH" : [
				"Forte3",
				"Lab TWH",
				"Lunar",
				"Skylight2",
				"Not Applicable"
			],
			"PMH" : [
			],
			"WCH" : [
				"W385",
				"W387",
				"W389"
			]
		}

		function onBodyLoad()
		{
			try
			{
				scaleWidth();
			
				var startTime;
				var stopTime;
				var facility;

				if(Ris)
				{
					data = JSML.parse(Ris.getTag("Documentation")) || {};

					var mpps = Ris.getHealthcareContext();
					startTime = mpps.StartTime;
					stopTime = mpps.EndTime;
					facility = mpps.ModalityProcedureSteps[0].Procedure.PerformingFacility.Code;
					
					readOnly = Ris.getTag("ReadOnly") === "true" ? true : false;
					Field.show($("readOnlyHeader"), readOnly);
					
					var combinedProceduresDescription = String.combine(
						mpps.ModalityProcedureSteps.map(function(mps) { return formatProcedureName(mps.Procedure.Type, mps.Procedure.Portable, mps.Procedure.Laterality); }), 
						", ");
					Field.setValue($("performedProcedures"), combinedProceduresDescription);
				}

				data.acquisition = data.acquisition || [];

				initAcquisitionTable(facility);

				data.injections = data.injections || [];
				data.pacs = data.pacs || {};

				initInjectionsTable();
				initPacsTable();
			}
			catch(e)
			{
				var message = "Failed to load details page.  An exception occurred in the script. Error name: " + e.name + ". Error message: " + e.message;
				Field.setValue($("myForm"), message);
			}
		}

		function initAcquisitionTable(facility)
		{
			var table = Table.createTable($("acquisitionTable"), { editInPlace: true, flow: true, checkBoxes: true },
			[
				{  label: "Equipment/Device ID/Location",
					cellType: "choice",
					choices: examLocations[facility],
					getValue: function(item) { return item.equipment; },
					setValue: function(item, value) { item.equipment = value; },
					getError: function(item) { return null; }
				},
				{	label:"Start Time",
					cellType: "datetime",
					getValue: function(item) { return item.startTime; },
					setValue: function(item, value) { item.startTime = value; },
					getError: function(item) { return null; }
				},
				{	label:"Stop Time",
					cellType: "datetime",
					getValue: function(item) { return item.stopTime; },
					setValue: function(item, value) { item.stopTime = value; },
					getError: function(item) { return null; }
				}
			]);

			table.errorProvider = errorProvider;   // share errorProvider with the rest of the form
			table.bindItems(data.acquisition);
		}

		function onAddAcquisition()
		{
			data.acquisition.add( {} );
		}

		function onDeleteAcquisition()
		{
			var checkedItems = $("acquisitionTable").getCheckedItems();
			if(checkedItems.length > 0)
			{
				if(confirm("Delete selected acquisition?"))
				{
					checkedItems.each(function(item) { data.acquisition.remove(item); });
					$("acquisitionCheckAllNone").checked = false;
				}
			}
			else
			{
				alert("Nothing selected");
			}
		}

		function onAcquisitionCheckAllNone()
		{
			data.acquisition.each(function(item) { $("acquisitionTable").setItemCheckState(item, $("acquisitionCheckAllNone").checked); });
		}

		function initInjectionsTable()
		{
			var injectionsTable = Table.createTable($("injectionsTable"), 
				{editInPlace: true, flow: true, checkBoxes: true },
				[
					{	label: "Name",
						cellType: "choice",
						choices: [ { group: "Radiopharmaceuticals", choices: radioPharms }, { group: "Drugs", choices: drugs }],
						getValue: function(item) { return item.injection; },
						setValue: function(item, value) { item.injection = value; },
						getError: function(item) { return null; }
					},
					{   label: "Activity",
						cellType: "text",
						size: 4,
						getValue: function(item) { return item.activity; },
						setValue: function(item, value) { item.activity = parseFloat(value); },
						getError: function(item) { return null; }
					},
					{   label: "Units",
						cellType: "choice",
						choices: 
						[ 
							{ group: "Radiopharmaceuticals", choices: ["GBq", "kBq", "MBq"] }, 
							{ group: "Drugs", choices: ["mg", "mls"] }
						],
						getValue: function(item) { return item.units; },
						setValue: function(item, value) { item.units = value; },
						getError: function(item) { return null; }
					},
					{   label: "Site",
						cellType: "choice",
						choices: ["Antecubital Fossa", "Breast", "Buttocks", "Deltoid", "Foot", "Forearm", "Hand", "Wrist", "Mouth", "Other"],
						getValue: function(item) { return item.bodySite; },
						setValue: function(item, value) { item.bodySite = value; },
						getError: function(item) { return null; }
					},
					{	label: "Site (con'd)",
						cellType: "text",
						getValue: function(item) { return item.bodySiteOther; },
						setValue: function(item, value) { item.bodySiteOther = value; },
						getVisible: function(item) { return item.bodySite == "Other"; },
						getError: function(item) { return null; }
					},
					{   label: "Side",
						cellType: "choice",
						choices: ["RT", "LT", "Bilateral"],
						getValue: function(item) { return item.side; },
						setValue: function(item, value) { item.side = value; },
						getError: function(item) { return null; }
					},
					{	label: "Method",
						cellType: "choice",
						choices: 
						[ 
							{ group: "Radiopharmaceuticals", choices: ["IV", "Sublingual", "Unsuccessful", "Partially interstitial"] }, 
							{ group: "Drugs", choices: ["IV", "IV port", "ID", "PO", "Inhalation"] }
						],
						getValue: function(item) { return item.method; },
						setValue: function(item, value) { item.method = value; },
						getError: function(item) { return null; }						
					},
					{   label: "Administered By",
						cellType: "lookup",
						lookup: function(query) { return Ris.resolveStaffName(query); },
						getValue: function(item) { return item.staff; },
						setValue: function(item, value) { item.staff = value; },
						getError: function(item) { return null; }
					},
					{   label: "Time",
						cellType: "datetime",
						getValue: function(item) { return item.time; },
						setValue: function(item, value) { item.time = value; },
						getError: function(item) { return null; }
					}
				]);

			injectionsTable.errorProvider = errorProvider;
			injectionsTable.bindItems(data.injections);
		}

		function onAddInjection()
		{
			data.injections.add( {} );
		}

		function onDeleteInjection()
		{
			var checkedItems = $("injectionsTable").getCheckedItems();
			if(checkedItems.length > 0)
			{
				if(confirm("Delete selected injections?"))
				{
					checkedItems.each(function(item) { data.injections.remove(item); });
					$("injectionsCheckAllNone").checked = false;
				}
			}
			else
			{
				alert("Nothing selected");
			}
		}

		function onInjectionCheckAllNone()
		{
			data.injections.each(function(item) { $("injectionsTable").setItemCheckState(item, $("injectionsCheckAllNone").checked); });
		}

		function initPacsTable()
		{
			var table = Table.createTable($("pacsTable"), { editInPlace: true, flow: true, checkBoxes: false },
			[
				{	label: "# of Exams",
					cellType: "text",
					getValue: function(item) { return item.numberOfExams; },
					setValue: function(item, value) { item.numberOfExams = value; },
					getError: function(item) { return null; }
				},
				{	label: "# of Series",
					cellType: "text",
					getValue: function(item) { return item.numberOfSeries; },
					setValue: function(item, value) { item.numberOfSeries = value; },
					getError: function(item) { return null; }
				},
				{	label: "Server Checked By",
					cellType: "lookup",
					lookup: function(query) { return Ris.resolveStaffName(query); },
					getValue: function(item) { return item.serverCheckedBy; },
					setValue: function(item, value) { item.serverCheckedBy = value; },
					getError: function(item) { return null; }
				}
			]);

			table.errorProvider = errorProvider;   // share errorProvider with the rest of the form
			table.bindItems([data.pacs]);
		}

		//////////////////////////////////////////////////////////////////////////
		// RIS integration API
		function hasValidationErrors()
		{
			return errorProvider.hasErrors();
		}

		function showValidation(show)
		{
			errorProvider.setVisible(show);
		}

		function saveData()
		{
			Ris.setTag("Documentation", JSML.create(data, "data"));
			//Ris.setTag("ExamLocation", data.acquisition.equipment);
		}
		//////////////////////////////////////////////////////////////////////////
	</script>
</head>
<body onload="javascript: onBodyLoad()" onresize="javascript: scaleWidth()">
	<form id="myForm">
		<div id="readOnlyHeader">Changes to this form will not be saved.</div>

		<p class="performedprocedureheading">Performed Procedure(s): <span id="performedProcedures"></span></p>

		<p class="sectionheading">Exam Acquisition</p>
		<div class="addDeleteButtons">
			<input type="button" value="Add" onclick="javascript: onAddAcquisition()" />
			<input type="button" value="Delete" onclick="javascript: onDeleteAcquisition()" />
		</div>
		<table id="acquisitionTable" border="1" width="100%">
			<tr>
				<td colspan="2"><input id="acquisitionCheckAllNone" type="checkbox" onclick="javascript:onAcquisitionCheckAllNone()">Select All/None</input></td>
			</tr>
		</table>
		<p class="sectionheading">Administration</p>
		<div class="addDeleteButtons">
			<input type="button" value="Add" onclick="javascript: onAddInjection()" />
			<input type="button" value="Delete" onclick="javascript: onDeleteInjection()" />
		</div>
		<table id="injectionsTable" border="1" width="100%">
			<tr>
				<td colspan="2"><input id="injectionsCheckAllNone" type="checkbox" onclick="javascript:onInjectionCheckAllNone()">Select All/None</input></td>
			</tr>
		</table>
		<p class="sectionheading">PACS</p>
		<table id="pacsTable" width="100%">
			<tr>
				<td class="tableheading"></td>
			</tr>
		</table>
	</form>
</body>
</html>
