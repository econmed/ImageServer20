<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <title>Angio/Interventional Details</title>
      <link href="../../css/default.css" rel="stylesheet" type="text/css" />
      <link href="../../js/calendar/calendar-system.css" rel="stylesheet" type="text/css" />
      <script type="text/javascript" src="../../js/calendar/calendar.js"></script>
      <script type="text/javascript" src="../../js/calendar/lang/calendar-en.js"></script>
      <script type="text/javascript" src="../../js/jsx.js"></script>
      <script type="text/javascript" src="../../js/jsml.js"></script>
      <script type="text/javascript" src="../../js/ui.js"></script>
      <script type="text/javascript" src="../../js/ris.js"></script>
      <script type="text/javascript" src="../../js/preview.js"></script>
      <script type="text/javascript" src="../../js/layout.js"></script>
      <script type="text/javascript" >
         var data = {};
         var errorProvider = new ErrorProvider();

         var radioPharms = 
         [
            "C-14 Urea",
            "Co 57 with IF",
            "Co 57 without IF",
            "Cold Pyrophosphate",
            "Cr 51 Chromic Chloride",
            "Cr 51 RBC",
            "FDG 18",
            "Fe 59 Ferrous Citrate",
            "Ga 67 Gallium Citrate",
            "I 123 MIBG",
            "I 123 Sodium Iodide",
            "I 124 Iothothalamate",
            "1 125 Human Serum Albumin",
            "I 131 Hippuran",
            "I 131 MIBG",
            "I 131 Sodium Iodide",
            "In 111 DTPA",
            "In 111 Penteriodide (Octreotide)",
            "In 111 Platelets",
            "In 111 RBC;'s",
            "In 111 WBC's",
            "P 32 Sodium Phosphate",
            "S 89 Strontium Chloride",
            "Tc 99m Bicisate (ECD)",
            "TC 99m  Damaged RBC's",
            "Tc 99m Disofenin",
            "Tc 99m DMSA",
            "Tc 99m Exametizime (HMPAO)",
            "Tc 99m Gluceptate (GH)",
            "Tc 99m Macro Aggregated Albumin (MAA)",
            "Tc 99m MAG3",
            "Tc 99m Medronate (MDP)",
            "Tc 99m Pentetate (DTPA)",
            "Tc 99m Pertechnetate",
            "Tc 99m Pyrophosphate",
            "Tc 99m RBC's",
            "Tc 99m Sestamibi",
            "Tc 99m Sulphur Colloid",
            "Tc 99m Tetrafosmine",
            "Tc 99m WBC's",
            "TI 201",
            "Xe 133",
            "Y90 colloid"
         ];

         var drugs = 
         [
            "Aminophylline",
            "Captopril",
            "CCK",
            "CIMETIDINE",
            "DEXAMETHAZONE",
            "DIAMOX",
            "DOBUTAMINE",
            "LASIX",
            "LUGOL's IODINE",
            "Morphine",
            "Nitroglycerine",
            "Percid (Famotodine)",
            "Pyrophosphate (Cold)",
            "Thyrogen",
            "Tylenol",
            "Vitamin B12"
         ];
         
         function onBodyLoad()
         {
            try
            {
               scaleWidth();
            
               var startTime;
               var stopTime;
            
               if(Ris)
               {
                  data = JSML.parse(Ris.getTag("Documentation")) || {};

                  startTime = Ris.getTag("StartTime");
                  startTime = (startTime && startTime.length > 0) ? DateInput.parse(startTime) : null;
                  stopTime = Ris.getTag("StopTime")
                  stopTime = (stopTime && stopTime.length > 0) ? DateInput.parse(stopTime) : null;
               }

               data.acquisition = data.acquisition || {};
               data.acquisition.startTime = data.acquisition.startTime || startTime;
               data.acquisition.stopTime = data.acquisition.stopTime || stopTime;

               data.injections = data.injections || [];
               
               initAcquisitionTable();

               initInjectionsTable();                                           
            }
            catch(e)
            {
               var message = "Failed to load details page.  An exception occurred in the script. Error name: " + e.name + ". Error message: " + e.message;
               Field.setValue($("myForm"), message);
            }
         }
         
         function initAcquisitionTable()
         {
           var table = Table.createTable($("acquisitionTable"), { editInPlace: true, flow: true, checkBoxes: false },
             [
               {  label: "Start Date/Time",
                  cellType: "datetime",
                  getValue: function(item) { return item.startTime; },
                  setValue: function(item, value) { item.startTime = value; },
                  getError: function(item) { return null; }
               },
               {  label: "Stop Date/Time",
                  cellType: "datetime",
                  getValue: function(item) { return item.stopTime; },
                  setValue: function(item, value) { item.stopTime = value; },
                  getError: function(item) { return null; }
               },
               {  label: "Equipment/Device ID/Location",
                  cellType: "text",
                  size: 30,
                  getValue: function(item) { return item.equipment; },
                  setValue: function(item, value) { item.equipment = value; },
                  getError: function(item) { return null; }
               }
             ]);
                
           table.errorProvider = errorProvider;   // share errorProvider with the rest of the form
           table.bindItems([data.acquisition]);
         }
         
         function initInjectionsTable()
         {
            var injectionsTable = Table.createTable($("injectionsTable"), 
               {editInPlace: true, flow: true, checkBoxes: true },
               [
                   {   label: "Injection",
                       cellType: "choice",
                       choices: [ { group: "Radiopharmaceuticals", choices: radioPharms }, { group: "Drugs", choices: drugs }],
                       getValue: function(item) { return item.injection; },
                       setValue: function(item, value) { item.injection = value; },
                       getError: function(item) { return null; }
                   },
                   {   label: "Activity",
                       cellType: "text",
                       size: 4,
                       getValue: function(item) { return item.activity; },
                       setValue: function(item, value) { item.activity = parseFloat(value); },
                       getError: function(item) { return null; }
                   },
                   {   label: "Units",
                       cellType: "choice",
                       choices: ["capsule(s)", "GBq", "kBq", "MBq", "vial"],
                       getValue: function(item) { return item.units; },
                       setValue: function(item, value) { item.units = value; },
                       getError: function(item) { return null; }
                   },
                   {   label: "Site",
                       cellType: "choice",
                       choices: ["Antecubital Fossa", "Buttocks", "Deltoid", "Foot", "Forearm", "Hand", "Wrist"],
                       getValue: function(item) { return item.bodySite; },
                       setValue: function(item, value) { item.bodySite = value; },
                       getError: function(item) { return null; }
                   },
                   {   label: "Side",
                       cellType: "choice",
                       choices: ["Left", "Right"],
                       getValue: function(item) { return item.side; },
                       setValue: function(item, value) { item.side = value; },
                       getError: function(item) { return null; }
                   },
                   {   label: "Admin By",
                       cellType: "lookup",
                       lookup: function(query) { return Ris.resolveStaffName(query); },
                       getValue: function(item) { return item.staff; },
                       setValue: function(item, value) { item.staff = value; },
                       getError: function(item) { return null; }
                   },
                   {   label: "Time",
                       cellType: "datetime",
                       getValue: function(item) { return item.time; },
                       setValue: function(item, value) { item.time = value; },
                       getError: function(item) { return null; }
                   }
               ]);

            injectionsTable.errorProvider = errorProvider;
            injectionsTable.bindItems(data.injections);               
         }
         
         function onAddInjection()
         {
            data.injections.add( {} );
         }

         function onDeleteInjection()
         {
			    var checkedItems = $("injectionsTable").getCheckedItems();
			    if(checkedItems.length > 0)
			    {
			        if(confirm("Deleted selected injections?"))
			        {
			            checkedItems.each(function(item) { data.injections.remove(item); });
			            $("injectionsCheckAllNone").checked = false;
			        }
			    }
			    else
			    {
			        alert("Nothing selected");
			    }
         }

         function onInjectionCheckAllNone()
         {
			    data.injections.each(function(item) { $("injectionsTable").setItemCheckState(item, $("injectionsCheckAllNone").checked); });
         }         

         //////////////////////////////////////////////////////////////////////////
         // RIS integration API
         function hasValidationErrors()
         {
            return errorProvider.hasErrors();
         }

         function showValidation(show)
         {
            errorProvider.setVisible(show);
         }

         function saveData()
         {
			data.capturePageUrl = window.location;
            return Ris.setTag("Documentation", JSML.create(data, "data"));
         }
         //////////////////////////////////////////////////////////////////////////
      </script>
   </head>
   <body onload="javascript: onBodyLoad()" onresize="javascript: scaleWidth()">
      <form id="myForm">
         <p class="sectionheading">Exam Acquisition/Mpps</p>
         <p>&nbsp;</b>
         <table id="acquisitionTable" width="100%">
           <tr><td class="tableheading"></td></tr>
         </table>
         <p class="sectionheading">Injections</p>
         <p>
             <input type="button" value="Add" onclick="javascript: onAddInjection()" />
             <input type="button" value="Delete" onclick="javascript: onDeleteInjection()" />
         </p>
         <table id="injectionsTable" border="1" width="100%">
            <tr>
               <td colspan="2"><input id="injectionsCheckAllNone" type="checkbox" onclick="javascript:onInjectionCheckAllNone()">Select All/None</input></td>
            </tr>
         </table>
      </form>         
   </body>
</html>
       
