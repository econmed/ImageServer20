<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>Ultrasound Documentation</title>
	<link href="../../css/default.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript" SRC="../../js/SparrowScripts/datepicker/ss_datepicker_settings.js"></script>
	<script type="text/javascript" SRC="../../js/SparrowScripts/datepicker/ss_datepicker.js"></script>
	<script type="text/javascript" SRC="../../js/SparrowScripts/timepicker/ss_timepicker_settings.js"></script>
	<script type="text/javascript" SRC="../../js/SparrowScripts/timepicker/ss_timepicker.js"></script>
	<script type="text/javascript" src="../../js/jsx.js"></script>
	<script type="text/javascript" src="../../js/jsml.js"></script>
	<script type="text/javascript" src="../../js/ui.js"></script>
	<script type="text/javascript" src="../../js/ris.js"></script>
	<script type="text/javascript" src="../../js/preview.js"></script>
	<script type="text/javascript" src="../../js/layout.js"></script>
	<script type="text/javascript" >
		var data = {};
		var errorProvider = new ErrorProvider();

		var ivContrastTypes =
		[
			"Definity",
			"Levovist",
			"Other"
		]
		
		var examLocations =
		{
			"MSH" : [
				"U/S 1",
				"U/S 2",
				"U/S 3",
				"U/S 4",
				"U/S 5",
				"U/S 6",
				"U/S 7",
				"U/S 8",
				"ER Portable",
				"Not Applicable",
				"MKUC - L6-033",
				"MKUC - L6-035"
			],
			"TGH" : [
				"#1 U/S",
				"#2 U/S",
				"#3 U/S",
				"#4 U/S",
				"#5 U/S",
				"#6 U/S",
				"#7 U/S",
				"#8 U/S",
				"#9 U/S",
				"#10 U/S",
				"#11 U/S",
				"#12 U/S",
				"ER Portable",
				"ICU Portable",
				"Intra-Operative Portable",
				"Not Applicable"
			],
			"TWH" : [
				"TWH #1 US",
				"TWH #2 US",
				"TWH #3 US",
				"TWH #4 US",
				"TWH #5 US",
				"TWH #6 US",
				"TWH #7 US",
				"TWH #8 US",
				"ER Portable",
				"ICU Portable",
				"Intra-Operative Portable",
				"Not Applicable"
			],
			"PMH" : [
				"PMH 3-414",
				"PMH 3-417",
				"PMH 3-418",
				"PMH 3-419",
				"Not Applicable",
				"Prostate Centre - Prostate",
				"Prostate Centre - Not Applicable"
			],
			"WCH" : [
				"W381N",
				"W381S",
				"W382",
				"W383",
				"W396",
				"W397",
				"WHC",
				"Portable"
			]
		}

		function onBodyLoad()
		{		   
			try
			{
				scaleWidth();
			
				var startTime;
				var stopTime;
				var facility;
				var modality;

				if(Ris)
				{
					data = JSML.parse(Ris.getTag("Documentation")) || {};

					var mpps = Ris.getHealthcareContext();
					startTime = mpps.StartTime;
					stopTime = mpps.EndTime;
					facility = mpps.ModalityProcedureSteps[0].Procedure.PerformingFacility.Code;
					modality = mpps.ModalityProcedureSteps[0].ModalityName;
					
					readOnly = Ris.getTag("ReadOnly") === "true" ? true : false;
					Field.show($("readOnlyHeader"), readOnly);
				}

				data.acquisition = data.acquisition || {};
				data.acquisition.equipment = data.acquisition.equipment || [];
				data.acquisition.startTime = data.acquisition.startTime || startTime;
				data.acquisition.stopTime = data.acquisition.stopTime || stopTime;

				data.consent = data.consent || {};
				data.ivAccess = data.ivAccess || [];
				data.ivContrast = data.ivContrast || [];
				data.ultrasound = data.ultrasound || {};
				data.probe = data.probe || {};
				data.comments = data.comments || {};
				
				initAcquisitionTable(facility, modality);

				initConsentTable();
				initIVAccessTable();
				initIVContrastTable();
				initUltrasoundTable();
				initProbeTable();
				initCommentsTable();
			}
			catch(e)
			{
				var message = "Failed to load details page.  An exception occurred in the script. Error name: " + e.name + ". Error message: " + e.message;
				Field.setValue($("myForm"), message);
			}
		}

		function initAcquisitionTable(facility, modality)
		{
			var acquisitionTable = Table.createTable($("acquisitionTable"), { editInPlace: true, flow: true, checkBoxes: true },
			[
				{  label: "Equipment/Device ID/Location",
					cellType: "choice",
					choices: examLocations[facility],
					getValue: function(item) { return item.equipment; },
					setValue: function(item, value) { item.equipment = value; },
					getError: function(item) { return null; }
				}
			]);
				
			acquisitionTable.errorProvider = errorProvider;   // share errorProvider with the rest of the form
			acquisitionTable.bindItems(data.acquisition.equipment);
			
			var chaperoneTable = Table.createTable($("chaperoneTable"), { editInPlace: true, flow: true, checkBoxes: false },
			[
				{	label: "Chaperones Used?",
					cellType: "choice",
					choices: ["Yes", "No"],
					getValue: function(item) { return item.chaperonesUsed = item.chaperonesUsed || "No"; },
					setValue: function(item, value) { item.chaperonesUsed = value; },
					getError: function(item) { return null; }
				},
				{	label: "Staff Name",
					cellType: "lookup",
					lookup: function(query) { return Ris.resolveStaffName(query); },
					getValue: function(item) { return item.chaperone; },
					setValue: function(item, value) { item.chaperone = value; },
					getVisible: function(item) { return item.chaperonesUsed == "Yes"; },
					getError: function(item) { return null; }
				},
				{	label: "Position",
					cellType: "text",
					getValue: function(item) { return item.chaperonePosition; },
					setValue: function(item, value) { item.chaperonePosition = value; },
					getVisible: function(item) { return item.chaperonesUsed == "Yes"; },
					getError: function(item) { return null; }
				},
				{	label: "Comment",
					cellType: "textarea",
					getValue: function(item) { return item.chaperoneComment; },
					setValue: function(item, value) { item.chaperoneComment = value; },
					getVisible: function(item) { return item.chaperonesUsed == "Yes"; },
					getError: function(item) { return null; }
				
				}
			]);
				
			chaperoneTable.errorProvider = errorProvider;   // share errorProvider with the rest of the form
			chaperoneTable.bindItems([data.acquisition]);
			
			var radiologistTable = Table.createTable($("radiologistTable"), { editInPlace: true, flow: true, checkBoxes: false },
			[
				{	label: "Clinical Staff Scanned?",
					cellType: "choice",
					choices: ["Yes", "No"],
					getValue: function(item) { return item.radiologistScanned = item.radiologistScanned || "No"; },
					setValue: function(item, value) { item.radiologistScanned = value; },
					getError: function(item) { return null; }
				},
				{	label: "Staff Name",
					cellType: "lookup",
					lookup: function(query) { return Ris.resolveStaffName(query); },
					getValue: function(item) { return item.radiologist; },
					setValue: function(item, value) { item.radiologist = value; },
					getVisible: function(item) { return item.radiologistScanned == "Yes"; },
					getError: function(item) { return null; }
				}
			]);
				
			radiologistTable.errorProvider = errorProvider;   // share errorProvider with the rest of the form
			radiologistTable.bindItems([data.acquisition]);
			
		}

		function onAddAcquisition()
		{
			data.acquisition.equipment.add( {} );
		}

		function onDeleteAcquisition()
		{
			var checkedItems = $("acquisitionTable").getCheckedItems();
			if(checkedItems.length > 0)
			{
				if(confirm("Delete selected Equipment/Device/Locations?"))
				{
						checkedItems.each(function(item) { data.acquisition.equipment.remove(item); });
						$("acquisitionCheckAllNone").checked = false;
				}
			}
			else
			{
				alert("Nothing selected");
			}
		}

		function onAcquisitionCheckAllNone()
		{
			data.acquisition.equipment.each(function(item) { $("acquisitionTable").setItemCheckState(item, $("acquisitionCheckAllNone").checked); });
		}

		
		function initConsentTable()
		{
			var consentTable = Table.createTable($("consentTable"), {editInPlace: true, flow: true, checkBoxes: false },
			[
				{	label: "Verbal Consent Obtained",
					cellType: "bool",
					getValue: function(item) { return item.verbalConsent; },
					setValue: function(item, value) { item.verbalConsent = value; },
					getError: function(item) { return null; }
				}
			]);
			
			consentTable.errorProvider = errorProvider;
			consentTable.bindItems([data.consent]);
		}
		
		function initProbeTable()
		{
			var probeTable = Table.createTable($("probeTable"), {editInPlace: true, flow: true, checkBoxes: false },
			[
				{	label: "Probe Number",
					cellType: "text",
					getValue: function(item) { return item.probeNumber; },
					setValue: function(item, value) { item.probeNumber = value; },
					getError: function(item) { return null; }
				}
			]);
			
			probeTable.errorProvider = errorProvider;
			probeTable.bindItems([data.probe]);
		}
		
		function initCommentsTable()
		{
			var commentsTable = Table.createTable($("commentsTable"), {editInPlace: true, flow: true, checkBoxes: false },
			[
				{	label: "Comments",
					cellType: "textarea",
					getValue: function(item) { return item.comment; },
					setValue: function(item, value) { item.comment = value; },
					getError: function(item) { return null; }
				}
			]);
			
			commentsTable.errorProvider = errorProvider;
			commentsTable.bindItems([data.comments]);
		}
		
		function initIVAccessTable()
		{
			var ivAccessTable = Table.createTable($("ivAccessTable"), 
				{editInPlace: true, flow: true, checkBoxes: true },
				[
					{  label: "Type",
						cellType: "choice",
						choices: ["New", "Existing"],
						getValue: function(item) { return item.type; },
						setValue: function(item, value) { item.type = value; },
						getError: function(item) { return null; }
					},
					{  label: "Accessed By",
						cellType: "lookup",
						lookup: function(query) { return Ris.resolveStaffName(query); },
						getValue: function(item) { return item.staff; },
						setValue: function(item, value) { item.staff = value; },
						getError: function(item) { return null; }
					},
					{  label: "Site",
						cellType: "choice",
						choices: ["Hand", "Antecubital", "Wrist", "Forearm"],
						getValue: function(item) { return item.bodySite; },
						setValue: function(item, value) { item.bodySite = value; },
						getError: function(item) { return null; }
					},
					{  label: "Side",
						cellType: "choice",
						choices: ["RT", "LT"],
						getValue: function(item) { return item.side; },
						setValue: function(item, value) { item.side = value; },
						getError: function(item) { return null; }
					}
				]);
			
			ivAccessTable.errorProvider = errorProvider;
			ivAccessTable.bindItems(data.ivAccess);
		}
		
		function onAddIVAccess()
		{
			data.ivAccess.add( {} );
		}

		function onDeleteIVAccess()
		{
			var checkedItems = $("ivAccessTable").getCheckedItems();
			if(checkedItems.length > 0)
			{
				if(confirm("Delete selected IV access documentation?"))
				{
						checkedItems.each(function(item) { data.ivAccess.remove(item); });
						$("ivAccessCheckAllNone").checked = false;
				}
			}
			else
			{
				alert("Nothing selected");
			}
		}

		function onIVAccessCheckAllNone()
		{
			data.ivAccess.each(function(item) { $("ivAccessTable").setItemCheckState(item, $("ivAccessCheckAllNone").checked); });
		}

		function initIVContrastTable()
		{
			var ivContrastTable = Table.createTable($("ivContrastTable"), 
				{editInPlace: true, flow: true, checkBoxes: true },
				[
					{  label: "Type",
						cellType: "choice",
						choices: ivContrastTypes,
						getValue: function(item) { return item.type; },
						setValue: function(item, value) { item.type = value; },
						getError: function(item) { return null; }
					},
					{  label: "Type (con'd)",
						cellType: "text",
						getValue: function(item) { return item.typeOther; },
						setValue: function(item, value) { item.typeOther = value; },
						getVisible: function(item) { return item.type == "Other"; },
						getError: function(item) { return null; }
					},
					{  label: "Amount",
						cellType: "text",
						size: 10,
						getValue: function(item) { return item.amount; },
						setValue: function(item, value) { item.amount = value; },
						getError: function(item) { return null; }
					},
					{  label: "Measurement",
						cellType: "text",
						size: 10,
						getValue: function(item) { return item.measurement; },
						setValue: function(item, value) { item.measurement = value; },
						getError: function(item) { return null; }
					},
					/*{  label: "Administered By",
						cellType: "lookup",
						lookup: function(query) { return Ris.resolveStaffName(query); },
						getValue: function(item) { return item.staff; },
						setValue: function(item, value) { item.staff = value; },
						getError: function(item) { return null; }
					},*/
					{  label: "Date",
						cellType: "datetime",
						getValue: function(item) { return item.date; },
						setValue: function(item, value) { item.date = value; },
						getError: function(item) { return null; }
					}
				]);
			
			ivContrastTable.errorProvider = errorProvider;
			ivContrastTable.bindItems(data.ivContrast);
		}
		
		function onAddIVContrast()
		{
			data.ivContrast.add( {} );
		}

		function onDeleteIVContrast()
		{
			var checkedItems = $("ivContrastTable").getCheckedItems();
			if(checkedItems.length > 0)
			{
				if(confirm("Delete selected IV contrasts documentation?"))
				{
						checkedItems.each(function(item) { data.ivContrast.remove(item); });
						$("ivContrastCheckAllNone").checked = false;
				}
			}
			else
			{
				alert("Nothing selected");
			}
		}

		function onIVContrastCheckAllNone()
		{
			data.ivContrast.each(function(item) { $("ivContrastTable").setItemCheckState(item, $("ivContrastCheckAllNone").checked); });
		}

		function initUltrasoundTable()
		{
			var ultrasoundTable = Table.createTable($("ultrasoundTable"), { editInPlace: true, flow: true, checkBoxes: false },
			[
				{	label: "Performed?",
					cellType: "choice",
					choices: ["Yes", "No"],
					getValue: function(item) { return item.performed = item.performed || "No"; },
					setValue: function(item, value) { item.performed = value; },
					getError: function(item) { return null; }
				},
				{	label: "Workstation",
					cellType: "choice",
					choices: ["IU22", "Toshiba", "Other"],
					getValue: function(item) { return item.workstation; },
					setValue: function(item, value) { item.workstation = value; },
					getVisible: function(item) { return item.performed == "Yes"; },
					getError: function(item) { return null; }
				},
				{	label: "Workstation (con'd)",
					cellType: "text",
					getValue: function(item) { return item.workstationOther; },
					setValue: function(item, value) { item.workstationOther = value; },
					getVisible: function(item) { return item.performed == "Yes" && item.workstation == "Other"; },
					getError: function(item) { return null; }
				}
			]);
				
			ultrasoundTable.errorProvider = errorProvider;   // share errorProvider with the rest of the form
			ultrasoundTable.bindItems([data.ultrasound]);
		}

		//////////////////////////////////////////////////////////////////////////
		// RIS integration API
		function hasValidationErrors()
		{
			return errorProvider.hasErrors();
		}

		function showValidation(show)
		{
			errorProvider.setVisible(show);
		}

		function saveData()
		{
			Ris.setTag("Documentation", JSML.create(data, "data"));
			Ris.setTag("ExamLocation", getLocationsString());
		}
		
		function getLocationsString()
		{
			var locations = [];
			var i;
			for(i = 0; i < data.acquisition.equipment.length; i++)
			{
				locations.push(data.acquisition.equipment[i].equipment);
			}
			return locations.join(" ");
		}
		//////////////////////////////////////////////////////////////////////////
	</script>
</head>
<body onload="javascript: onBodyLoad()" onresize="javascript: scaleWidth()">
	<form id="myForm">
		<div id="readOnlyHeader">Changes to this form will not be saved.</div>
		<p class="sectionheading">Exam Acquisition</p>
		<div class="addDeleteButtons">
			<input type="button" value="Add" onclick="javascript: onAddAcquisition()" />
			<input type="button" value="Delete" onclick="javascript: onDeleteAcquisition()" />
		</div>
		<table id="acquisitionTable" border="1" width="100%">
			<tr>
				<td colspan="2"><input id="acquisitionCheckAllNone" type="checkbox" onclick="javascript:onAcquisitionCheckAllNone()">Select All/None</input></td>
			</tr>
		</table>
		<table id="chaperoneTable" width="100%">
			<tr><td class="tableheading"></td></tr>
		</table>
		<table id="radiologistTable" width="100%">
			<tr><td class="tableheading"></td></tr>
		</table>
		<p class="sectionheading">Patient Consent</p>
		<table id="consentTable" width="100%">
			<tr><td class="tableheading"></td></tr>
		</table>
		<p class="sectionheading">IV - Access</p>
		<div class="addDeleteButtons">
			<input type="button" value="Add" onclick="javascript: onAddIVAccess()" />
			<input type="button" value="Delete" onclick="javascript: onDeleteIVAccess()" />
		</div>
		<table id="ivAccessTable" border="1" width="100%">
			<tr>
				<td colspan="2"><input id="ivAccessCheckAllNone" type="checkbox" onclick="javascript:onIVAccessCheckAllNone()">Select All/None</input></td>
			</tr>
		</table>
		<p class="sectionheading">IV - Contrast</p>
		<div class="addDeleteButtons">
			<input type="button" value="Add" onclick="javascript: onAddIVContrast()" />
			<input type="button" value="Delete" onclick="javascript: onDeleteIVContrast()" />
		</div>
		<table id="ivContrastTable" border="1" width="100%">
			<tr>
				<td colspan="2"><input id="ivContrastCheckAllNone" type="checkbox" onclick="javascript:onIVContrastCheckAllNone()">Select All/None</input></td>
			</tr>
		</table>
		<p class="sectionheading">3D/4D Ultrasound</p>
		<table id="ultrasoundTable" width="100%">
			<tr><td class="tableheading"></td></tr>
		</table>
		<p class="sectionheading">Probe</p>
		<table id="probeTable" width="100%">
			<tr><td class="tableheading"></td></tr>
		</table>
		<p class="sectionheading">Comments</p>
		<table id="commentsTable" width="100%">
			<tr><td class="tableheading"></td></tr>
		</table>
	</form>
</body>
</html>
