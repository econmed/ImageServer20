<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <title>Angio/Interventional Details</title>
      <link href="../../css/default.css" rel="stylesheet" type="text/css" />
      <link href="../../js/calendar/calendar-system.css" rel="stylesheet" type="text/css" />
      <script type="text/javascript" src="../../js/calendar/calendar.js"></script>
      <script type="text/javascript" src="../../js/calendar/lang/calendar-en.js"></script>
      <script type="text/javascript" src="../../js/jsx.js"></script>
      <script type="text/javascript" src="../../js/jsml.js"></script>
      <script type="text/javascript" src="../../js/ui.js"></script>
      <script type="text/javascript" src="../../js/ris.js"></script>
      <script type="text/javascript" src="../../js/preview.js"></script>
      <script type="text/javascript" >
         var data = {};
         var errorProvider = new ErrorProvider();

         var ivContrastTypes =
         [
            "air",
            "barium",
            "isovue",
            "Visipaque 270",
            "Visipaque 320",
            "Omnipaque",
            "water",
            "water soluble",
            "saline flush"
         ]
         
         function onBodyLoad()
         {		        
            try
            {
               var startTime;
               var stopTime;
            
               if(Ris)
               {
                  data = JSML.parse(Ris.getData("Documentation")) || {};
                  startTime = Ris.getData("StartTime") || "Not Started";
                  stopTime = Ris.getData("StopTime") || (startTime == "Not Started" ? "Not Started" : "In Progress");
               }

               data.acquisition = data.acquisition || {};
               data.acquisition.startTime = startTime;
               data.acquisition.stopTime = stopTime;

               data.ivAccess = data.ivAccess || [];
               data.ivContrast = data.ivContrast || [];
               
               initAcquisitionTable();

               initIVAccessTable();
               initIVContrastTable();                                           
            }
            catch(e)
            {
               var message = "Failed to load details page.  An exception occurred in the script. Error name: " + e.name + ". Error message: " + e.message;
               Field.setValue($("myForm"), message);
            }
         }
         
         function initAcquisitionTable()
         {
           var table = Table.createTable($("acquisitionTable"), { editInPlace: true, flow: true, checkBoxes: false },
             [
               {  label: "Start Date/Time",
                  cellType: "readonly",
                  getValue: function(item) { return item.startTime; }
               },
               {  label: "Stop Date/Time",
                  cellType: "readonly",
                  getValue: function(item) { return item.stopTime; }
               },
               {  label: "Equipment/Device ID/Location",
                  cellType: "text",
                  size: 30,
                  getValue: function(item) { return item.equipment; },
                  setValue: function(item, value) { item.equipment = value; },
                  getError: function(item) { return item.equipment ? null : "Equipment/device ID/location required"; }
               },
               {  label: "Radiation Dose",
                  cellType: "text",
                  size: 10,
                  getValue: function(item) { return item.dose; },
                  setValue: function(item, value) { item.dose = value; },
                  getError: function(item) { return item.dose ? null : "Dose required"; }
               }
             ]);
                
           table.errorProvider = errorProvider;   // share errorProvider with the rest of the form
           table.bindItems([data.acquisition]);
         }
         
         function initIVAccessTable()
         {
            var ivAccessTable = Table.createTable($("ivAccessTable"), 
               {editInPlace: true, flow: true, checkBoxes: true },
               [
                  {  label: "Type",
                     cellType: "choice",
                     choices: ["New", "Existing"],
                     getValue: function(item) { return item.type; },
                     setValue: function(item, value) { item.type = value; },
                     getError: function(item) { return item.type ? null : "Type required"; }
                  },
                  {  label: "Side",
                     cellType: "choice",
                     choices: ["Right", "Left"],
                     getValue: function(item) { return item.side; },
                     setValue: function(item, value) { item.side = value; },
                     getError: function(item) { return item.side ? null : "Side required"; }
                  },
                  {  label: "Site",
                     cellType: "choice",
                     choices: ["Antecubital Fossa", "Forearm", "Hand", "Wrist"],
                     getValue: function(item) { return item.bodySite; },
                     setValue: function(item, value) { item.bodySite = value; },
                     getError: function(item) { return item.bodySite ? null : "Site required"; }
                  },
                  {  label: "Accessed By",
                     cellType: "lookup",
                     lookup: function(query) { return Ris.resolveStaffName(query); },
                     getValue: function(item) { return item.staff; },
                     setValue: function(item, value) { item.staff = value; },
                     getError: function(item) { return item.staff ? null : "Staff required"; }
                  }
               ]);
            
            ivAccessTable.errorProvider = errorProvider;
            ivAccessTable.bindItems(data.ivAccess);               
         }
         
         function onAddIVAccess()
         {
            data.ivAccess.add( {} );
         }

         function onDeleteIVAccess()
         {
			    var checkedItems = $("ivAccessTable").getCheckedItems();
			    if(checkedItems.length > 0)
			    {
			        if(confirm("Deleted selected IV access documentation?"))
			        {
			            checkedItems.each(function(item) { data.ivAccess.remove(item); });
			            $("ivAccessCheckAllNone").checked = false;
			        }
			    }
			    else
			    {
			        alert("Nothing selected");
			    }
         }

         function onIVAccessCheckAllNone()
         {
			    data.ivAccess.each(function(item) { $("ivAccessTable").setItemCheckState(item, $("ivAccessCheckAllNone").checked); });
         }         

         function initIVContrastTable()
         {
               var ivContrastTable = Table.createTable($("ivContrastTable"), 
                  {editInPlace: true, flow: true, checkBoxes: true },
                  [
		               {  label: "Type",
		                  cellType: "choice",
		                  choices: ivContrastTypes,
		                  getValue: function(item) { return item.type; },
		                  setValue: function(item, value) { item.type = value; },
		                  getError: function(item) { return item.type ? null : "Type required"; }
		               },
		               {  label: "Amount",
		                  cellType: "text",
		                  size: 10,
		                  getValue: function(item) { return item.amount; },
		                  setValue: function(item, value) { item.amount = value; },
		                  getError: function(item) { return item.amount ? null : "Amount required"; }
		               },
		               {  label: "Measurement",
		                  cellType: "text",
		                  size: 10,
		                  getValue: function(item) { return item.measurement; },
		                  setValue: function(item, value) { item.measurement = value; },
		                  getError: function(item) { return item.measurement ? null : "Measurement required"; }
		               },
		               {  label: "Admin By",
		                  cellType: "lookup",
		                  lookup: function(query) { return Ris.resolveStaffName(query); },
		                  getValue: function(item) { return item.staff; },
		                  setValue: function(item, value) { item.staff = value; },
		                  getError: function(item) { return item.staff ? null : "Staff required"; }
		               },
                     {  label: "Time",
		                  cellType: "datetime",
		                  getValue: function(item) { return item.time; },
		                  setValue: function(item, value) { item.time = value; },
		                  getError: function(item) { return item.time ? null : "Time required"; }
		               }
                  ]);
               
               ivContrastTable.errorProvider = errorProvider;
               ivContrastTable.bindItems(data.ivContrast);               
         }
         
         function onAddIVContrast()
         {
            data.ivContrast.add( {} );
         }

         function onDeleteIVContrast()
         {
			    var checkedItems = $("ivContrastTable").getCheckedItems();
			    if(checkedItems.length > 0)
			    {
			        if(confirm("Deleted selected IV contrasts documentation?"))
			        {
			            checkedItems.each(function(item) { data.ivContrast.remove(item); });
			            $("ivContrastCheckAllNone").checked = false;
			        }
			    }
			    else
			    {
			        alert("Nothing selected");
			    }
         }

         function onIVContrastCheckAllNone()
         {
			    data.ivContrast.each(function(item) { $("ivContrastTable").setItemCheckState(item, $("ivContrastCheckAllNone").checked); });
         }         

         //////////////////////////////////////////////////////////////////////////
         // RIS integration API
         function hasValidationErrors()
         {
            return errorProvider.hasErrors();
         }

         function showValidation(show)
         {
            errorProvider.setVisible(show);
         }

         function saveData()
         {
            return Ris.setData("Documentation", JSML.create(data, "data"));
         }
         //////////////////////////////////////////////////////////////////////////
      </script>
   </head>
   <body onload="javascript: onBodyLoad()">
      <form id="myForm">
         <p class="sectionheading">Exam Acquisition/Mpps</p>
         <p>&nbsp;</b>
         <table id="acquisitionTable" width="100%">
         </table>
         <p>&nbsp;</b>
         <p class="sectionheading">Contrast/Injections</p>
         <p>&nbsp;</b>
         <p class="sectionheading">IV - Access</p>
         <p>
             <input type="button" value="Add" onclick="javascript: onAddIVAccess()" />
             <input type="button" value="Delete" onclick="javascript: onDeleteIVAccess()" />
         </p>
         <table id="ivAccessTable" border="1" width="100%">
            <tr>
               <td colspan="2"><input id="ivAccessCheckAllNone" type="checkbox" onclick="javascript:onIVAccessCheckAllNone()">Select All/None</input></td>
            </tr>
         </table>
         <p class="sectionheading">IV - Contrast</p>
         <p>
             <input type="button" value="Add" onclick="javascript: onAddIVContrast()" />
             <input type="button" value="Delete" onclick="javascript: onDeleteIVContrast()" />
         </p>
         <table id="ivContrastTable" border="1" width="100%">
            <tr>
               <td colspan="2"><input id="ivContrastCheckAllNone" type="checkbox" onclick="javascript:onIVContrastCheckAllNone()">Select All/None</input></td>
            </tr>
         </table>
      </form>         
   </body>
</html>
       
