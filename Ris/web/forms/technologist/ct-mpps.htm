<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>CT Documentation</title>
	<link href="../../css/default.css" rel="stylesheet" type="text/css" />
	<link href="../../js/calendar/calendar-system.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript" src="../../js/calendar/calendar.js"></script>
	<script type="text/javascript" src="../../js/calendar/lang/calendar-en.js"></script>
	<script type="text/javascript" src="../../js/jsx.js"></script>
	<script type="text/javascript" src="../../js/jsml.js"></script>
	<script type="text/javascript" src="../../js/ui.js"></script>
	<script type="text/javascript" src="../../js/ris.js"></script>
	<script type="text/javascript" src="../../js/preview.js"></script>
	<script type="text/javascript" src="../../js/layout.js"></script>
	<script type="text/javascript" >
		var data = {};
		var errorProvider = new ErrorProvider();

		var oralTypes = 
		[
			"barium",
			"gas pills",
			"water",
			"Telebrix"
		]

		var rectalTypes =
		[
			"air",
			"barium",
			"water",
			"water soluble"
		]

		var ivContrastTypes =
		[
			"air",
			"barium",
			"isovue",
			"Visipaque 270",
			"Visipaque 320",
			"Omnipaque",
			"water",
			"water soluble",
			"saline flush"
		]

		var examLocations =
		{
			"MSH" : [
				"#11 510CT",
				"#11 510GR",
				"#12 512CT",
				"#12 512GR",
				"#16 522CT",
				"#16 522GR",
				"#18 ERCT",
				"#18 ERGR",
				"Not Applicable"
			],
			"TGH" : [
				"#1 519",
				"#14 449A",
				"#15 449C",
				"#2 511",
				"#3 422",
				"#4 456CT",
				"#4 456GR",
				"Not Applicable"
			],
			"TWH" : [
				"#10 454CT",
				"#10 454GR",
				"#8 410",
				"#9 414",
				"Not Applicable"
			],
			"PMH" : [
				"#13 664CT",
				"#13 664GR",
				"#17 GR",
				"#5 555",
				"#6 557",
				"#7 663CT",
				"#7 663GR",
				"Not Applicable"
			],
			"WCH" : [
				"CT #19 W291CT",
				"CT #19 W291GR"
			]
		}

		function onBodyLoad()
		{
			try
			{
				scaleWidth();
			
				var startTime;
				var stopTime;
				var facility;

				if(Ris)
				{
					data = JSML.parse(Ris.getTag("Documentation")) || {};

					var mpps = Ris.getHealthcareContext();
					startTime = mpps.StartTime;
					stopTime = mpps.EndTime;
					facility = mpps.ModalityProcedureSteps[0].Procedure.PerformingFacility.Code;
				}

				data.acquisition = data.acquisition || {};
				data.acquisition.startTime = data.acquisition.startTime || startTime;
				data.acquisition.stopTime = data.acquisition.stopTime || stopTime;

				initAcquisitionTable(facility);

				data.oral = data.oral || [];
				data.rectal = data.rectal || [];
				data.ivAccess = data.ivAccess || [];
				data.ivContrast = data.ivContrast || [];

				initOralTable();
				initRectalTable();
				initIVAccessTable();
				initIVContrastTable();

				data.pacs = data.pacs || {};
				data.staff = data.staff || [];
				data.postProcessing = data.postProcessing || {};

				initPacsTable();
				initStaffTable();
				initPostProcessingTable();
			}
			catch(e)
			{
				var message = "Failed to load details page.  An exception occurred in the script. Error name: " + e.name + ". Error message: " + e.message;
				Field.setValue($("myForm"), message);
			}
		}

		function initAcquisitionTable(facility)
		{
			var table = Table.createTable($("acquisitionTable"), { editInPlace: true, flow: true, checkBoxes: false },
			[
				{
					label: "Start Date/Time",
					cellType: "readonly",
					getValue: function(item) { return Ris.formatDateTime(item.startTime); }
				},
				{
					label: "Stop Date/Time",
					cellType: "readonly",
					getValue: function(item) { return Ris.formatDateTime(item.stopTime); }
				},
				{  label: "Equipment/Device ID/Location",
					cellType: "choice",
					choices: examLocations[facility],
					getValue: function(item) { return item.equipment; },
					setValue: function(item, value) { item.equipment = value; },
					getError: function(item) { return null; }
				},
				{  label: "Radiation Dose",
					cellType: "text",
					size: 10,
					getValue: function(item) { return item.dose; },
					setValue: function(item, value) { item.dose = value; },
					getError: function(item) { return null; }
				}
			]);

			table.errorProvider = errorProvider;	// share errorProvider with the rest of the form
			table.bindItems([data.acquisition]);
		}

		function initOralTable()
		{
			var oralTable = Table.createTable($("oralTable"), 
					{editInPlace: true, flow: true, checkBoxes: true },
					[
						{  label: "Type",
							cellType: "choice",
							choices: oralTypes,
							getValue: function(item) { return item.type; },
							setValue: function(item, value) { item.type = value; },
							getError: function(item) { return null; }
						},
						{  label: "Amount",
							cellType: "text",
							size: 10,
							getValue: function(item) { return item.amount; },
							setValue: function(item, value) { item.amount = value; },
							getError: function(item) { return null; }
						},
						{  label: "Time Given",
							cellType: "date",
							getValue: function(item) { return item.timeGiven; },
							setValue: function(item, value) { item.timeGiven = value; },
							getError: function(item) { return null; }
						},
						{  label: "Admin By",
							cellType: "lookup",
							lookup: function(query) { return Ris.resolveStaffName(query); },
							getValue: function(item) { return item.staff; },
							setValue: function(item, value) { item.staff = value; },
							getError: function(item) { return null; }
						}
					]);
					
			oralTable.errorProvider = errorProvider;
			oralTable.bindItems(data.oral);
		}

		function onAddOral()
		{
			data.oral.add( {} );
		}

		function onDeleteOral()
		{
			var checkedItems = $("oralTable").getCheckedItems();
			if(checkedItems.length > 0)
			{
				if(confirm("Deleted selected oral contrast documentation?"))
				{
					checkedItems.each(function(item) { data.oral.remove(item); });
					$("oralCheckAllNone").checked = false;
				}
			}
			else
			{
				alert("Nothing selected");
			}
		}

		function onOralCheckAllNone()
		{
			data.oral.each(function(item) { $("oralTable").setItemCheckState(item, $("oralCheckAllNone").checked); });
		}

		function initRectalTable()
		{
			var rectalTable = Table.createTable($("rectalTable"), 
				{editInPlace: true, flow: true, checkBoxes: true },
				[
					{  label: "Type",
						cellType: "choice",
						choices: rectalTypes,
						getValue: function(item) { return item.type; },
						setValue: function(item, value) { item.type = value; },
						getError: function(item) { return null; }
					},
					{  label: "Amount",
						cellType: "text",
						size: 10,
						getValue: function(item) { return item.amount; },
						setValue: function(item, value) { item.amount = value; },
						getError: function(item) { return null; }
					},
					{  label: "Time Given",
						cellType: "date",
						getValue: function(item) { return item.timeGiven; },
						setValue: function(item, value) { item.timeGiven = value; },
						getError: function(item) { return null; }
					},
					{  label: "Admin By",
						cellType: "lookup",
						lookup: function(query) { return Ris.resolveStaffName(query); },
						getValue: function(item) { return item.staff; },
						setValue: function(item, value) { item.staff = value; },
						getError: function(item) { return null; }
					}
				]);

			rectalTable.errorProvider = errorProvider;
			rectalTable.bindItems(data.rectal);
		}

		function onAddRectal()
		{
			data.rectal.add( {} );
		}

		function onDeleteRectal()
		{
			var checkedItems = $("rectalTable").getCheckedItems();
			if(checkedItems.length > 0)
			{
				if(confirm("Deleted selected rectal contrast documentation?"))
				{
					checkedItems.each(function(item) { data.rectal.remove(item); });
					$("rectalCheckAllNone").checked = false;
				}
			}
			else
			{
				alert("Nothing selected");
			}
		}

		function onRectalCheckAllNone()
		{
			data.rectal.each(function(item) { $("rectalTable").setItemCheckState(item, $("rectalCheckAllNone").checked); });
		}

		function initIVAccessTable()
		{
			var ivAccessTable = Table.createTable($("ivAccessTable"), 
				{editInPlace: true, flow: true, checkBoxes: true },
				[
					{  label: "Type",
						cellType: "choice",
						choices: ["New", "Existing"],
						getValue: function(item) { return item.type; },
						setValue: function(item, value) { item.type = value; },
						getError: function(item) { return null; }
					},
					{  label: "Accessed By",
						cellType: "lookup",
						lookup: function(query) { return Ris.resolveStaffName(query); },
						getValue: function(item) { return item.staff; },
						setValue: function(item, value) { item.staff = value; },
						getError: function(item) { return null; }
					},
					{  label: "Site",
						cellType: "choice",
						choices: ["Hand", "Antecubital", "Wrist", "Forearm", "Central Line", "Other"],
						getValue: function(item) { return item.bodySite; },
						setValue: function(item, value) { item.bodySite = value; },
						getError: function(item) { return null; }
					},
					{
						label: "Site (con'd)",
						cellType: "text",
						getValue: function(item) { return item.bodySiteOther; },
						setValue: function(item, value) { item.bodySiteOther = value; },
						getVisible: function(item) { return item.bodySite == "Other"; },
						getError: function(item) { return null; }
					},
					{  label: "Side",
						cellType: "choice",
						choices: ["RT", "LT", "Bilateral"],
						getValue: function(item) { return item.side; },
						setValue: function(item, value) { item.side = value; },
						getError: function(item) { return null; }
					}
				]);

			ivAccessTable.errorProvider = errorProvider;
			ivAccessTable.bindItems(data.ivAccess);
		}
		
		function onAddIVAccess()
		{
			data.ivAccess.add( {} );
		}

		function onDeleteIVAccess()
		{
			var checkedItems = $("ivAccessTable").getCheckedItems();
			if(checkedItems.length > 0)
			{
				if(confirm("Deleted selected IV access documentation?"))
				{
					checkedItems.each(function(item) { data.ivAccess.remove(item); });
					$("ivAccessCheckAllNone").checked = false;
				}
			}
			else
			{
				alert("Nothing selected");
			}
		}

		function onIVAccessCheckAllNone()
		{
			data.ivAccess.each(function(item) { $("ivAccessTable").setItemCheckState(item, $("ivAccessCheckAllNone").checked); });
		}			

		function initIVContrastTable()
		{
			var ivContrastTable = Table.createTable($("ivContrastTable"), 
				{editInPlace: true, flow: true, checkBoxes: true },
				[
					{  label: "Type",
						cellType: "choice",
						choices: ivContrastTypes,
						getValue: function(item) { return item.type; },
						setValue: function(item, value) { item.type = value; },
						getError: function(item) { return null; }
					},
					{  label: "Amount",
						cellType: "text",
						size: 10,
						getValue: function(item) { return item.amount; },
						setValue: function(item, value) { item.amount = value; },
						getError: function(item) { return null; }
					},
					{  label: "Pump/Rate",
						cellType: "choice",
						choices: ["Yes", "No"],
						getValue: function(item) { return item.pumprate; },
						setValue: function(item, value) { item.pumprate = value; },
						getError: function(item) { return null; }
					},
					{  label: "Rate",
						cellType: "text",
						size: 10,
						getValue: function(item) { return item.rate; },
						setValue: function(item, value) { item.rate = value; },
						getVisible: function(item) { return item.pumprate == "Yes"; },
						getError: function(item) { return null; }
					},
					{  label: "Power Injection",
						cellType: "choice",
						choices: ["Yes", "No"],
						getValue: function(item) { return item.powerinjection; },
						setValue: function(item, value) { item.powerinjection = value; },
						getError: function(item) { return null; }
					},
					{  label: "Lot #",
						cellType: "text",
						size: 10,
						getValue: function(item) { return item.lot; },
						setValue: function(item, value) { item.lot = value; },
						getError: function(item) { return null; }
					},
					{  label: "Admin By",
						cellType: "lookup",
						lookup: function(query) { return Ris.resolveStaffName(query); },
						getValue: function(item) { return item.staff; },
						setValue: function(item, value) { item.staff = value; },
						getError: function(item) { return null; }
					},
					{  label: "Time",
						cellType: "datetime",
						getValue: function(item) { return item.time; },
						setValue: function(item, value) { item.time = value; },
						getError: function(item) { return null; }
					}
				]);

			ivContrastTable.errorProvider = errorProvider;
			ivContrastTable.bindItems(data.ivContrast);
		}

		function onAddIVContrast()
		{
			data.ivContrast.add( {} );
		}

		function onDeleteIVContrast()
		{
			var checkedItems = $("ivContrastTable").getCheckedItems();
			if(checkedItems.length > 0)
			{
				if(confirm("Deleted selected IV contrasts documentation?"))
				{
					checkedItems.each(function(item) { data.ivContrast.remove(item); });
					$("ivContrastCheckAllNone").checked = false;
				}
			}
			else
			{
				alert("Nothing selected");
			}
		}

		function onIVContrastCheckAllNone()
		{
			data.ivContrast.each(function(item) { $("ivContrastTable").setItemCheckState(item, $("ivContrastCheckAllNone").checked); });
		}

		function initPacsTable()
		{
			var table = Table.createTable($("pacsTable"), { editInPlace: true, flow: true, checkBoxes: false },
			[
				{	label: "# of Exams",
					cellType: "text",
					getValue: function(item) { return item.numberOfExams; },
					setValue: function(item, value) { item.numberOfExams = value; },
					getError: function(item) { return null; }
				},
				{	label: "# of Series",
					cellType: "text",
					getValue: function(item) { return item.numberOfSeries; },
					setValue: function(item, value) { item.numberOfSeries = value; },
					getError: function(item) { return null; }
				},
				{	label: "Server Checked By",
					cellType: "lookup",
					lookup: function(query) { return Ris.resolveStaffName(query); },
					getValue: function(item) { return item.serverCheckedBy; },
					setValue: function(item, value) { item.serverCheckedBy = value; },
					getError: function(item) { return null; }
				}
			]);

			table.errorProvider = errorProvider;   // share errorProvider with the rest of the form
			table.bindItems([data.pacs]);
		}

		function initStaffTable()
		{
			var table = Table.createTable($("staffTable"), { editInPlace: true, flow: true, checkBoxes: true },
			[
				{	label: "Staff",
					cellType: "lookup",
					lookup: function(query) { return Ris.resolveStaffName(query); },
					getValue: function(item) { return item.staffPerson; },
					setValue: function(item, value) { item.staffPerson = value; },
					getError: function(item) { return null; }
				},
				{	label: "Role",
					cellType: "readonly",
					getValue: function(item) { return item.staffPerson ? item.staffPerson.staffType : null; }
				}
			]);

			table.errorProvider = errorProvider;   // share errorProvider with the rest of the form
			table.bindItems(data.staff);
		}

		function onAddStaff()
		{
			data.staff.add( {} );   // add an empty item
		}

		function onDeleteStaff()
		{
			var checkedItems = $("staffTable").getCheckedItems();
			if(checkedItems.length > 0)
			{
				if(confirm("Deleted selected staff?"))
				{
					checkedItems.each(function(item) { data.staff.remove(item); });
					$("staffCheckAllNone").checked = false;
				}
			}
			else
			{
				alert("Nothing selected");
			}
		}

		function onStaffCheckAllNone()
		{
			data.staff.each(function(item) { $("staffTable").setItemCheckState(item, $("staffCheckAllNone").checked); });
		}

		function initPostProcessingTable()
		{
			var postProcessingTable = Table.createTable($("postProcessingTable"), { editInPlace: true, flow: true, checkBoxes: false },
			[
				{	label: "Reconstructions Performed",
					cellType: "choice",
					choices: ["TODO"],
					getValue: function(item) { return item.reconstructionsPerformed; },
					setValue: function(item, value) { item.reconstructionsPerformed = value; },
					getError: function(item) { return null; }
				},
				{	label: "3D Processing Protocol",
					cellType: "choice",
					choices: ["Ca Score", "Number of vessels probed", "Ejection Fractions done", "3D model", "measurements", "number of FCPC's"],
					getValue: function(item) { return item.processingProtocol; },
					setValue: function(item, value) { item.processingProtocol = value; },
					getError: function(item) { return null; }
				},
				{	label: "Time Spent",
					cellType: "text",
					getValue: function(item) { return item.timeSpent; },
					setValue: function(item, value) { item.timeSpent = value; },
					getError: function(item) { return null; }
				},
				{	label: "Workstation",
					cellType: "choice",
					choices: ["Vitrea 1", "ADW 1", "Other"],
					getValue: function(item) { return item.workstation; },
					setValue: function(item, value) { item.workstation = value; },
					getError: function(item) { return null; }
				},
				{	label: "Workstation (con'd)",
					cellType: "text",
					getValue: function(item) { return item.workstationOther; },
					setValue: function(item, value) { item.workstationOther = value; },
					getVisible: function(item) { return item.workstation == "Other"; },
					getError: function(item) { return null; }
				}
			]);

			postProcessingTable.errorProvider = errorProvider;   // share errorProvider with the rest of the form
			postProcessingTable.bindItems([data.postProcessing]);

			var postProcessingCommentsTable = Table.createTable($("postProcessingCommentsTable"), { editInPlace: true, flow: true, checkBoxes: false },
			[
				{	label: "Additional Comments",
					cellType: "textarea",
					getValue: function(item) { return item.additionalComments; },
					setValue: function(item, value) { item.additionalComments = value; },
					getError: function(item) { return null; }
				}
			]);

			postProcessingCommentsTable.errorProvider = errorProvider;   // share errorProvider with the rest of the form
			postProcessingCommentsTable.bindItems([data.postProcessing]);
		}

		//////////////////////////////////////////////////////////////////////////
		// RIS integration API
		function hasValidationErrors()
		{
			return errorProvider.hasErrors();
		}

		function showValidation(show)
		{
			errorProvider.setVisible(show);
		}

		function saveData()
		{
			data.capturePageUrl = window.location;
			Ris.setTag("Documentation", JSML.create(data, "data"));
			Ris.setTag("ExamLocation", data.acquisition.equipment);
		}
		//////////////////////////////////////////////////////////////////////////
	</script>
</head>
<body onload="javascript: onBodyLoad()" onresize="javascript: scaleWidth()">
	<form id="myForm">
		<p class="sectionheading">Exam Acquisition</p>
		<table id="acquisitionTable" width="100%">
			<tr><td class="tableheading"></td></tr>
		</table>
		<p class="sectionheading">Oral Contrast</p>
		<div class="addDeleteButtons">
			<input type="button" value="Add" onclick="javascript: onAddOral()" />
			<input type="button" value="Delete" onclick="javascript: onDeleteOral()" />
		</div>
		<table id="oralTable" border="1" width="100%">
			<tr>
				<td colspan="2"><input id="oralCheckAllNone" type="checkbox" onclick="javascript:onOralCheckAllNone()">Select All/None</input></td>
			</tr>
		</table>
		<p class="sectionheading">Rectal Contrast</p>
		<div class="addDeleteButtons">
			<input type="button" value="Add" onclick="javascript: onAddRectal()" />
			<input type="button" value="Delete" onclick="javascript: onDeleteRectal()" />
		</div>
		<table id="rectalTable" border="1" width="100%">
			<tr>
				<td colspan="2"><input id="rectalCheckAllNone" type="checkbox" onclick="javascript:onRectalCheckAllNone()">Select All/None</input></td>
			</tr>
		</table>
		<p class="sectionheading">IV - Access</p>
		<div class="addDeleteButtons">
			<input type="button" value="Add" onclick="javascript: onAddIVAccess()" />
			<input type="button" value="Delete" onclick="javascript: onDeleteIVAccess()" />
		</div>
		<table id="ivAccessTable" border="1" width="100%">
			<tr>
				<td colspan="2"><input id="ivAccessCheckAllNone" type="checkbox" onclick="javascript:onIVAccessCheckAllNone()">Select All/None</input></td>
			</tr>
		</table>
		<p class="sectionheading">IV - Contrast</p>
		<div class="addDeleteButtons">
			<input type="button" value="Add" onclick="javascript: onAddIVContrast()" />
			<input type="button" value="Delete" onclick="javascript: onDeleteIVContrast()" />
		</div>
		<table id="ivContrastTable" border="1" width="100%">
			<tr>
				<td colspan="2"><input id="ivContrastCheckAllNone" type="checkbox" onclick="javascript:onIVContrastCheckAllNone()">Select All/None</input></td>
			</tr>
		</table>
		<p class="sectionheading">PACS</p>
		<table id="pacsTable" width="100%">
			<tr>
				<td class="tableheading"></td>
			</tr>
		</table>
		<p class="sectionheading">Cardiac/3D Processing</p>
		<p class="subsectionheading">Staff</p>
		<div class="addDeleteButtons">
			<input type="button" value="Add" onclick="javascript: onAddStaff()" />
			<input type="button" value="Delete" onclick="javascript: onDeleteStaff()" />
		</div>
		<table id="staffTable" border="1" width="100%">
			<tr>
				<td colspan="2"><label><input id="staffCheckAllNone" type="checkbox" onclick="javascript: onStaffCheckAllNone()" />Select All/None</label></td>
			</tr>
		</table>
		<p class="subsectionheading">Post-Processing</p>
		<table id="postProcessingTable" width="100%">
			<tr><td class="tableheading"></td></tr>
		</table>
		<table id="postProcessingCommentsTable" width="100%">
			<tr><td class="tableheading"></td></tr>
		</table>
	</form>
</body>
</html>

