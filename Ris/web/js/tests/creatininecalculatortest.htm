<html>
 <head>
  <title>Test Page for CreatinineCalculator</title>
  <script src="../jsunit/app/jsUnitCore.js"></script>
  <script src="../jsx.js"></script>
  <script src="../creatininecalculator.js"></script>
 </head>
 <body>
  <script>
    /*global CreatinineCalculator, assertEquals, assertNotNull */

    function testInvalidSex() {
        try {
            CreatinineCalculator.calculateClearance(20, 90, "InvalidSex", 200);
        }
        catch (e)
        {
            assertNotNull("Invalid sex exception thrown", e);
        }
    }
    
    function testInvalidWeight()
    {
        try {
            CreatinineCalculator.calculateClearance(20, 0, "Male", 200);
        }
        catch (e)
        {
            assertNotNull("Invalid sex exception thrown", e);
        }
    }
    
    function testInvalidAge()
    {
        try {
            CreatinineCalculator.calculateClearance(0, 90, "Male", 200);
        }
        catch (e)
        {
            assertNotNull("Invalid sex exception thrown", e);
        }
    }
    
    function testValidInput()
    {
        assertEquals("Male", 64.80, CreatinineCalculator.calculateClearance(20, 90, "Male", 200).roundTo(2));
        assertEquals("Female", 55.08, CreatinineCalculator.calculateClearance(20, 90, "Female", 200).roundTo(2));

        assertEquals("Male", 24.00, CreatinineCalculator.calculateClearance(60, 50, "Male", 200).roundTo(2));
        assertEquals("Female", 20.40, CreatinineCalculator.calculateClearance(60, 50, "Female", 200).roundTo(2));

        assertEquals("Male", 12.00, CreatinineCalculator.calculateClearance(60, 50, "Male", 400).roundTo(2));
        assertEquals("Female", 10.20, CreatinineCalculator.calculateClearance(60, 50, "Female", 400).roundTo(2));
    }

    function testGFRInvalidSex() {
        try {
            CreatinineCalculator.calculateGFR(100, 50, "InvalidSex", true, true);
        }
        catch (e)
        {
            assertNotNull("Invalid sex exception thrown", e);
        }
    }
    
    function testGFRInvalidAge()
    {
        try {
            CreatinineCalculator.calculateGFR(100, 10, "Male", true, true);
        }
        catch (e)
        {
            assertNotNull("Invalid age exception thrown", e);
        }
        try {
            CreatinineCalculator.calculateGFR(100, 90, "Male", true, true);
        }
        catch (e)
        {
            assertNotNull("Invalid age exception thrown", e);
        }
    }
    
    function testGFRValidInput()
	{
        assertEquals("Base", 83, CreatinineCalculator.calculateGFR(100, 50, "Male", true, true));
        assertEquals("Female", 62, CreatinineCalculator.calculateGFR(100, 50, "Female", true, true));
        assertEquals("Level Changed", 37, CreatinineCalculator.calculateGFR(200, 50, "Male", true, true));
        assertEquals("Other race", 69, CreatinineCalculator.calculateGFR(100, 50, "Male", false, true));
        assertEquals("Not Recalibrated", 88, CreatinineCalculator.calculateGFR(100, 50, "Male", true, false));
	}
    </script>
 </body>
</html>
