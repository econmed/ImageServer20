<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ColumnHeadingGroupElement" xml:space="preserve">
    <value>Group-Element</value>
  </data>
  <data name="ColumnHeadingLength" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="ColumnHeadingTagName" xml:space="preserve">
    <value>Tag Name</value>
  </data>
  <data name="ColumnHeadingValue" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="ColumnHeadingVR" xml:space="preserve">
    <value>VR</value>
  </data>
  <data name="MenuAnonymizeStudy" xml:space="preserve">
    <value>Anonymize</value>
  </data>
  <data name="MenuCreate" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="MenuDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="MenuDicomEditor" xml:space="preserve">
    <value>DICOM Editor</value>
  </data>
  <data name="MenuDumpFiles" xml:space="preserve">
    <value>Dump Files</value>
  </data>
  <data name="MenuNext" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="MenuPrevious" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="MenuQuickAnonymize" xml:space="preserve">
    <value>Quick anonymize</value>
  </data>
  <data name="MenuReplicate" xml:space="preserve">
    <value>Replicate</value>
  </data>
  <data name="MenuRevert" xml:space="preserve">
    <value>Revert</value>
  </data>
  <data name="MenuSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="MessageAnonymizingStudy" xml:space="preserve">
    <value>Anonymizing Study ...</value>
  </data>
  <data name="MessageConfirmAnonymizeAllFiles" xml:space="preserve">
    <value>Would you like to anonymize *all* loaded files in addition to this one?</value>
  </data>
  <data name="MessageConfirmDeleteSelectedTags" xml:space="preserve">
    <value>The selected tag(s) will be deleted.  Are you sure you want to continue?</value>
  </data>
  <data name="MessageConfirmDeleteSelectedTagsFromAllFiles" xml:space="preserve">
    <value>Do you want to delete the selected tags from *all* the other loaded files in addition to the one selected?</value>
  </data>
  <data name="MessageConfirmReplicateTagsInAllFiles" xml:space="preserve">
    <value>The selected tag(s) and their values will be replicated in *all* loaded files.  Are you sure you want to continue?</value>
  </data>
  <data name="MessageConfirmRevert" xml:space="preserve">
    <value>The edits will be reverted to the last saved state.  Are you sure you want to continue?</value>
  </data>
  <data name="MessageConfirmRevertAllFiles" xml:space="preserve">
    <value>Would you like to revert *all* loaded files in addition to this one?</value>
  </data>
  <data name="MessageConfirmSaveAllFiles" xml:space="preserve">
    <value>The changes will be saved to *all* loaded files and the original files will be overwritten.  Are you sure you want to continue?</value>
  </data>
  <data name="MessageDumpProgressBar" xml:space="preserve">
    <value>Processing Files...</value>
  </data>
  <data name="MessageFailedDump" xml:space="preserve">
    <value>DICOM Dump operation failed.  File(s) in selection may not be DICOM.</value>
  </data>
  <data name="MessageFormatStudyMustBeDeletedManually" xml:space="preserve">
    <value>An error occurred while attempting to anonymize the study.  The files should be manually deleted from {0}.</value>
  </data>
  <data name="MessageNoTagsWereDeleted" xml:space="preserve">
    <value>No tags were deleted.  This is often because the selection only contains Sequence Items, Sequence Delimiter Items, and Item Delimiter Items which cannot be deleted.</value>
  </data>
  <data name="MessagePatientIdCannotBeEmpty" xml:space="preserve">
    <value>The patient Id cannot be empty.</value>
  </data>
  <data name="MessagePatientsNameCannotBeEmpty" xml:space="preserve">
    <value>The patient's name cannot be empty.</value>
  </data>
  <data name="MessagePleaseSelectAnImage" xml:space="preserve">
    <value>This tool is only valid when a DICOM Image is selected.</value>
  </data>
  <data name="MessageTagCannotBeCreated" xml:space="preserve">
    <value>The tag cannot be created.  Please ensure that the values are properly entered and are appropriate for the tag being created.</value>
  </data>
  <data name="TitleAnonymizeStudy" xml:space="preserve">
    <value>Anonymize Study</value>
  </data>
  <data name="TitleCreateTag" xml:space="preserve">
    <value>Create Tag</value>
  </data>
  <data name="TitleDicomEditor" xml:space="preserve">
    <value>DICOM Editor</value>
  </data>
  <data name="ToolbarAnonymizeStudy" xml:space="preserve">
    <value>Anonymize</value>
  </data>
  <data name="ToolbarCreate" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="ToolbarDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="ToolbarNext" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="ToolbarPrevious" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="ToolbarQuickAnonymize" xml:space="preserve">
    <value>Quick anonymize</value>
  </data>
  <data name="ToolbarReplicate" xml:space="preserve">
    <value>Replicate</value>
  </data>
  <data name="ToolbarRevert" xml:space="preserve">
    <value>Revert</value>
  </data>
  <data name="ToolbarSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="TooltipAnonymizeStudy" xml:space="preserve">
    <value>Anonymize Selected Study</value>
  </data>
  <data name="TooltipCreate" xml:space="preserve">
    <value>Create new tag</value>
  </data>
  <data name="TooltipDelete" xml:space="preserve">
    <value>Delete tag</value>
  </data>
  <data name="TooltipNext" xml:space="preserve">
    <value>Next image</value>
  </data>
  <data name="TooltipPrevious" xml:space="preserve">
    <value>Previous image</value>
  </data>
  <data name="TooltipQuickAnonymize" xml:space="preserve">
    <value>Anonymize all loaded files with one click</value>
  </data>
  <data name="TooltipReplicate" xml:space="preserve">
    <value>Replicates selected tag to all loaded files</value>
  </data>
  <data name="TooltipRevert" xml:space="preserve">
    <value>Revert changes</value>
  </data>
  <data name="TooltipSave" xml:space="preserve">
    <value>Saves edits</value>
  </data>
</root>