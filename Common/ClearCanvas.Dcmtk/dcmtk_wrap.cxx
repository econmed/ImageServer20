/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#if defined(_WIN32) || defined(__CYGWIN32__)
#  define DllExport   __declspec( dllexport )
#  define SWIGSTDCALL __stdcall
#else
#  define DllExport  
#  define SWIGSTDCALL
#endif 


/* Support for throwing C# exceptions from C/C++ */
typedef enum {
  SWIG_CSharpException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpArgumentOutOfRangeException,
  SWIG_CSharpNullReferenceException
} SWIG_CSharpExceptionCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpExceptions_t;

static SWIG_CSharpExceptions_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL },
  { SWIG_CSharpNullReferenceException, NULL } };

static void SWIG_CSharpThrowException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpExceptions_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}


#ifdef __cplusplus
extern "C" 
#endif
DllExport void SWIGSTDCALL SWIGRegisterExceptionCallbacks_DCMTK(SWIG_CSharpExceptionCallback_t systemException,
                                                          SWIG_CSharpExceptionCallback_t outOfMemory, 
                                                          SWIG_CSharpExceptionCallback_t indexOutOfRange, 
                                                          SWIG_CSharpExceptionCallback_t divideByZero, 
                                                          SWIG_CSharpExceptionCallback_t argumentOutOfRange,
                                                          SWIG_CSharpExceptionCallback_t nullReference) {
  SWIG_csharp_exceptions[SWIG_CSharpException].callback = systemException;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemory;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRange;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZero;
  SWIG_csharp_exceptions[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRange;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReference;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
DllExport void SWIGSTDCALL SWIGRegisterStringCallback_DCMTK(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}

/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpThrowException(SWIG_CSharpArgumentOutOfRangeException, msg); return nullreturn; } else


#pragma warning (disable:4267)
#pragma warning (disable:4800)


#include <string>


// Leave out undefined constructors and operators in OFGlobal.h
#define SWIG

#include "osconfig.h"
#include "ofglobal.h"
#include "oflist.h"
#include "ofstring.h"
#include "oftypes.h"
#include "ofcond.h"
#include "ofdate.h"
#include "ofdatime.h"
#include "oftime.h"

extern OFConditionConst const ECC_Normal;
extern OFCondition const EC_Normal;
extern OFCondition const EC_IllegalParameter;
extern OFCondition const EC_MemoryExhausted;

// various headers
#include "dctypes.h"
#include "dcswap.h"
#include "dcistrma.h"
#include "dcostrma.h"
#include "dcvr.h"
#include "dcxfer.h"
#include "dcuid.h"
#include "dcvm.h"
#include "dcdefine.h"
#include "dcdebug.h"

// tags and dictionary
#include "dctagkey.h"
#include "dctag.h"
#include "dcdicent.h"
#include "dchashdi.h"
#include "dcdict.h"
#include "dcdeftag.h"

// basis classes
#include "dcobject.h"
#include "dcelem.h"

// classes for management of sequences and other lists
#include "dcitem.h"
#include "dcmetinf.h"
#include "dcdatset.h"
#include "dcsequen.h"
#include "dcfilefo.h"
#include "dcdicdir.h"
#include "dcpixseq.h"

// element classes for string management (8-bit)
#include "dcbytstr.h"
#include "dcvrae.h"
#include "dcvras.h"
#include "dcvrcs.h"
#include "dcvrda.h"
#include "dcvrds.h"
#include "dcvrdt.h"
#include "dcvris.h"
#include "dcvrtm.h"
#include "dcvrui.h"

// element classes for string management (8-bit and/or 16-bit in later extensions)
#include "dcchrstr.h"
#include "dcvrlo.h"
#include "dcvrlt.h"
#include "dcvrpn.h"
#include "dcvrsh.h"
#include "dcvrst.h"
#include "dcvrut.h"

// element class for byte and word value representations
#include "dcvrobow.h"
#include "dcpixel.h"
#include "dcovlay.h"

// element classes for binary value fields
#include "dcvrat.h"
#include "dcvrss.h"
#include "dcvrus.h"
#include "dcvrsl.h"
#include "dcvrul.h"
#include "dcvrulup.h"
#include "dcvrfl.h"
#include "dcvrfd.h"
#include "dcvrof.h"



DcmElement* castToDcmElement(DcmObject* pObj)
{
	return dynamic_cast<DcmElement*> (pObj);
}


extern OFGlobal<bool > dcmEnableUnknownVRGeneration;
extern OFGlobal<bool > dcmEnableUnlimitedTextVRGeneration;
extern E_ByteOrder const gLocalByteOrder;
extern char const *dcmStorageSOPClassUIDs[];
extern int const numberOfDcmStorageSOPClassUIDs;
extern char const *dcmImageSOPClassUIDs[];
extern int const numberOfDcmImageSOPClassUIDs;
extern OFGlobal<int > DcmDebugLevel;
extern GlobalDcmDataDictionary dcmDataDict;
extern OFGlobal<bool > dcmEnableAutomaticInputDataCorrection;
extern OFGlobal<bool > dcmAcceptOddAttributeLength;

#include "assoc.h"
#include "cond.h"
#include "dcasccff.h"
#include "dcasccfg.h"
#include "dicom.h"
#include "dimse.h"
#include "diutil.h"
#include "lst.h"

extern OFCondition const ASC_BADPRESENTATIONCONTEXTID;
extern OFCondition const ASC_MISSINGTRANSFERSYNTAX;
extern OFCondition const ASC_NULLKEY;
extern OFCondition const ASC_SHUTDOWNAPPLICATION;
extern OFCondition const DIMSE_BADCOMMANDTYPE;
extern OFCondition const DIMSE_BADDATA;
extern OFCondition const DIMSE_BADMESSAGE;
extern OFCondition const DIMSE_ILLEGALASSOCIATION;
extern OFCondition const DIMSE_NODATAAVAILABLE;
extern OFCondition const DIMSE_NOVALIDPRESENTATIONCONTEXTID;
extern OFCondition const DIMSE_NULLKEY;
extern OFCondition const DIMSE_OUTOFRESOURCES;
extern OFCondition const DIMSE_PARSEFAILED;
extern OFCondition const DIMSE_READPDVFAILED;
extern OFCondition const DIMSE_RECEIVEFAILED;
extern OFCondition const DIMSE_SENDFAILED;
extern OFCondition const DIMSE_UNEXPECTEDPDVTYPE;
extern OFCondition const DIMSE_NODATADICT;
extern OFCondition const DUL_ASSOCIATIONREJECTED;
extern OFCondition const DUL_ILLEGALACCEPT;
extern OFCondition const DUL_ILLEGALKEY;
extern OFCondition const DUL_ILLEGALPDU;
extern OFCondition const DUL_ILLEGALPDULENGTH;
extern OFCondition const DUL_ILLEGALREQUEST;
extern OFCondition const DUL_INCORRECTBUFFERLENGTH;
extern OFCondition const DUL_INSUFFICIENTBUFFERLENGTH;
extern OFCondition const DUL_LISTERROR;
extern OFCondition const DUL_NETWORKCLOSED;
extern OFCondition const DUL_NOASSOCIATIONREQUEST;
extern OFCondition const DUL_NOPDVS;
extern OFCondition const DUL_NULLKEY;
extern OFCondition const DUL_PCTRANSLATIONFAILURE;
extern OFCondition const DUL_PDATAPDUARRIVED;
extern OFCondition const DUL_PEERABORTEDASSOCIATION;
extern OFCondition const DUL_PEERREQUESTEDRELEASE;
extern OFCondition const DUL_READTIMEOUT;
extern OFCondition const DUL_REQUESTASSOCIATIONFAILED;
extern OFCondition const DUL_UNEXPECTEDPDU;
extern OFCondition const DUL_UNSUPPORTEDPEERPROTOCOL;
extern OFCondition const DUL_WRONGDATATYPE;
extern OFGlobal<bool > dcmPeerRequiresExactUIDCopy;
extern OFGlobal<Uint32 > dcmMaxOutgoingPDUSize;

typedef union {
		/* requests */
		T_DIMSE_C_StoreRQ CStoreRQ;
		T_DIMSE_C_EchoRQ  CEchoRQ;
		T_DIMSE_C_FindRQ  CFindRQ;
		T_DIMSE_C_GetRQ   CGetRQ;
		T_DIMSE_C_MoveRQ  CMoveRQ;
		T_DIMSE_C_CancelRQ  CCancelRQ;
		T_DIMSE_N_EventReportRQ NEventReportRQ;
		T_DIMSE_N_GetRQ NGetRQ;
		T_DIMSE_N_SetRQ NSetRQ;
		T_DIMSE_N_ActionRQ NActionRQ;
		T_DIMSE_N_CreateRQ NCreateRQ;
		T_DIMSE_N_DeleteRQ NDeleteRQ;

		/* responses */
		T_DIMSE_C_StoreRSP CStoreRSP;
		T_DIMSE_C_EchoRSP CEchoRSP;
		T_DIMSE_C_FindRSP CFindRSP;
		T_DIMSE_C_GetRSP  CGetRSP;
		T_DIMSE_C_MoveRSP CMoveRSP;
		T_DIMSE_N_EventReportRSP NEventReportRSP;
		T_DIMSE_N_GetRSP NGetRSP;
		T_DIMSE_N_SetRSP NSetRSP;
		T_DIMSE_N_ActionRSP NActionRSP;
		T_DIMSE_N_CreateRSP NCreateRSP;
		T_DIMSE_N_DeleteRSP NDeleteRSP;
	} T_DIMSE_Message_msg;


extern E_GrpLenEncoding g_dimse_send_groupLength_encoding;
extern E_EncodingType g_dimse_send_sequenceType_encoding;
extern bool g_dimse_save_dimse_data;

#ifdef __cplusplus
extern "C" {
#endif

DllExport void SWIGSTDCALL CSharp_set_OFListLinkBase_next(void * jarg1, void * jarg2) {
    OFListLinkBase *arg1 = (OFListLinkBase *) 0 ;
    OFListLinkBase *arg2 = (OFListLinkBase *) 0 ;
    
    arg1 = (OFListLinkBase *)jarg1; 
    arg2 = (OFListLinkBase *)jarg2; 
    if (arg1) (arg1)->next = arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_OFListLinkBase_next(void * jarg1) {
    void * jresult = 0 ;
    OFListLinkBase *arg1 = (OFListLinkBase *) 0 ;
    OFListLinkBase *result;
    
    arg1 = (OFListLinkBase *)jarg1; 
    result = (OFListLinkBase *) ((arg1)->next);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_OFListLinkBase_prev(void * jarg1, void * jarg2) {
    OFListLinkBase *arg1 = (OFListLinkBase *) 0 ;
    OFListLinkBase *arg2 = (OFListLinkBase *) 0 ;
    
    arg1 = (OFListLinkBase *)jarg1; 
    arg2 = (OFListLinkBase *)jarg2; 
    if (arg1) (arg1)->prev = arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_OFListLinkBase_prev(void * jarg1) {
    void * jresult = 0 ;
    OFListLinkBase *arg1 = (OFListLinkBase *) 0 ;
    OFListLinkBase *result;
    
    arg1 = (OFListLinkBase *)jarg1; 
    result = (OFListLinkBase *) ((arg1)->prev);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_OFListLinkBase_dummy(void * jarg1, unsigned int jarg2) {
    OFListLinkBase *arg1 = (OFListLinkBase *) 0 ;
    bool arg2 ;
    
    arg1 = (OFListLinkBase *)jarg1; 
    arg2 = jarg2 ? true : false; 
    if (arg1) (arg1)->dummy = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_OFListLinkBase_dummy(void * jarg1) {
    unsigned int jresult = 0 ;
    OFListLinkBase *arg1 = (OFListLinkBase *) 0 ;
    bool result;
    
    arg1 = (OFListLinkBase *)jarg1; 
    result = (bool) ((arg1)->dummy);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFListLinkBase() {
    void * jresult = 0 ;
    OFListLinkBase *result;
    
    result = (OFListLinkBase *)new OFListLinkBase();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_OFListLinkBase(void * jarg1) {
    OFListLinkBase *arg1 = (OFListLinkBase *) 0 ;
    
    arg1 = (OFListLinkBase *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_new_OFListBase() {
    void * jresult = 0 ;
    OFListBase *result;
    
    result = (OFListBase *)new OFListBase();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_OFListBase(void * jarg1) {
    OFListBase *arg1 = (OFListBase *) 0 ;
    
    arg1 = (OFListBase *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_OFListBase_base_begin(void * jarg1) {
    void * jresult = 0 ;
    OFListBase *arg1 = (OFListBase *) 0 ;
    OFListLinkBase *result;
    
    arg1 = (OFListBase *)jarg1; 
    result = (OFListLinkBase *)((OFListBase const *)arg1)->base_begin();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_OFListBase_base_end(void * jarg1) {
    void * jresult = 0 ;
    OFListBase *arg1 = (OFListBase *) 0 ;
    OFListLinkBase *result;
    
    arg1 = (OFListBase *)jarg1; 
    result = (OFListLinkBase *)((OFListBase const *)arg1)->base_end();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFListBase_base_empty(void * jarg1) {
    unsigned int jresult = 0 ;
    OFListBase *arg1 = (OFListBase *) 0 ;
    bool result;
    
    arg1 = (OFListBase *)jarg1; 
    result = (bool)((OFListBase const *)arg1)->base_empty();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_OFListBase_base_size(void * jarg1) {
    unsigned long jresult = 0 ;
    OFListBase *arg1 = (OFListBase *) 0 ;
    size_t result;
    
    arg1 = (OFListBase *)jarg1; 
    result = ((OFListBase const *)arg1)->base_size();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_OFListBase_base_insert(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    OFListBase *arg1 = (OFListBase *) 0 ;
    OFListLinkBase *arg2 = (OFListLinkBase *) 0 ;
    OFListLinkBase *arg3 = (OFListLinkBase *) 0 ;
    OFListLinkBase *result;
    
    arg1 = (OFListBase *)jarg1; 
    arg2 = (OFListLinkBase *)jarg2; 
    arg3 = (OFListLinkBase *)jarg3; 
    result = (OFListLinkBase *)(arg1)->base_insert(arg2,arg3);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_OFListBase_base_erase(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    OFListBase *arg1 = (OFListBase *) 0 ;
    OFListLinkBase *arg2 = (OFListLinkBase *) 0 ;
    OFListLinkBase *result;
    
    arg1 = (OFListBase *)jarg1; 
    arg2 = (OFListLinkBase *)jarg2; 
    result = (OFListLinkBase *)(arg1)->base_erase(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_OFListBase_base_splice(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
    OFListBase *arg1 = (OFListBase *) 0 ;
    OFListLinkBase *arg2 = (OFListLinkBase *) 0 ;
    OFListLinkBase *arg3 = (OFListLinkBase *) 0 ;
    OFListLinkBase *arg4 = (OFListLinkBase *) 0 ;
    
    arg1 = (OFListBase *)jarg1; 
    arg2 = (OFListLinkBase *)jarg2; 
    arg3 = (OFListLinkBase *)jarg3; 
    arg4 = (OFListLinkBase *)jarg4; 
    (arg1)->base_splice(arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_OFListBase_base_clear(void * jarg1) {
    OFListBase *arg1 = (OFListBase *) 0 ;
    
    arg1 = (OFListBase *)jarg1; 
    (arg1)->base_clear();
    
}


DllExport void SWIGSTDCALL CSharp_delete_OFConditionBase(void * jarg1) {
    OFConditionBase *arg1 = (OFConditionBase *) 0 ;
    
    arg1 = (OFConditionBase *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_OFConditionBase_clone(void * jarg1) {
    void * jresult = 0 ;
    OFConditionBase *arg1 = (OFConditionBase *) 0 ;
    OFConditionBase *result;
    
    arg1 = (OFConditionBase *)jarg1; 
    result = (OFConditionBase *)((OFConditionBase const *)arg1)->clone();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_OFConditionBase_codeAndModule(void * jarg1) {
    unsigned long jresult = 0 ;
    OFConditionBase *arg1 = (OFConditionBase *) 0 ;
    unsigned long result;
    
    arg1 = (OFConditionBase *)jarg1; 
    result = (unsigned long)((OFConditionBase const *)arg1)->codeAndModule();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_OFConditionBase_status(void * jarg1) {
    int jresult = 0 ;
    OFConditionBase *arg1 = (OFConditionBase *) 0 ;
    OFStatus result;
    
    arg1 = (OFConditionBase *)jarg1; 
    result = (OFStatus)((OFConditionBase const *)arg1)->status();
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_OFConditionBase_text(void * jarg1) {
    char * jresult = 0 ;
    OFConditionBase *arg1 = (OFConditionBase *) 0 ;
    char *result;
    
    arg1 = (OFConditionBase *)jarg1; 
    result = (char *)((OFConditionBase const *)arg1)->text();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFConditionBase_deletable(void * jarg1) {
    unsigned int jresult = 0 ;
    OFConditionBase *arg1 = (OFConditionBase *) 0 ;
    bool result;
    
    arg1 = (OFConditionBase *)jarg1; 
    result = (bool)((OFConditionBase const *)arg1)->deletable();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_OFConditionBase_module(void * jarg1) {
    unsigned short jresult = 0 ;
    OFConditionBase *arg1 = (OFConditionBase *) 0 ;
    unsigned short result;
    
    arg1 = (OFConditionBase *)jarg1; 
    result = (unsigned short)((OFConditionBase const *)arg1)->module();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_OFConditionBase_code(void * jarg1) {
    unsigned short jresult = 0 ;
    OFConditionBase *arg1 = (OFConditionBase *) 0 ;
    unsigned short result;
    
    arg1 = (OFConditionBase *)jarg1; 
    result = (unsigned short)((OFConditionBase const *)arg1)->code();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFConditionConst__SWIG_0(unsigned short jarg1, unsigned short jarg2, int jarg3, char * jarg4) {
    void * jresult = 0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    OFStatus arg3 ;
    char *arg4 = (char *) 0 ;
    OFConditionConst *result;
    
    arg1 = (unsigned short)jarg1; 
    arg2 = (unsigned short)jarg2; 
    arg3 = (OFStatus)jarg3; 
    arg4 = jarg4; 
    result = (OFConditionConst *)new OFConditionConst(arg1,arg2,(OFStatus )arg3,(char const *)arg4);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFConditionConst__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    OFConditionConst *arg1 = 0 ;
    OFConditionConst *result;
    
    arg1 = (OFConditionConst *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFConditionConst const & reference is null");
    } 
    result = (OFConditionConst *)new OFConditionConst((OFConditionConst const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_OFConditionConst(void * jarg1) {
    OFConditionConst *arg1 = (OFConditionConst *) 0 ;
    
    arg1 = (OFConditionConst *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_OFConditionConst_clone(void * jarg1) {
    void * jresult = 0 ;
    OFConditionConst *arg1 = (OFConditionConst *) 0 ;
    OFConditionBase *result;
    
    arg1 = (OFConditionConst *)jarg1; 
    result = (OFConditionBase *)((OFConditionConst const *)arg1)->clone();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_OFConditionConst_codeAndModule(void * jarg1) {
    unsigned long jresult = 0 ;
    OFConditionConst *arg1 = (OFConditionConst *) 0 ;
    unsigned long result;
    
    arg1 = (OFConditionConst *)jarg1; 
    result = (unsigned long)((OFConditionConst const *)arg1)->codeAndModule();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_OFConditionConst_status(void * jarg1) {
    int jresult = 0 ;
    OFConditionConst *arg1 = (OFConditionConst *) 0 ;
    OFStatus result;
    
    arg1 = (OFConditionConst *)jarg1; 
    result = (OFStatus)((OFConditionConst const *)arg1)->status();
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_OFConditionConst_text(void * jarg1) {
    char * jresult = 0 ;
    OFConditionConst *arg1 = (OFConditionConst *) 0 ;
    char *result;
    
    arg1 = (OFConditionConst *)jarg1; 
    result = (char *)((OFConditionConst const *)arg1)->text();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFConditionConst_deletable(void * jarg1) {
    unsigned int jresult = 0 ;
    OFConditionConst *arg1 = (OFConditionConst *) 0 ;
    bool result;
    
    arg1 = (OFConditionConst *)jarg1; 
    result = (bool)((OFConditionConst const *)arg1)->deletable();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFConditionString__SWIG_0(unsigned short jarg1, unsigned short jarg2, int jarg3, char * jarg4) {
    void * jresult = 0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    OFStatus arg3 ;
    char *arg4 = (char *) 0 ;
    OFConditionString *result;
    
    arg1 = (unsigned short)jarg1; 
    arg2 = (unsigned short)jarg2; 
    arg3 = (OFStatus)jarg3; 
    arg4 = jarg4; 
    result = (OFConditionString *)new OFConditionString(arg1,arg2,(OFStatus )arg3,(char const *)arg4);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFConditionString__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    OFConditionString *arg1 = 0 ;
    OFConditionString *result;
    
    arg1 = (OFConditionString *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFConditionString const & reference is null");
    } 
    result = (OFConditionString *)new OFConditionString((OFConditionString const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_OFConditionString(void * jarg1) {
    OFConditionString *arg1 = (OFConditionString *) 0 ;
    
    arg1 = (OFConditionString *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_OFConditionString_clone(void * jarg1) {
    void * jresult = 0 ;
    OFConditionString *arg1 = (OFConditionString *) 0 ;
    OFConditionBase *result;
    
    arg1 = (OFConditionString *)jarg1; 
    result = (OFConditionBase *)((OFConditionString const *)arg1)->clone();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_OFConditionString_codeAndModule(void * jarg1) {
    unsigned long jresult = 0 ;
    OFConditionString *arg1 = (OFConditionString *) 0 ;
    unsigned long result;
    
    arg1 = (OFConditionString *)jarg1; 
    result = (unsigned long)((OFConditionString const *)arg1)->codeAndModule();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_OFConditionString_status(void * jarg1) {
    int jresult = 0 ;
    OFConditionString *arg1 = (OFConditionString *) 0 ;
    OFStatus result;
    
    arg1 = (OFConditionString *)jarg1; 
    result = (OFStatus)((OFConditionString const *)arg1)->status();
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_OFConditionString_text(void * jarg1) {
    char * jresult = 0 ;
    OFConditionString *arg1 = (OFConditionString *) 0 ;
    char *result;
    
    arg1 = (OFConditionString *)jarg1; 
    result = (char *)((OFConditionString const *)arg1)->text();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFConditionString_deletable(void * jarg1) {
    unsigned int jresult = 0 ;
    OFConditionString *arg1 = (OFConditionString *) 0 ;
    bool result;
    
    arg1 = (OFConditionString *)jarg1; 
    result = (bool)((OFConditionString const *)arg1)->deletable();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_ECC_Normal() {
    void * jresult = 0 ;
    OFConditionConst *result;
    
    result = (OFConditionConst *)&ECC_Normal;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFCondition__SWIG_0(void * jarg1) {
    void * jresult = 0 ;
    OFConditionString *arg1 = (OFConditionString *) 0 ;
    OFCondition *result;
    
    arg1 = (OFConditionString *)jarg1; 
    result = (OFCondition *)new OFCondition(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFCondition__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    OFConditionConst *arg1 = 0 ;
    OFCondition *result;
    
    arg1 = (OFConditionConst *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFConditionConst const & reference is null");
    } 
    result = (OFCondition *)new OFCondition((OFConditionConst const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFCondition__SWIG_2() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)new OFCondition();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFCondition__SWIG_3(void * jarg1) {
    void * jresult = 0 ;
    OFCondition *arg1 = 0 ;
    OFCondition *result;
    
    arg1 = (OFCondition *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFCondition const & reference is null");
    } 
    result = (OFCondition *)new OFCondition((OFCondition const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_OFCondition(void * jarg1) {
    OFCondition *arg1 = (OFCondition *) 0 ;
    
    arg1 = (OFCondition *)jarg1; 
    delete arg1;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_OFCondition_module(void * jarg1) {
    unsigned short jresult = 0 ;
    OFCondition *arg1 = (OFCondition *) 0 ;
    unsigned short result;
    
    arg1 = (OFCondition *)jarg1; 
    result = (unsigned short)((OFCondition const *)arg1)->module();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_OFCondition_code(void * jarg1) {
    unsigned short jresult = 0 ;
    OFCondition *arg1 = (OFCondition *) 0 ;
    unsigned short result;
    
    arg1 = (OFCondition *)jarg1; 
    result = (unsigned short)((OFCondition const *)arg1)->code();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_OFCondition_status(void * jarg1) {
    int jresult = 0 ;
    OFCondition *arg1 = (OFCondition *) 0 ;
    OFStatus result;
    
    arg1 = (OFCondition *)jarg1; 
    result = (OFStatus)((OFCondition const *)arg1)->status();
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_OFCondition_text(void * jarg1) {
    char * jresult = 0 ;
    OFCondition *arg1 = (OFCondition *) 0 ;
    char *result;
    
    arg1 = (OFCondition *)jarg1; 
    result = (char *)((OFCondition const *)arg1)->text();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFCondition_good(void * jarg1) {
    unsigned int jresult = 0 ;
    OFCondition *arg1 = (OFCondition *) 0 ;
    bool result;
    
    arg1 = (OFCondition *)jarg1; 
    result = (bool)((OFCondition const *)arg1)->good();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFCondition_bad(void * jarg1) {
    unsigned int jresult = 0 ;
    OFCondition *arg1 = (OFCondition *) 0 ;
    bool result;
    
    arg1 = (OFCondition *)jarg1; 
    result = (bool)((OFCondition const *)arg1)->bad();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_EC_Normal() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&EC_Normal;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_EC_IllegalParameter() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&EC_IllegalParameter;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_EC_MemoryExhausted() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&EC_MemoryExhausted;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFDate__SWIG_0() {
    void * jresult = 0 ;
    OFDate *result;
    
    result = (OFDate *)new OFDate();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFDate__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    OFDate *arg1 = 0 ;
    OFDate *result;
    
    arg1 = (OFDate *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDate const & reference is null");
    } 
    result = (OFDate *)new OFDate((OFDate const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFDate__SWIG_2(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    unsigned int arg1 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    OFDate *result;
    
    arg1 = (unsigned int)jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    result = (OFDate *)new OFDate(arg1,arg2,arg3);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_OFDate(void * jarg1) {
    OFDate *arg1 = (OFDate *) 0 ;
    
    arg1 = (OFDate *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_OFDate_clear(void * jarg1) {
    OFDate *arg1 = (OFDate *) 0 ;
    
    arg1 = (OFDate *)jarg1; 
    (arg1)->clear();
    
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_isValid(void * jarg1) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    bool result;
    
    arg1 = (OFDate *)jarg1; 
    result = (bool)((OFDate const *)arg1)->isValid();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_setDate(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    bool result;
    
    arg1 = (OFDate *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    arg4 = (unsigned int)jarg4; 
    result = (bool)(arg1)->setDate(arg2,arg3,arg4);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_setYear(void * jarg1, unsigned int jarg2) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    unsigned int arg2 ;
    bool result;
    
    arg1 = (OFDate *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    result = (bool)(arg1)->setYear(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_setMonth(void * jarg1, unsigned int jarg2) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    unsigned int arg2 ;
    bool result;
    
    arg1 = (OFDate *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    result = (bool)(arg1)->setMonth(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_setDay(void * jarg1, unsigned int jarg2) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    unsigned int arg2 ;
    bool result;
    
    arg1 = (OFDate *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    result = (bool)(arg1)->setDay(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_setCurrentDate(void * jarg1) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    bool result;
    
    arg1 = (OFDate *)jarg1; 
    result = (bool)(arg1)->setCurrentDate();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_setISOFormattedDate(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    
    arg1 = (OFDate *)jarg1; 
    if (!jarg2) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    result = (bool)(arg1)->setISOFormattedDate((std::string const &)*arg2);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_getYear(void * jarg1) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    unsigned int result;
    
    arg1 = (OFDate *)jarg1; 
    result = (unsigned int)((OFDate const *)arg1)->getYear();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_getMonth(void * jarg1) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    unsigned int result;
    
    arg1 = (OFDate *)jarg1; 
    result = (unsigned int)((OFDate const *)arg1)->getMonth();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_getDay(void * jarg1) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    unsigned int result;
    
    arg1 = (OFDate *)jarg1; 
    result = (unsigned int)((OFDate const *)arg1)->getDay();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_getISOFormattedDate__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool result;
    
    arg1 = (OFDate *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = (bool)((OFDate const *)arg1)->getISOFormattedDate(*arg2,arg3);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDate_getISOFormattedDate__SWIG_1(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    OFDate *arg1 = (OFDate *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    
    arg1 = (OFDate *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (bool)((OFDate const *)arg1)->getISOFormattedDate(*arg2);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_OFDate_getCurrentDate() {
    void * jresult = 0 ;
    OFDate result;
    
    result = OFDate::getCurrentDate();
    
    jresult = new OFDate((OFDate &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFDateTime__SWIG_0() {
    void * jresult = 0 ;
    OFDateTime *result;
    
    result = (OFDateTime *)new OFDateTime();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFDateTime__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    OFDateTime *arg1 = 0 ;
    OFDateTime *result;
    
    arg1 = (OFDateTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDateTime const & reference is null");
    } 
    result = (OFDateTime *)new OFDateTime((OFDateTime const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFDateTime__SWIG_2(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    OFDate *arg1 = 0 ;
    OFTime *arg2 = 0 ;
    OFDateTime *result;
    
    arg1 = (OFDate *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDate const & reference is null");
    } 
    arg2 = (OFTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime const & reference is null");
    } 
    result = (OFDateTime *)new OFDateTime((OFDate const &)*arg1,(OFTime const &)*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_OFDateTime(void * jarg1) {
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    
    arg1 = (OFDateTime *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_OFDateTime_clear(void * jarg1) {
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    
    arg1 = (OFDateTime *)jarg1; 
    (arg1)->clear();
    
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_isValid(void * jarg1) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    result = (bool)((OFDateTime const *)arg1)->isValid();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_setDateTime__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, double jarg7, double jarg8) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    unsigned int arg5 ;
    unsigned int arg6 ;
    double arg7 ;
    double arg8 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    arg4 = (unsigned int)jarg4; 
    arg5 = (unsigned int)jarg5; 
    arg6 = (unsigned int)jarg6; 
    arg7 = (double)jarg7; 
    arg8 = (double)jarg8; 
    result = (bool)(arg1)->setDateTime(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_setDateTime__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, double jarg7) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    unsigned int arg5 ;
    unsigned int arg6 ;
    double arg7 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    arg4 = (unsigned int)jarg4; 
    arg5 = (unsigned int)jarg5; 
    arg6 = (unsigned int)jarg6; 
    arg7 = (double)jarg7; 
    result = (bool)(arg1)->setDateTime(arg2,arg3,arg4,arg5,arg6,arg7);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_setDate(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    OFDate *arg2 = 0 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    arg2 = (OFDate *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDate const & reference is null");
    } 
    result = (bool)(arg1)->setDate((OFDate const &)*arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_setTime(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    OFTime *arg2 = 0 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    arg2 = (OFTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime const & reference is null");
    } 
    result = (bool)(arg1)->setTime((OFTime const &)*arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_setCurrentDateTime(void * jarg1) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    result = (bool)(arg1)->setCurrentDateTime();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_setISOFormattedDateTime(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    if (!jarg2) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    result = (bool)(arg1)->setISOFormattedDateTime((std::string const &)*arg2);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_OFDateTime_getDate(void * jarg1) {
    void * jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    OFDate *result;
    
    arg1 = (OFDateTime *)jarg1; 
    {
        OFDate const &_result_ref = ((OFDateTime const *)arg1)->getDate();
        result = (OFDate *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_OFDateTime_getTime(void * jarg1) {
    void * jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    OFTime *result;
    
    arg1 = (OFDateTime *)jarg1; 
    {
        OFTime const &_result_ref = ((OFDateTime const *)arg1)->getTime();
        result = (OFTime *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_getISOFormattedDateTime__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    result = (bool)((OFDateTime const *)arg1)->getISOFormattedDateTime(*arg2,arg3,arg4,arg5,arg6);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_getISOFormattedDateTime__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    result = (bool)((OFDateTime const *)arg1)->getISOFormattedDateTime(*arg2,arg3,arg4,arg5);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_getISOFormattedDateTime__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    result = (bool)((OFDateTime const *)arg1)->getISOFormattedDateTime(*arg2,arg3,arg4);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_getISOFormattedDateTime__SWIG_3(void * jarg1, char * jarg2, unsigned int jarg3) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = (bool)((OFDateTime const *)arg1)->getISOFormattedDateTime(*arg2,arg3);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_getISOFormattedDateTime__SWIG_4(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (bool)((OFDateTime const *)arg1)->getISOFormattedDateTime(*arg2);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFDateTime_getISOFormattedDateTime__SWIG_5(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7) {
    unsigned int jresult = 0 ;
    OFDateTime *arg1 = (OFDateTime *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    std::string *arg7 = 0 ;
    bool result;
    
    arg1 = (OFDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    if (!jarg7) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg7_str(jarg7);
    arg7 = &arg7_str; 
    result = (bool)((OFDateTime const *)arg1)->getISOFormattedDateTime(*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg7_str.c_str() != 0 && arg7_str.length() > 0)
    {
        memcpy(jarg7, arg7_str.c_str(), arg7_str.length());
        jarg7[arg7_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_OFDateTime_getCurrentDateTime() {
    void * jresult = 0 ;
    OFDateTime result;
    
    result = OFDateTime::getCurrentDateTime();
    
    jresult = new OFDateTime((OFDateTime &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFTime__SWIG_0() {
    void * jresult = 0 ;
    OFTime *result;
    
    result = (OFTime *)new OFTime();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFTime__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    OFTime *arg1 = 0 ;
    OFTime *result;
    
    arg1 = (OFTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime const & reference is null");
    } 
    result = (OFTime *)new OFTime((OFTime const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFTime__SWIG_2(unsigned int jarg1, unsigned int jarg2, double jarg3, double jarg4) {
    void * jresult = 0 ;
    unsigned int arg1 ;
    unsigned int arg2 ;
    double arg3 ;
    double arg4 ;
    OFTime *result;
    
    arg1 = (unsigned int)jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    result = (OFTime *)new OFTime(arg1,arg2,arg3,arg4);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_OFTime__SWIG_3(unsigned int jarg1, unsigned int jarg2, double jarg3) {
    void * jresult = 0 ;
    unsigned int arg1 ;
    unsigned int arg2 ;
    double arg3 ;
    OFTime *result;
    
    arg1 = (unsigned int)jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (double)jarg3; 
    result = (OFTime *)new OFTime(arg1,arg2,arg3);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_OFTime(void * jarg1) {
    OFTime *arg1 = (OFTime *) 0 ;
    
    arg1 = (OFTime *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_OFTime_clear(void * jarg1) {
    OFTime *arg1 = (OFTime *) 0 ;
    
    arg1 = (OFTime *)jarg1; 
    (arg1)->clear();
    
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_isValid(void * jarg1) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    result = (bool)((OFTime const *)arg1)->isValid();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setTime__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, double jarg4, double jarg5) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    double arg4 ;
    double arg5 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    result = (bool)(arg1)->setTime(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setTime__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, double jarg4) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    double arg4 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    arg4 = (double)jarg4; 
    result = (bool)(arg1)->setTime(arg2,arg3,arg4);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setHour(void * jarg1, unsigned int jarg2) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    unsigned int arg2 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    result = (bool)(arg1)->setHour(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setMinute(void * jarg1, unsigned int jarg2) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    unsigned int arg2 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    result = (bool)(arg1)->setMinute(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setSecond(void * jarg1, double jarg2) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double arg2 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (double)jarg2; 
    result = (bool)(arg1)->setSecond(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setTimeZone__SWIG_0(void * jarg1, double jarg2) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double arg2 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (double)jarg2; 
    result = (bool)(arg1)->setTimeZone(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setTimeZone__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    result = (bool)(arg1)->setTimeZone(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setTimeInSeconds__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double arg2 ;
    double arg3 ;
    bool arg4 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (bool)(arg1)->setTimeInSeconds(arg2,arg3,arg4);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setTimeInSeconds__SWIG_1(void * jarg1, double jarg2, double jarg3) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double arg2 ;
    double arg3 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    result = (bool)(arg1)->setTimeInSeconds(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setTimeInSeconds__SWIG_2(void * jarg1, double jarg2) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double arg2 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (double)jarg2; 
    result = (bool)(arg1)->setTimeInSeconds(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setTimeInHours__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double arg2 ;
    double arg3 ;
    bool arg4 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (bool)(arg1)->setTimeInHours(arg2,arg3,arg4);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setTimeInHours__SWIG_1(void * jarg1, double jarg2, double jarg3) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double arg2 ;
    double arg3 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    result = (bool)(arg1)->setTimeInHours(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setTimeInHours__SWIG_2(void * jarg1, double jarg2) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double arg2 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = (double)jarg2; 
    result = (bool)(arg1)->setTimeInHours(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setCurrentTime(void * jarg1) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    result = (bool)(arg1)->setCurrentTime();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_setISOFormattedTime(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    if (!jarg2) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    result = (bool)(arg1)->setISOFormattedTime((std::string const &)*arg2);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_getHour(void * jarg1) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    unsigned int result;
    
    arg1 = (OFTime *)jarg1; 
    result = (unsigned int)((OFTime const *)arg1)->getHour();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_getMinute(void * jarg1) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    unsigned int result;
    
    arg1 = (OFTime *)jarg1; 
    result = (unsigned int)((OFTime const *)arg1)->getMinute();
    
    jresult = result; 
    return jresult;
}


DllExport double SWIGSTDCALL CSharp_OFTime_getSecond(void * jarg1) {
    double jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double result;
    
    arg1 = (OFTime *)jarg1; 
    result = (double)((OFTime const *)arg1)->getSecond();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_getIntSecond(void * jarg1) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    unsigned int result;
    
    arg1 = (OFTime *)jarg1; 
    result = (unsigned int)((OFTime const *)arg1)->getIntSecond();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_getMilliSecond(void * jarg1) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    unsigned int result;
    
    arg1 = (OFTime *)jarg1; 
    result = (unsigned int)((OFTime const *)arg1)->getMilliSecond();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_getMicroSecond(void * jarg1) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    unsigned int result;
    
    arg1 = (OFTime *)jarg1; 
    result = (unsigned int)((OFTime const *)arg1)->getMicroSecond();
    
    jresult = result; 
    return jresult;
}


DllExport double SWIGSTDCALL CSharp_OFTime_getTimeZone(void * jarg1) {
    double jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double result;
    
    arg1 = (OFTime *)jarg1; 
    result = (double)((OFTime const *)arg1)->getTimeZone();
    
    jresult = result; 
    return jresult;
}


DllExport double SWIGSTDCALL CSharp_OFTime_getTimeInSeconds__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
    double jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    bool arg2 ;
    bool arg3 ;
    double result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = jarg2 ? true : false; 
    arg3 = jarg3 ? true : false; 
    result = (double)((OFTime const *)arg1)->getTimeInSeconds(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport double SWIGSTDCALL CSharp_OFTime_getTimeInSeconds__SWIG_1(void * jarg1, unsigned int jarg2) {
    double jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    bool arg2 ;
    double result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (double)((OFTime const *)arg1)->getTimeInSeconds(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport double SWIGSTDCALL CSharp_OFTime_getTimeInSeconds__SWIG_2(void * jarg1) {
    double jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double result;
    
    arg1 = (OFTime *)jarg1; 
    result = (double)((OFTime const *)arg1)->getTimeInSeconds();
    
    jresult = result; 
    return jresult;
}


DllExport double SWIGSTDCALL CSharp_OFTime_getTimeInHours__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
    double jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    bool arg2 ;
    bool arg3 ;
    double result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = jarg2 ? true : false; 
    arg3 = jarg3 ? true : false; 
    result = (double)((OFTime const *)arg1)->getTimeInHours(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport double SWIGSTDCALL CSharp_OFTime_getTimeInHours__SWIG_1(void * jarg1, unsigned int jarg2) {
    double jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    bool arg2 ;
    double result;
    
    arg1 = (OFTime *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (double)((OFTime const *)arg1)->getTimeInHours(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport double SWIGSTDCALL CSharp_OFTime_getTimeInHours__SWIG_2(void * jarg1) {
    double jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    double result;
    
    arg1 = (OFTime *)jarg1; 
    result = (double)((OFTime const *)arg1)->getTimeInHours();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_OFTime_getCoordinatedUniversalTime(void * jarg1) {
    void * jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    OFTime result;
    
    arg1 = (OFTime *)jarg1; 
    result = ((OFTime const *)arg1)->getCoordinatedUniversalTime();
    
    jresult = new OFTime((OFTime &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_OFTime_getLocalTime(void * jarg1) {
    void * jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    OFTime result;
    
    arg1 = (OFTime *)jarg1; 
    result = ((OFTime const *)arg1)->getLocalTime();
    
    jresult = new OFTime((OFTime &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_getISOFormattedTime__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    result = (bool)((OFTime const *)arg1)->getISOFormattedTime(*arg2,arg3,arg4,arg5,arg6);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_getISOFormattedTime__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    result = (bool)((OFTime const *)arg1)->getISOFormattedTime(*arg2,arg3,arg4,arg5);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_getISOFormattedTime__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    result = (bool)((OFTime const *)arg1)->getISOFormattedTime(*arg2,arg3,arg4);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_getISOFormattedTime__SWIG_3(void * jarg1, char * jarg2, unsigned int jarg3) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = (bool)((OFTime const *)arg1)->getISOFormattedTime(*arg2,arg3);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_OFTime_getISOFormattedTime__SWIG_4(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    OFTime *arg1 = (OFTime *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    
    arg1 = (OFTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (bool)((OFTime const *)arg1)->getISOFormattedTime(*arg2);
    
    jresult = result; 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_OFTime_getCurrentTime() {
    void * jresult = 0 ;
    OFTime result;
    
    result = OFTime::getCurrentTime();
    
    jresult = new OFTime((OFTime &)result); 
    return jresult;
}


DllExport double SWIGSTDCALL CSharp_OFTime_getLocalTimeZone() {
    double jresult = 0 ;
    double result;
    
    result = (double)OFTime::getLocalTimeZone();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_castToDcmElement(void * jarg1) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmElement *result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (DcmElement *)castToDcmElement(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DCTYPES_H() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_DCMTK_XML_NAMESPACE_URI() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "http://dicom.offis.de/dcmtk";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCMTypes_PF_shortenLongTagValues() {
    unsigned long jresult = 0 ;
    size_t result;
    
    result = (size_t)DCMTypes::PF_shortenLongTagValues;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCMTypes_PF_showTreeStructure() {
    unsigned long jresult = 0 ;
    size_t result;
    
    result = (size_t)DCMTypes::PF_showTreeStructure;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCMTypes_PF_lastEntry() {
    unsigned long jresult = 0 ;
    size_t result;
    
    result = (size_t)DCMTypes::PF_lastEntry;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCMTypes_XF_addDocumentType() {
    unsigned long jresult = 0 ;
    size_t result;
    
    result = (size_t)DCMTypes::XF_addDocumentType;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCMTypes_XF_writeBinaryData() {
    unsigned long jresult = 0 ;
    size_t result;
    
    result = (size_t)DCMTypes::XF_writeBinaryData;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCMTypes_XF_encodeBase64() {
    unsigned long jresult = 0 ;
    size_t result;
    
    result = (size_t)DCMTypes::XF_encodeBase64;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCMTypes_XF_useDcmtkNamespace() {
    unsigned long jresult = 0 ;
    size_t result;
    
    result = (size_t)DCMTypes::XF_useDcmtkNamespace;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCMTypes_XF_embedDocumentType() {
    unsigned long jresult = 0 ;
    size_t result;
    
    result = (size_t)DCMTypes::XF_embedDocumentType;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DCMTypes() {
    void * jresult = 0 ;
    DCMTypes *result;
    
    result = (DCMTypes *)new DCMTypes();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DCMTypes(void * jarg1) {
    DCMTypes *arg1 = (DCMTypes *) 0 ;
    
    arg1 = (DCMTypes *)jarg1; 
    delete arg1;
    
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCM_UndefinedLength() {
    unsigned long jresult = 0 ;
    Uint32 result;
    
    result = (Uint32)(Uint32)DCM_UndefinedLength;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_swapIfNecessary(int jarg1, int jarg2, void * jarg3, unsigned long jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    E_ByteOrder arg1 ;
    E_ByteOrder arg2 ;
    void *arg3 = (void *) 0 ;
    Uint32 arg4 ;
    size_t arg5 ;
    OFCondition result;
    
    arg1 = (E_ByteOrder)jarg1; 
    arg2 = (E_ByteOrder)jarg2; 
    arg3 = (void *)jarg3; 
    arg4 = (Uint32)jarg4; 
    arg5 = (size_t)jarg5; 
    result = swapIfNecessary((E_ByteOrder )arg1,(E_ByteOrder )arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_swapBytes(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
    void *arg1 = (void *) 0 ;
    Uint32 arg2 ;
    size_t arg3 ;
    
    arg1 = (void *)jarg1; 
    arg2 = (Uint32)jarg2; 
    arg3 = (size_t)jarg3; 
    swapBytes(arg1,arg2,arg3);
    
}


DllExport unsigned short SWIGSTDCALL CSharp_swapShort(unsigned short jarg1) {
    unsigned short jresult = 0 ;
    Uint16 arg1 ;
    Uint16 result;
    
    arg1 = (Uint16)jarg1; 
    result = (Uint16)swapShort(arg1);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_swap2Bytes(const unsigned char* jarg1) {
    Uint8 *arg1 = (Uint8 *) 0 ;
    
    arg1 = (Uint8 *)jarg1; 
    swap2Bytes(arg1);
    
}


DllExport void SWIGSTDCALL CSharp_swap4Bytes(const unsigned char* jarg1) {
    Uint8 *arg1 = (Uint8 *) 0 ;
    
    arg1 = (Uint8 *)jarg1; 
    swap4Bytes(arg1);
    
}


DllExport void SWIGSTDCALL CSharp_delete_DcmProducer(void * jarg1) {
    DcmProducer *arg1 = (DcmProducer *) 0 ;
    
    arg1 = (DcmProducer *)jarg1; 
    delete arg1;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmProducer_good(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmProducer *arg1 = (DcmProducer *) 0 ;
    bool result;
    
    arg1 = (DcmProducer *)jarg1; 
    result = (bool)((DcmProducer const *)arg1)->good();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmProducer_status(void * jarg1) {
    void * jresult = 0 ;
    DcmProducer *arg1 = (DcmProducer *) 0 ;
    OFCondition result;
    
    arg1 = (DcmProducer *)jarg1; 
    result = ((DcmProducer const *)arg1)->status();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmProducer_eos(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmProducer *arg1 = (DcmProducer *) 0 ;
    bool result;
    
    arg1 = (DcmProducer *)jarg1; 
    result = (bool)((DcmProducer const *)arg1)->eos();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmProducer_avail(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmProducer *arg1 = (DcmProducer *) 0 ;
    Uint32 result;
    
    arg1 = (DcmProducer *)jarg1; 
    result = (Uint32)((DcmProducer const *)arg1)->avail();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmProducer_read(void * jarg1, void * jarg2, unsigned long jarg3) {
    unsigned long jresult = 0 ;
    DcmProducer *arg1 = (DcmProducer *) 0 ;
    void *arg2 = (void *) 0 ;
    Uint32 arg3 ;
    Uint32 result;
    
    arg1 = (DcmProducer *)jarg1; 
    arg2 = (void *)jarg2; 
    arg3 = (Uint32)jarg3; 
    result = (Uint32)(arg1)->read(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmProducer_skip(void * jarg1, unsigned long jarg2) {
    unsigned long jresult = 0 ;
    DcmProducer *arg1 = (DcmProducer *) 0 ;
    Uint32 arg2 ;
    Uint32 result;
    
    arg1 = (DcmProducer *)jarg1; 
    arg2 = (Uint32)jarg2; 
    result = (Uint32)(arg1)->skip(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmProducer_putback(void * jarg1, unsigned long jarg2) {
    DcmProducer *arg1 = (DcmProducer *) 0 ;
    Uint32 arg2 ;
    
    arg1 = (DcmProducer *)jarg1; 
    arg2 = (Uint32)jarg2; 
    (arg1)->putback(arg2);
    
}


DllExport void SWIGSTDCALL CSharp_delete_DcmInputFilter(void * jarg1) {
    DcmInputFilter *arg1 = (DcmInputFilter *) 0 ;
    
    arg1 = (DcmInputFilter *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_DcmInputFilter_append(void * jarg1, void * jarg2) {
    DcmInputFilter *arg1 = (DcmInputFilter *) 0 ;
    DcmProducer *arg2 = 0 ;
    
    arg1 = (DcmInputFilter *)jarg1; 
    arg2 = (DcmProducer *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmProducer & reference is null");
    } 
    (arg1)->append(*arg2);
    
}


DllExport void SWIGSTDCALL CSharp_delete_DcmInputStreamFactory(void * jarg1) {
    DcmInputStreamFactory *arg1 = (DcmInputStreamFactory *) 0 ;
    
    arg1 = (DcmInputStreamFactory *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_DcmInputStreamFactory_create(void * jarg1) {
    void * jresult = 0 ;
    DcmInputStreamFactory *arg1 = (DcmInputStreamFactory *) 0 ;
    DcmInputStream *result;
    
    arg1 = (DcmInputStreamFactory *)jarg1; 
    result = (DcmInputStream *)((DcmInputStreamFactory const *)arg1)->create();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmInputStreamFactory_clone(void * jarg1) {
    void * jresult = 0 ;
    DcmInputStreamFactory *arg1 = (DcmInputStreamFactory *) 0 ;
    DcmInputStreamFactory *result;
    
    arg1 = (DcmInputStreamFactory *)jarg1; 
    result = (DcmInputStreamFactory *)((DcmInputStreamFactory const *)arg1)->clone();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmInputStream(void * jarg1) {
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    
    arg1 = (DcmInputStream *)jarg1; 
    delete arg1;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmInputStream_good(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    bool result;
    
    arg1 = (DcmInputStream *)jarg1; 
    result = (bool)((DcmInputStream const *)arg1)->good();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmInputStream_status(void * jarg1) {
    void * jresult = 0 ;
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    OFCondition result;
    
    arg1 = (DcmInputStream *)jarg1; 
    result = ((DcmInputStream const *)arg1)->status();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmInputStream_eos(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    bool result;
    
    arg1 = (DcmInputStream *)jarg1; 
    result = (bool)((DcmInputStream const *)arg1)->eos();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmInputStream_avail(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    Uint32 result;
    
    arg1 = (DcmInputStream *)jarg1; 
    result = (Uint32)((DcmInputStream const *)arg1)->avail();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmInputStream_read(void * jarg1, void * jarg2, unsigned long jarg3) {
    unsigned long jresult = 0 ;
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    void *arg2 = (void *) 0 ;
    Uint32 arg3 ;
    Uint32 result;
    
    arg1 = (DcmInputStream *)jarg1; 
    arg2 = (void *)jarg2; 
    arg3 = (Uint32)jarg3; 
    result = (Uint32)(arg1)->read(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmInputStream_skip(void * jarg1, unsigned long jarg2) {
    unsigned long jresult = 0 ;
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    Uint32 arg2 ;
    Uint32 result;
    
    arg1 = (DcmInputStream *)jarg1; 
    arg2 = (Uint32)jarg2; 
    result = (Uint32)(arg1)->skip(arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmInputStream_tell(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    Uint32 result;
    
    arg1 = (DcmInputStream *)jarg1; 
    result = (Uint32)((DcmInputStream const *)arg1)->tell();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmInputStream_installCompressionFilter(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    E_StreamCompression arg2 ;
    OFCondition result;
    
    arg1 = (DcmInputStream *)jarg1; 
    arg2 = (E_StreamCompression)jarg2; 
    result = (arg1)->installCompressionFilter((E_StreamCompression )arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmInputStream_newFactory(void * jarg1) {
    void * jresult = 0 ;
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    DcmInputStreamFactory *result;
    
    arg1 = (DcmInputStream *)jarg1; 
    result = (DcmInputStreamFactory *)((DcmInputStream const *)arg1)->newFactory();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmInputStream_mark(void * jarg1) {
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    
    arg1 = (DcmInputStream *)jarg1; 
    (arg1)->mark();
    
}


DllExport void SWIGSTDCALL CSharp_DcmInputStream_putback(void * jarg1) {
    DcmInputStream *arg1 = (DcmInputStream *) 0 ;
    
    arg1 = (DcmInputStream *)jarg1; 
    (arg1)->putback();
    
}


DllExport void SWIGSTDCALL CSharp_delete_DcmConsumer(void * jarg1) {
    DcmConsumer *arg1 = (DcmConsumer *) 0 ;
    
    arg1 = (DcmConsumer *)jarg1; 
    delete arg1;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmConsumer_good(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmConsumer *arg1 = (DcmConsumer *) 0 ;
    bool result;
    
    arg1 = (DcmConsumer *)jarg1; 
    result = (bool)((DcmConsumer const *)arg1)->good();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmConsumer_status(void * jarg1) {
    void * jresult = 0 ;
    DcmConsumer *arg1 = (DcmConsumer *) 0 ;
    OFCondition result;
    
    arg1 = (DcmConsumer *)jarg1; 
    result = ((DcmConsumer const *)arg1)->status();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmConsumer_isFlushed(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmConsumer *arg1 = (DcmConsumer *) 0 ;
    bool result;
    
    arg1 = (DcmConsumer *)jarg1; 
    result = (bool)((DcmConsumer const *)arg1)->isFlushed();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmConsumer_avail(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmConsumer *arg1 = (DcmConsumer *) 0 ;
    Uint32 result;
    
    arg1 = (DcmConsumer *)jarg1; 
    result = (Uint32)((DcmConsumer const *)arg1)->avail();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmConsumer_write(void * jarg1, void * jarg2, unsigned long jarg3) {
    unsigned long jresult = 0 ;
    DcmConsumer *arg1 = (DcmConsumer *) 0 ;
    void *arg2 = (void *) 0 ;
    Uint32 arg3 ;
    Uint32 result;
    
    arg1 = (DcmConsumer *)jarg1; 
    arg2 = (void *)jarg2; 
    arg3 = (Uint32)jarg3; 
    result = (Uint32)(arg1)->write((void const *)arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmConsumer_flush(void * jarg1) {
    DcmConsumer *arg1 = (DcmConsumer *) 0 ;
    
    arg1 = (DcmConsumer *)jarg1; 
    (arg1)->flush();
    
}


DllExport void SWIGSTDCALL CSharp_delete_DcmOutputFilter(void * jarg1) {
    DcmOutputFilter *arg1 = (DcmOutputFilter *) 0 ;
    
    arg1 = (DcmOutputFilter *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_DcmOutputFilter_append(void * jarg1, void * jarg2) {
    DcmOutputFilter *arg1 = (DcmOutputFilter *) 0 ;
    DcmConsumer *arg2 = 0 ;
    
    arg1 = (DcmOutputFilter *)jarg1; 
    arg2 = (DcmConsumer *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmConsumer & reference is null");
    } 
    (arg1)->append(*arg2);
    
}


DllExport void SWIGSTDCALL CSharp_delete_DcmOutputStream(void * jarg1) {
    DcmOutputStream *arg1 = (DcmOutputStream *) 0 ;
    
    arg1 = (DcmOutputStream *)jarg1; 
    delete arg1;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmOutputStream_good(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmOutputStream *arg1 = (DcmOutputStream *) 0 ;
    bool result;
    
    arg1 = (DcmOutputStream *)jarg1; 
    result = (bool)((DcmOutputStream const *)arg1)->good();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOutputStream_status(void * jarg1) {
    void * jresult = 0 ;
    DcmOutputStream *arg1 = (DcmOutputStream *) 0 ;
    OFCondition result;
    
    arg1 = (DcmOutputStream *)jarg1; 
    result = ((DcmOutputStream const *)arg1)->status();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmOutputStream_isFlushed(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmOutputStream *arg1 = (DcmOutputStream *) 0 ;
    bool result;
    
    arg1 = (DcmOutputStream *)jarg1; 
    result = (bool)((DcmOutputStream const *)arg1)->isFlushed();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmOutputStream_avail(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmOutputStream *arg1 = (DcmOutputStream *) 0 ;
    Uint32 result;
    
    arg1 = (DcmOutputStream *)jarg1; 
    result = (Uint32)((DcmOutputStream const *)arg1)->avail();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmOutputStream_write(void * jarg1, void * jarg2, unsigned long jarg3) {
    unsigned long jresult = 0 ;
    DcmOutputStream *arg1 = (DcmOutputStream *) 0 ;
    void *arg2 = (void *) 0 ;
    Uint32 arg3 ;
    Uint32 result;
    
    arg1 = (DcmOutputStream *)jarg1; 
    arg2 = (void *)jarg2; 
    arg3 = (Uint32)jarg3; 
    result = (Uint32)(arg1)->write((void const *)arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmOutputStream_flush(void * jarg1) {
    DcmOutputStream *arg1 = (DcmOutputStream *) 0 ;
    
    arg1 = (DcmOutputStream *)jarg1; 
    (arg1)->flush();
    
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmOutputStream_tell(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmOutputStream *arg1 = (DcmOutputStream *) 0 ;
    Uint32 result;
    
    arg1 = (DcmOutputStream *)jarg1; 
    result = (Uint32)((DcmOutputStream const *)arg1)->tell();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOutputStream_installCompressionFilter(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    DcmOutputStream *arg1 = (DcmOutputStream *) 0 ;
    E_StreamCompression arg2 ;
    OFCondition result;
    
    arg1 = (DcmOutputStream *)jarg1; 
    arg2 = (E_StreamCompression)jarg2; 
    result = (arg1)->installCompressionFilter((E_StreamCompression )arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DCMVR_H() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_dcmEnableUnknownVRGeneration(void * jarg1) {
    OFGlobal<bool > *arg1 = (OFGlobal<bool > *) 0 ;
    
    arg1 = (OFGlobal<bool > *)jarg1; 
    dcmEnableUnknownVRGeneration = *arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_get_dcmEnableUnknownVRGeneration() {
    void * jresult = 0 ;
    OFGlobal<bool > *result;
    
    result = (OFGlobal<bool > *)&dcmEnableUnknownVRGeneration;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_dcmEnableUnlimitedTextVRGeneration(void * jarg1) {
    OFGlobal<bool > *arg1 = (OFGlobal<bool > *) 0 ;
    
    arg1 = (OFGlobal<bool > *)jarg1; 
    dcmEnableUnlimitedTextVRGeneration = *arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_get_dcmEnableUnlimitedTextVRGeneration() {
    void * jresult = 0 ;
    OFGlobal<bool > *result;
    
    result = (OFGlobal<bool > *)&dcmEnableUnlimitedTextVRGeneration;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmVR__SWIG_0() {
    void * jresult = 0 ;
    DcmVR *result;
    
    result = (DcmVR *)new DcmVR();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmVR__SWIG_1(int jarg1) {
    void * jresult = 0 ;
    DcmEVR arg1 ;
    DcmVR *result;
    
    arg1 = (DcmEVR)jarg1; 
    result = (DcmVR *)new DcmVR((DcmEVR )arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmVR__SWIG_2(char * jarg1) {
    void * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    DcmVR *result;
    
    arg1 = jarg1; 
    result = (DcmVR *)new DcmVR((char const *)arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmVR__SWIG_3(void * jarg1) {
    void * jresult = 0 ;
    DcmVR *arg1 = 0 ;
    DcmVR *result;
    
    arg1 = (DcmVR *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmVR const & reference is null");
    } 
    result = (DcmVR *)new DcmVR((DcmVR const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmVR_setVR__SWIG_0(void * jarg1, int jarg2) {
    DcmVR *arg1 = (DcmVR *) 0 ;
    DcmEVR arg2 ;
    
    arg1 = (DcmVR *)jarg1; 
    arg2 = (DcmEVR)jarg2; 
    (arg1)->setVR((DcmEVR )arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DcmVR_setVR__SWIG_1(void * jarg1, char * jarg2) {
    DcmVR *arg1 = (DcmVR *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (DcmVR *)jarg1; 
    arg2 = jarg2; 
    (arg1)->setVR((char const *)arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DcmVR_setVR__SWIG_2(void * jarg1, void * jarg2) {
    DcmVR *arg1 = (DcmVR *) 0 ;
    DcmVR *arg2 = 0 ;
    
    arg1 = (DcmVR *)jarg1; 
    arg2 = (DcmVR *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmVR const & reference is null");
    } 
    (arg1)->setVR((DcmVR const &)*arg2);
    
}


DllExport int SWIGSTDCALL CSharp_DcmVR_getEVR(void * jarg1) {
    int jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmVR *)jarg1; 
    result = (DcmEVR)((DcmVR const *)arg1)->getEVR();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmVR_getValidEVR(void * jarg1) {
    int jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmVR *)jarg1; 
    result = (DcmEVR)((DcmVR const *)arg1)->getValidEVR();
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmVR_getVRName(void * jarg1) {
    char * jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    char *result;
    
    arg1 = (DcmVR *)jarg1; 
    result = (char *)((DcmVR const *)arg1)->getVRName();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmVR_getValidVRName(void * jarg1) {
    char * jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    char *result;
    
    arg1 = (DcmVR *)jarg1; 
    result = (char *)((DcmVR const *)arg1)->getValidVRName();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmVR_getValueWidth(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    size_t result;
    
    arg1 = (DcmVR *)jarg1; 
    result = ((DcmVR const *)arg1)->getValueWidth();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmVR_isStandard(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    bool result;
    
    arg1 = (DcmVR *)jarg1; 
    result = (bool)((DcmVR const *)arg1)->isStandard();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmVR_isForInternalUseOnly(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    bool result;
    
    arg1 = (DcmVR *)jarg1; 
    result = (bool)((DcmVR const *)arg1)->isForInternalUseOnly();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmVR_isaString(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    bool result;
    
    arg1 = (DcmVR *)jarg1; 
    result = (bool)((DcmVR const *)arg1)->isaString();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmVR_usesExtendedLengthEncoding(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    bool result;
    
    arg1 = (DcmVR *)jarg1; 
    result = (bool)((DcmVR const *)arg1)->usesExtendedLengthEncoding();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmVR_isEquivalent(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    DcmVR *arg2 = 0 ;
    bool result;
    
    arg1 = (DcmVR *)jarg1; 
    arg2 = (DcmVR *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmVR const & reference is null");
    } 
    result = (bool)((DcmVR const *)arg1)->isEquivalent((DcmVR const &)*arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmVR_getMinValueLength(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    Uint32 result;
    
    arg1 = (DcmVR *)jarg1; 
    result = (Uint32)((DcmVR const *)arg1)->getMinValueLength();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmVR_getMaxValueLength(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmVR *arg1 = (DcmVR *) 0 ;
    Uint32 result;
    
    arg1 = (DcmVR *)jarg1; 
    result = (Uint32)((DcmVR const *)arg1)->getMaxValueLength();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmVR(void * jarg1) {
    DcmVR *arg1 = (DcmVR *) 0 ;
    
    arg1 = (DcmVR *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_new_DcmXfer__SWIG_0(int jarg1) {
    void * jresult = 0 ;
    E_TransferSyntax arg1 ;
    DcmXfer *result;
    
    arg1 = (E_TransferSyntax)jarg1; 
    result = (DcmXfer *)new DcmXfer((E_TransferSyntax )arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmXfer__SWIG_1(char * jarg1) {
    void * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    DcmXfer *result;
    
    arg1 = jarg1; 
    result = (DcmXfer *)new DcmXfer((char const *)arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmXfer__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmXfer *arg1 = 0 ;
    DcmXfer *result;
    
    arg1 = (DcmXfer *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmXfer const & reference is null");
    } 
    result = (DcmXfer *)new DcmXfer((DcmXfer const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmXfer(void * jarg1) {
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    
    arg1 = (DcmXfer *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmXfer_getXfer(void * jarg1) {
    int jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    E_TransferSyntax result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (E_TransferSyntax)((DcmXfer const *)arg1)->getXfer();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmXfer_getByteOrder(void * jarg1) {
    int jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    E_ByteOrder result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (E_ByteOrder)((DcmXfer const *)arg1)->getByteOrder();
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmXfer_getXferName(void * jarg1) {
    char * jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    char *result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (char *)((DcmXfer const *)arg1)->getXferName();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmXfer_getXferID(void * jarg1) {
    char * jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    char *result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (char *)((DcmXfer const *)arg1)->getXferID();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmXfer_isLittleEndian(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    bool result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (bool)((DcmXfer const *)arg1)->isLittleEndian();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmXfer_isBigEndian(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    bool result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (bool)((DcmXfer const *)arg1)->isBigEndian();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmXfer_isImplicitVR(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    bool result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (bool)((DcmXfer const *)arg1)->isImplicitVR();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmXfer_isExplicitVR(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    bool result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (bool)((DcmXfer const *)arg1)->isExplicitVR();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmXfer_isEncapsulated(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    bool result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (bool)((DcmXfer const *)arg1)->isEncapsulated();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmXfer_isNotEncapsulated(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    bool result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (bool)((DcmXfer const *)arg1)->isNotEncapsulated();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmXfer_getJPEGProcess8Bit(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    Uint32 result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (Uint32)((DcmXfer const *)arg1)->getJPEGProcess8Bit();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmXfer_getJPEGProcess12Bit(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    Uint32 result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (Uint32)((DcmXfer const *)arg1)->getJPEGProcess12Bit();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmXfer_getStreamCompression(void * jarg1) {
    int jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    E_StreamCompression result;
    
    arg1 = (DcmXfer *)jarg1; 
    result = (E_StreamCompression)((DcmXfer const *)arg1)->getStreamCompression();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmXfer_sizeofTagHeader(void * jarg1, int jarg2) {
    unsigned long jresult = 0 ;
    DcmXfer *arg1 = (DcmXfer *) 0 ;
    DcmEVR arg2 ;
    Uint32 result;
    
    arg1 = (DcmXfer *)jarg1; 
    arg2 = (DcmEVR)jarg2; 
    result = (Uint32)(arg1)->sizeofTagHeader((DcmEVR )arg2);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_gLocalByteOrder() {
    int jresult = 0 ;
    E_ByteOrder result;
    
    result = (E_ByteOrder)(E_ByteOrder)gLocalByteOrder;
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_dcmFindNameOfUID(char * jarg1) {
    char * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *result;
    
    arg1 = jarg1; 
    result = (char *)dcmFindNameOfUID((char const *)arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_dcmFindUIDFromName(char * jarg1) {
    char * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *result;
    
    arg1 = jarg1; 
    result = (char *)dcmFindUIDFromName((char const *)arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_dcmStorageSOPClassUIDs() {
    void * jresult = 0 ;
    char **result;
    
    result = (char **)(char **)dcmStorageSOPClassUIDs;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_numberOfDcmStorageSOPClassUIDs() {
    int jresult = 0 ;
    int result;
    
    result = (int)(int)numberOfDcmStorageSOPClassUIDs;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_dcmIsaStorageSOPClassUID(char * jarg1) {
    unsigned int jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    arg1 = jarg1; 
    result = (bool)dcmIsaStorageSOPClassUID((char const *)arg1);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_dcmImageSOPClassUIDs() {
    void * jresult = 0 ;
    char **result;
    
    result = (char **)(char **)dcmImageSOPClassUIDs;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_numberOfDcmImageSOPClassUIDs() {
    int jresult = 0 ;
    int result;
    
    result = (int)(int)numberOfDcmImageSOPClassUIDs;
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_dcmGenerateUniqueIdentifier__SWIG_0(char * jarg1, char * jarg2) {
    char * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    
    arg1 = jarg1; 
    arg2 = jarg2; 
    result = (char *)dcmGenerateUniqueIdentifier(arg1,(char const *)arg2);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_dcmGenerateUniqueIdentifier__SWIG_1(char * jarg1) {
    char * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *result;
    
    arg1 = jarg1; 
    result = (char *)dcmGenerateUniqueIdentifier(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_dcmSOPClassUIDToModality(char * jarg1) {
    char * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *result;
    
    arg1 = jarg1; 
    result = (char *)dcmSOPClassUIDToModality((char const *)arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_dcmGuessModalityBytes(char * jarg1) {
    unsigned long jresult = 0 ;
    char *arg1 = (char *) 0 ;
    unsigned long result;
    
    arg1 = jarg1; 
    result = (unsigned long)dcmGuessModalityBytes((char const *)arg1);
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_DTK_IMPLEMENTATION_VERSION_NAME() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "OFFIS_DCMTK_353";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_DTK_IMPLEMENTATION_VERSION_NAME2() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "OFFIS_DCMBP_353";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_DCMTK_RELEASEDATE() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "2004-05-27";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_UID_ROOT() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_OFFIS_DCMTK_VERSION_NUMBER() {
    int jresult = 0 ;
    int result;
    
    result = (int) 353;
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_DCMTK_VERSION_STRING() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "3.5.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_DCMTK_VERSION_SUFFIX() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "\0";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_DCMTK_VERSION() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "3.5.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_IMPLEMENTATION_CLASS_UID() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3.0.3.5.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_INSTANCE_CREATOR_UID() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3.0.3.5.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_CODING_SCHEME_UID_ROOT() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3.0.0";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_CODING_SCHEME_VERSION() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_OFFIS_CODING_SCHEME_UID() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3.0.0.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_SITE_UID_ROOT() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_SITE_STUDY_UID_ROOT() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3.1.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_SITE_SERIES_UID_ROOT() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3.1.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_SITE_INSTANCE_UID_ROOT() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3.1.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PrivateGenericFileSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3.1.0.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_StandardApplicationContext() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_LittleEndianImplicitTransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_LittleEndianExplicitTransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BigEndianExplicitTransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess1TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.50";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess2_4TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.51";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess3_5TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.52";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess6_8TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.53";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess7_9TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.54";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess10_12TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.55";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess11_13TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.56";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess14TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.57";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess15TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.58";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess16_18TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.59";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess17_19TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.60";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess20_22TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.61";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess21_23TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.62";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess24_26TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.63";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess25_27TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.64";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess28TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.65";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess29TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.66";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGProcess14SV1TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.70";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGLSLosslessTransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.80";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEGLSLossyTransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.81";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RLELosslessTransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.5";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DeflatedExplicitVRLittleEndianTransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.1.99";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEG2000LosslessOnlyTransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.90";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_JPEG2000TransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.91";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MPEG2MainProfileAtMainLevelTransferSyntax() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.2.4.100";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_StoredPrintStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.27";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_HardcopyGrayscaleImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.29";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_HardcopyColorImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.30";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ComputedRadiographyImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DigitalXRayImageStorageForPresentation() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DigitalXRayImageStorageForProcessing() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.1.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DigitalMammographyXRayImageStorageForPresentation() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.1.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DigitalMammographyXRayImageStorageForProcessing() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.1.2.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DigitalIntraOralXRayImageStorageForPresentation() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.1.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DigitalIntraOralXRayImageStorageForProcessing() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.1.3.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_CTImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_EnhancedCTImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.2.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_UltrasoundMultiframeImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_UltrasoundMultiframeImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.3.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MRImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_NuclearMedicineImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.5";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_UltrasoundImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.6";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_UltrasoundImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.6.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SecondaryCaptureImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.7";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_StandaloneOverlayStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.8";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_StandaloneCurveStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.9";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_TwelveLeadECGWaveformStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.9.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_GeneralECGWaveformStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.9.1.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_AmbulatoryECGWaveformStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.9.1.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_HemodynamicWaveformStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.9.2.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_CardiacElectrophysiologyWaveformStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.9.3.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicVoiceAudioWaveformStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.9.4.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_StandaloneModalityLUTStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.10";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_StandaloneVOILUTStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.11";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_GrayscaleSoftcopyPresentationStateStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.11.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_XRayAngiographicImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.12.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_XRayFluoroscopyImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.12.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_XRayAngiographicBiPlaneImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.12.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_NuclearMedicineImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.20";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_VLImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.77.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_VLEndoscopicImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.77.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_VLMicroscopicImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.77.1.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_VLSlideCoordinatesMicroscopicImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.77.1.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_VLPhotographicImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.77.1.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_VLMultiFrameImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.77.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicTextSR() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.11";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_EnhancedSR() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.22";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ComprehensiveSR() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.33";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PETImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.128";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PETCurveStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.129";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RTImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.481.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RTDoseStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.481.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RTStructureSetStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.481.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RTBeamsTreatmentRecordStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.481.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RTPlanStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.481.5";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RTBrachyTreatmentRecordStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.481.6";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RTTreatmentSummaryRecordStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.481.7";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_EnhancedMRImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.4.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MRSpectroscopyStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.4.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RawDataStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.66";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MammographyCADSR() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.50";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MultiframeSingleBitSecondaryCaptureImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.7.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MultiframeGrayscaleByteSecondaryCaptureImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.7.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MultiframeGrayscaleWordSecondaryCaptureImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.7.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MultiframeTrueColorSecondaryCaptureImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.7.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_KeyObjectSelectionDocument() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.59";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ChestCADSR() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.65";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ProcedureLogStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.40";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SpatialRegistrationStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.66.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SpatialFiducialsStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.66.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_FINDPatientRootQueryRetrieveInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.2.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MOVEPatientRootQueryRetrieveInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.2.1.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_GETPatientRootQueryRetrieveInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.2.1.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_FINDStudyRootQueryRetrieveInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.2.2.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MOVEStudyRootQueryRetrieveInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.2.2.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_GETStudyRootQueryRetrieveInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.2.2.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_FINDPatientStudyOnlyQueryRetrieveInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.2.3.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MOVEPatientStudyOnlyQueryRetrieveInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.2.3.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_GETPatientStudyOnlyQueryRetrieveInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.2.3.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_FINDModalityWorklistInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.31";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_FINDGeneralPurposeWorklistInformationModel() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.32.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicFilmSessionSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicFilmBoxSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicGrayscaleImageBoxSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicColorImageBoxSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.4.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_ReferencedImageBoxSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.4.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicGrayscalePrintManagementMetaSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.9";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_ReferencedGrayscalePrintManagementMetaSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.9.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PrintJobSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.14";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicAnnotationBoxSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.15";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PrinterSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.16";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PrinterConfigurationRetrievalSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.16.376";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PrinterSOPInstance() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.17";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PrinterConfigurationRetrievalSOPInstance() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.17.376";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicColorPrintManagementMetaSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.18";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_ReferencedColorPrintManagementMetaSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.18.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_VOILUTBoxSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.22";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PresentationLUTSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.23";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ImageOverlayBoxSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.24";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicPrintImageOverlayBoxSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.24.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PrintQueueSOPInstance() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.25";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PrintQueueManagementSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.26";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PullPrintRequestSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.31";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PullStoredPrintManagementMetaSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.1.32";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_StorageCommitmentPushModelSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.20.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_StorageCommitmentPushModelSOPInstance() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.20.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_StorageCommitmentPullModelSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.20.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_RETIRED_StorageCommitmentPullModelSOPInstance() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.20.2.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ModalityPerformedProcedureStepSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.3.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ModalityPerformedProcedureStepRetrieveSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.3.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ModalityPerformedProcedureStepNotificationSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.3.5";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DetachedPatientManagementSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DetachedPatientManagementMetaSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.1.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DetachedVisitManagementSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.2.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DetachedStudyManagementSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.3.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DetachedResultsManagementSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.5.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DetachedResultsManagementMetaSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.5.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DetachedStudyManagementMetaSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.5.5";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DetachedInterpretationManagementSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.6.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_GeneralPurposeScheduledProcedureStepSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.32.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_GeneralPurposePerformedProcedureStepSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.32.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_GeneralPurposeWorklistManagementMetaSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.32";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_VerificationSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MediaStorageDirectoryStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.3.10";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_BasicStudyContentNotificationSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.9";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_StudyComponentManagementSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.2.3.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DICOMControlledTerminologyCodingScheme() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.2.16.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_VideoEndoscopicImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.77.1.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_MicroscopicImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.77.1.2.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_VideoPhotographicImageStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.77.1.4.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ProceduralEventLoggingSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.40";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ProceduralEventLoggingSOPInstance() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.40.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_TalairachBrainAtlasFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2T1FrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2T2FrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2PDFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2EPIFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.5";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2FILT1FrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.6";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2PETFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.7";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2TRANSMFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.8";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2SPECTFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.9";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2GRAYFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.10";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2WHITEFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.11";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2CSFFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.12";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2BRAINMASKFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.13";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2AVG305T1FrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.14";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2AVG152T1FrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.15";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2AVG152T2FrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.16";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2AVG152PDFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.17";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_SPM2SINGLESUBJT1FrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.1.18";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ICBM452T1FrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.2.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_ICBMSingleSubjectMRIFrameOfReference() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.1.4.2.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_PrivateShutdownSOPClass() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3.4.1915765545.18030.917282194.0";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DRAFT_SRTextStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DRAFT_SRAudioStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.2";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DRAFT_SRDetailStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DRAFT_SRComprehensiveStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.88.4";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_UID_DRAFT_WaveformStorage() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.5.1.4.1.1.9.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_getVMFromString(char * jarg1) {
    unsigned long jresult = 0 ;
    char *arg1 = (char *) 0 ;
    unsigned long result;
    
    arg1 = jarg1; 
    result = (unsigned long)getVMFromString((char const *)arg1);
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_getFirstValueFromString(char** jarg1) {
    char * jresult = 0 ;
    char **arg1 = 0 ;
    char *result;
    
    arg1 = (char **)jarg1; 
    result = (char *)getFirstValueFromString((char const *&)*arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_DcmDebugLevel(void * jarg1) {
    OFGlobal<int > *arg1 = (OFGlobal<int > *) 0 ;
    
    arg1 = (OFGlobal<int > *)jarg1; 
    DcmDebugLevel = *arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_get_DcmDebugLevel() {
    void * jresult = 0 ;
    OFGlobal<int > *result;
    
    result = (OFGlobal<int > *)&DcmDebugLevel;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DCMTAGKEY_H() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTagKey__SWIG_0() {
    void * jresult = 0 ;
    DcmTagKey *result;
    
    result = (DcmTagKey *)new DcmTagKey();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTagKey__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTagKey *arg1 = 0 ;
    DcmTagKey *result;
    
    arg1 = (DcmTagKey *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    result = (DcmTagKey *)new DcmTagKey((DcmTagKey const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTagKey__SWIG_2(unsigned short jarg1, unsigned short jarg2) {
    void * jresult = 0 ;
    Uint16 arg1 ;
    Uint16 arg2 ;
    DcmTagKey *result;
    
    arg1 = (Uint16)jarg1; 
    arg2 = (Uint16)jarg2; 
    result = (DcmTagKey *)new DcmTagKey(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmTagKey_set__SWIG_0(void * jarg1, void * jarg2) {
    DcmTagKey *arg1 = (DcmTagKey *) 0 ;
    DcmTagKey *arg2 = 0 ;
    
    arg1 = (DcmTagKey *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    (arg1)->set((DcmTagKey const &)*arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DcmTagKey_set__SWIG_1(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
    DcmTagKey *arg1 = (DcmTagKey *) 0 ;
    Uint16 arg2 ;
    Uint16 arg3 ;
    
    arg1 = (DcmTagKey *)jarg1; 
    arg2 = (Uint16)jarg2; 
    arg3 = (Uint16)jarg3; 
    (arg1)->set(arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmTagKey_setGroup(void * jarg1, unsigned short jarg2) {
    DcmTagKey *arg1 = (DcmTagKey *) 0 ;
    Uint16 arg2 ;
    
    arg1 = (DcmTagKey *)jarg1; 
    arg2 = (Uint16)jarg2; 
    (arg1)->setGroup(arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DcmTagKey_setElement(void * jarg1, unsigned short jarg2) {
    DcmTagKey *arg1 = (DcmTagKey *) 0 ;
    Uint16 arg2 ;
    
    arg1 = (DcmTagKey *)jarg1; 
    arg2 = (Uint16)jarg2; 
    (arg1)->setElement(arg2);
    
}


DllExport unsigned short SWIGSTDCALL CSharp_DcmTagKey_getGroup(void * jarg1) {
    unsigned short jresult = 0 ;
    DcmTagKey *arg1 = (DcmTagKey *) 0 ;
    Uint16 result;
    
    arg1 = (DcmTagKey *)jarg1; 
    result = (Uint16)((DcmTagKey const *)arg1)->getGroup();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_DcmTagKey_getElement(void * jarg1) {
    unsigned short jresult = 0 ;
    DcmTagKey *arg1 = (DcmTagKey *) 0 ;
    Uint16 result;
    
    arg1 = (DcmTagKey *)jarg1; 
    result = (Uint16)((DcmTagKey const *)arg1)->getElement();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmTagKey_hash(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmTagKey *arg1 = (DcmTagKey *) 0 ;
    Uint32 result;
    
    arg1 = (DcmTagKey *)jarg1; 
    result = (Uint32)((DcmTagKey const *)arg1)->hash();
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmTagKey_toString(void * jarg1) {
    char * jresult = 0 ;
    DcmTagKey *arg1 = (DcmTagKey *) 0 ;
    std::string result;
    
    arg1 = (DcmTagKey *)jarg1; 
    result = ((DcmTagKey const *)arg1)->toString();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmTagKey_isSignableTag(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmTagKey *arg1 = (DcmTagKey *) 0 ;
    bool result;
    
    arg1 = (DcmTagKey *)jarg1; 
    result = (bool)((DcmTagKey const *)arg1)->isSignableTag();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmTagKey(void * jarg1) {
    DcmTagKey *arg1 = (DcmTagKey *) 0 ;
    
    arg1 = (DcmTagKey *)jarg1; 
    delete arg1;
    
}


DllExport char * SWIGSTDCALL CSharp_get_DcmTag_ERROR_TagName() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "Unknown Tag & Data";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTag__SWIG_0() {
    void * jresult = 0 ;
    DcmTag *result;
    
    result = (DcmTag *)new DcmTag();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTag__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTagKey *arg1 = 0 ;
    DcmTag *result;
    
    arg1 = (DcmTagKey *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    result = (DcmTag *)new DcmTag((DcmTagKey const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTag__SWIG_2(unsigned short jarg1, unsigned short jarg2) {
    void * jresult = 0 ;
    Uint16 arg1 ;
    Uint16 arg2 ;
    DcmTag *result;
    
    arg1 = (Uint16)jarg1; 
    arg2 = (Uint16)jarg2; 
    result = (DcmTag *)new DcmTag(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTag__SWIG_3(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmTagKey *arg1 = 0 ;
    DcmVR *arg2 = 0 ;
    DcmTag *result;
    
    arg1 = (DcmTagKey *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg2 = (DcmVR *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmVR const & reference is null");
    } 
    result = (DcmTag *)new DcmTag((DcmTagKey const &)*arg1,(DcmVR const &)*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTag__SWIG_4(unsigned short jarg1, unsigned short jarg2, void * jarg3) {
    void * jresult = 0 ;
    Uint16 arg1 ;
    Uint16 arg2 ;
    DcmVR *arg3 = 0 ;
    DcmTag *result;
    
    arg1 = (Uint16)jarg1; 
    arg2 = (Uint16)jarg2; 
    arg3 = (DcmVR *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmVR const & reference is null");
    } 
    result = (DcmTag *)new DcmTag(arg1,arg2,(DcmVR const &)*arg3);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTag__SWIG_5(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmTag *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmTag *)new DcmTag((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmTag(void * jarg1) {
    DcmTag *arg1 = (DcmTag *) 0 ;
    
    arg1 = (DcmTag *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_DcmTag_setVR(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    DcmVR *arg2 = 0 ;
    DcmVR result;
    
    arg1 = (DcmTag *)jarg1; 
    arg2 = (DcmVR *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmVR const & reference is null");
    } 
    result = (arg1)->setVR((DcmVR const &)*arg2);
    
    jresult = new DcmVR((DcmVR &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTag_getVR(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    DcmVR result;
    
    arg1 = (DcmTag *)jarg1; 
    result = ((DcmTag const *)arg1)->getVR();
    
    jresult = new DcmVR((DcmVR &)result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmTag_getEVR(void * jarg1) {
    int jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmTag *)jarg1; 
    result = (DcmEVR)((DcmTag const *)arg1)->getEVR();
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmTag_getVRName(void * jarg1) {
    char * jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    char *result;
    
    arg1 = (DcmTag *)jarg1; 
    result = (char *)((DcmTag const *)arg1)->getVRName();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_DcmTag_getGTag(void * jarg1) {
    unsigned short jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    Uint16 result;
    
    arg1 = (DcmTag *)jarg1; 
    result = (Uint16)((DcmTag const *)arg1)->getGTag();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_DcmTag_getETag(void * jarg1) {
    unsigned short jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    Uint16 result;
    
    arg1 = (DcmTag *)jarg1; 
    result = (Uint16)((DcmTag const *)arg1)->getETag();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTag_getXTag(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    DcmTagKey result;
    
    arg1 = (DcmTag *)jarg1; 
    result = ((DcmTag const *)arg1)->getXTag();
    
    jresult = new DcmTagKey((DcmTagKey &)result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmTag_getTagName(void * jarg1) {
    char * jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    char *result;
    
    arg1 = (DcmTag *)jarg1; 
    result = (char *)(arg1)->getTagName();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmTag_getPrivateCreator(void * jarg1) {
    char * jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    char *result;
    
    arg1 = (DcmTag *)jarg1; 
    result = (char *)((DcmTag const *)arg1)->getPrivateCreator();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmTag_setPrivateCreator(void * jarg1, char * jarg2) {
    DcmTag *arg1 = (DcmTag *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (DcmTag *)jarg1; 
    arg2 = jarg2; 
    (arg1)->setPrivateCreator((char const *)arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DcmTag_lookupVRinDictionary(void * jarg1) {
    DcmTag *arg1 = (DcmTag *) 0 ;
    
    arg1 = (DcmTag *)jarg1; 
    (arg1)->lookupVRinDictionary();
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmTag_isSignable(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    bool result;
    
    arg1 = (DcmTag *)jarg1; 
    result = (bool)((DcmTag const *)arg1)->isSignable();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmTag_isUnknownVR(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    bool result;
    
    arg1 = (DcmTag *)jarg1; 
    result = (bool)((DcmTag const *)arg1)->isUnknownVR();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTag_error(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = (DcmTag *) 0 ;
    OFCondition result;
    
    arg1 = (DcmTag *)jarg1; 
    result = ((DcmTag const *)arg1)->error();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTag_findTagFromName(char * jarg1, void * jarg2) {
    void * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    DcmTag *arg2 = 0 ;
    OFCondition result;
    
    arg1 = jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag & reference is null");
    } 
    result = DcmTag::findTagFromName((char const *)arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DcmVariableVM() {
    int jresult = 0 ;
    int result;
    
    result = (int) -1;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDictEntry__SWIG_0(unsigned short jarg1, unsigned short jarg2, void * jarg3, char * jarg4, int jarg5, int jarg6, char * jarg7, unsigned int jarg8, char * jarg9) {
    void * jresult = 0 ;
    Uint16 arg1 ;
    Uint16 arg2 ;
    DcmVR arg3 ;
    char *arg4 = (char *) 0 ;
    int arg5 ;
    int arg6 ;
    char *arg7 = (char *) 0 ;
    bool arg8 ;
    char *arg9 = (char *) 0 ;
    DcmDictEntry *result;
    DcmVR *argp3 ;
    
    arg1 = (Uint16)jarg1; 
    arg2 = (Uint16)jarg2; 
    argp3 = (DcmVR *)jarg3; 
    if (!argp3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null DcmVR");
    }
    arg3 = *argp3; 
    arg4 = jarg4; 
    arg5 = (int)jarg5; 
    arg6 = (int)jarg6; 
    arg7 = jarg7; 
    arg8 = jarg8 ? true : false; 
    arg9 = jarg9; 
    result = (DcmDictEntry *)new DcmDictEntry(arg1,arg2,arg3,(char const *)arg4,arg5,arg6,(char const *)arg7,arg8,(char const *)arg9);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDictEntry__SWIG_1(unsigned short jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4, void * jarg5, char * jarg6, int jarg7, int jarg8, char * jarg9, unsigned int jarg10, char * jarg11) {
    void * jresult = 0 ;
    Uint16 arg1 ;
    Uint16 arg2 ;
    Uint16 arg3 ;
    Uint16 arg4 ;
    DcmVR arg5 ;
    char *arg6 = (char *) 0 ;
    int arg7 ;
    int arg8 ;
    char *arg9 = (char *) 0 ;
    bool arg10 ;
    char *arg11 = (char *) 0 ;
    DcmDictEntry *result;
    DcmVR *argp5 ;
    
    arg1 = (Uint16)jarg1; 
    arg2 = (Uint16)jarg2; 
    arg3 = (Uint16)jarg3; 
    arg4 = (Uint16)jarg4; 
    argp5 = (DcmVR *)jarg5; 
    if (!argp5) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null DcmVR");
    }
    arg5 = *argp5; 
    arg6 = jarg6; 
    arg7 = (int)jarg7; 
    arg8 = (int)jarg8; 
    arg9 = jarg9; 
    arg10 = jarg10 ? true : false; 
    arg11 = jarg11; 
    result = (DcmDictEntry *)new DcmDictEntry(arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,(char const *)arg9,arg10,(char const *)arg11);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDictEntry__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmDictEntry *arg1 = 0 ;
    DcmDictEntry *result;
    
    arg1 = (DcmDictEntry *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmDictEntry const & reference is null");
    } 
    result = (DcmDictEntry *)new DcmDictEntry((DcmDictEntry const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmDictEntry(void * jarg1) {
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    
    arg1 = (DcmDictEntry *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_DcmDictEntry_getVR(void * jarg1) {
    void * jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmVR result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = ((DcmDictEntry const *)arg1)->getVR();
    
    jresult = new DcmVR((DcmVR &)result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_getEVR(void * jarg1) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (DcmEVR)((DcmDictEntry const *)arg1)->getEVR();
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmDictEntry_getStandardVersion(void * jarg1) {
    char * jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    char *result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (char *)((DcmDictEntry const *)arg1)->getStandardVersion();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmDictEntry_getTagName(void * jarg1) {
    char * jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    char *result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (char *)((DcmDictEntry const *)arg1)->getTagName();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmDictEntry_getPrivateCreator(void * jarg1) {
    char * jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    char *result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (char *)((DcmDictEntry const *)arg1)->getPrivateCreator();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_privateCreatorMatch__SWIG_0(void * jarg1, char * jarg2) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    char *arg2 = (char *) 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = jarg2; 
    result = (int)((DcmDictEntry const *)arg1)->privateCreatorMatch((char const *)arg2);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_privateCreatorMatch__SWIG_1(void * jarg1, void * jarg2) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmDictEntry *arg2 = 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = (DcmDictEntry *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmDictEntry const & reference is null");
    } 
    result = (int)((DcmDictEntry const *)arg1)->privateCreatorMatch((DcmDictEntry const &)*arg2);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_getVMMin(void * jarg1) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (int)((DcmDictEntry const *)arg1)->getVMMin();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_getVMMax(void * jarg1) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (int)((DcmDictEntry const *)arg1)->getVMMax();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmDictEntry_isFixedSingleVM(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    bool result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (bool)((DcmDictEntry const *)arg1)->isFixedSingleVM();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmDictEntry_isFixedRangeVM(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    bool result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (bool)((DcmDictEntry const *)arg1)->isFixedRangeVM();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmDictEntry_isVariableRangeVM(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    bool result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (bool)((DcmDictEntry const *)arg1)->isVariableRangeVM();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmDictEntry_setUpper(void * jarg1, void * jarg2) {
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmTagKey *arg2 = 0 ;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    (arg1)->setUpper((DcmTagKey const &)*arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DcmDictEntry_setUpperGroup(void * jarg1, unsigned short jarg2) {
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    Uint16 arg2 ;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = (Uint16)jarg2; 
    (arg1)->setUpperGroup(arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DcmDictEntry_setUpperElement(void * jarg1, unsigned short jarg2) {
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    Uint16 arg2 ;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = (Uint16)jarg2; 
    (arg1)->setUpperElement(arg2);
    
}


DllExport unsigned short SWIGSTDCALL CSharp_DcmDictEntry_getUpperGroup(void * jarg1) {
    unsigned short jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    Uint16 result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (Uint16)((DcmDictEntry const *)arg1)->getUpperGroup();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_DcmDictEntry_getUpperElement(void * jarg1) {
    unsigned short jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    Uint16 result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (Uint16)((DcmDictEntry const *)arg1)->getUpperElement();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDictEntry_getKey(void * jarg1) {
    void * jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmTagKey result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = ((DcmDictEntry const *)arg1)->getKey();
    
    jresult = new DcmTagKey((DcmTagKey &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDictEntry_getUpperKey(void * jarg1) {
    void * jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmTagKey result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = ((DcmDictEntry const *)arg1)->getUpperKey();
    
    jresult = new DcmTagKey((DcmTagKey &)result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_isRepeatingGroup(void * jarg1) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (int)((DcmDictEntry const *)arg1)->isRepeatingGroup();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_isRepeatingElement(void * jarg1) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (int)((DcmDictEntry const *)arg1)->isRepeatingElement();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_isRepeating(void * jarg1) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (int)((DcmDictEntry const *)arg1)->isRepeating();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_getGroupRangeRestriction(void * jarg1) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmDictRangeRestriction result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (DcmDictRangeRestriction)((DcmDictEntry const *)arg1)->getGroupRangeRestriction();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmDictEntry_setGroupRangeRestriction(void * jarg1, int jarg2) {
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmDictRangeRestriction arg2 ;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = (DcmDictRangeRestriction)jarg2; 
    (arg1)->setGroupRangeRestriction((DcmDictRangeRestriction )arg2);
    
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_getElementRangeRestriction(void * jarg1) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmDictRangeRestriction result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    result = (DcmDictRangeRestriction)((DcmDictEntry const *)arg1)->getElementRangeRestriction();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmDictEntry_setElementRangeRestriction(void * jarg1, int jarg2) {
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmDictRangeRestriction arg2 ;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = (DcmDictRangeRestriction)jarg2; 
    (arg1)->setElementRangeRestriction((DcmDictRangeRestriction )arg2);
    
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_contains__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmTagKey *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = jarg3; 
    result = (int)((DcmDictEntry const *)arg1)->contains((DcmTagKey const &)*arg2,(char const *)arg3);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_contains__SWIG_1(void * jarg1, char * jarg2) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    char *arg2 = (char *) 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = jarg2; 
    result = (int)((DcmDictEntry const *)arg1)->contains((char const *)arg2);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_subset(void * jarg1, void * jarg2) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmDictEntry *arg2 = 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = (DcmDictEntry *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmDictEntry const & reference is null");
    } 
    result = (int)((DcmDictEntry const *)arg1)->subset((DcmDictEntry const &)*arg2);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDictEntry_setEQ(void * jarg1, void * jarg2) {
    int jresult = 0 ;
    DcmDictEntry *arg1 = (DcmDictEntry *) 0 ;
    DcmDictEntry *arg2 = 0 ;
    int result;
    
    arg1 = (DcmDictEntry *)jarg1; 
    arg2 = (DcmDictEntry *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmDictEntry const & reference is null");
    } 
    result = (int)((DcmDictEntry const *)arg1)->setEQ((DcmDictEntry const &)*arg2);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DCMHASHDICT_DEFAULT_HASHSIZE() {
    int jresult = 0 ;
    int result;
    
    result = (int)(int)DCMHASHDICT_DEFAULT_HASHSIZE;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDictEntryListIterator__SWIG_0() {
    void * jresult = 0 ;
    DcmDictEntryListIterator *result;
    
    result = (DcmDictEntryListIterator *)new DcmDictEntryListIterator();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDictEntryListIterator__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    OFIterator<DcmDictEntry * > *arg1 = 0 ;
    DcmDictEntryListIterator *result;
    
    arg1 = (OFIterator<DcmDictEntry * > *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFIterator<DcmDictEntry * > const & reference is null");
    } 
    result = (DcmDictEntryListIterator *)new DcmDictEntryListIterator((OFIterator<DcmDictEntry * > const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmDictEntryListIterator(void * jarg1) {
    DcmDictEntryListIterator *arg1 = (DcmDictEntryListIterator *) 0 ;
    
    arg1 = (DcmDictEntryListIterator *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDictEntryListConstIterator__SWIG_0() {
    void * jresult = 0 ;
    DcmDictEntryListConstIterator *result;
    
    result = (DcmDictEntryListConstIterator *)new DcmDictEntryListConstIterator();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDictEntryListConstIterator__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    OFIterator<DcmDictEntry * > *arg1 = 0 ;
    DcmDictEntryListConstIterator *result;
    
    arg1 = (OFIterator<DcmDictEntry * > *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFIterator<DcmDictEntry * > const & reference is null");
    } 
    result = (DcmDictEntryListConstIterator *)new DcmDictEntryListConstIterator((OFIterator<DcmDictEntry * > const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmDictEntryListConstIterator(void * jarg1) {
    DcmDictEntryListConstIterator *arg1 = (DcmDictEntryListConstIterator *) 0 ;
    
    arg1 = (DcmDictEntryListConstIterator *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDictEntryList() {
    void * jresult = 0 ;
    DcmDictEntryList *result;
    
    result = (DcmDictEntryList *)new DcmDictEntryList();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmDictEntryList(void * jarg1) {
    DcmDictEntryList *arg1 = (DcmDictEntryList *) 0 ;
    
    arg1 = (DcmDictEntryList *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_DcmDictEntryList_clear(void * jarg1) {
    DcmDictEntryList *arg1 = (DcmDictEntryList *) 0 ;
    
    arg1 = (DcmDictEntryList *)jarg1; 
    (arg1)->clear();
    
}


DllExport void * SWIGSTDCALL CSharp_DcmDictEntryList_insertAndReplace(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmDictEntryList *arg1 = (DcmDictEntryList *) 0 ;
    DcmDictEntry *arg2 = (DcmDictEntry *) 0 ;
    DcmDictEntry *result;
    
    arg1 = (DcmDictEntryList *)jarg1; 
    arg2 = (DcmDictEntry *)jarg2; 
    result = (DcmDictEntry *)(arg1)->insertAndReplace(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDictEntryList_find(void * jarg1, void * jarg2, char * jarg3) {
    void * jresult = 0 ;
    DcmDictEntryList *arg1 = (DcmDictEntryList *) 0 ;
    DcmTagKey *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    DcmDictEntry *result;
    
    arg1 = (DcmDictEntryList *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = jarg3; 
    result = (DcmDictEntry *)(arg1)->find((DcmTagKey const &)*arg2,(char const *)arg3);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmHashDictIterator__SWIG_0() {
    void * jresult = 0 ;
    DcmHashDictIterator *result;
    
    result = (DcmHashDictIterator *)new DcmHashDictIterator();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmHashDictIterator__SWIG_1(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    bool arg2 ;
    DcmHashDictIterator *result;
    
    arg1 = (DcmHashDict *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (DcmHashDictIterator *)new DcmHashDictIterator((DcmHashDict const *)arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmHashDictIterator__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    DcmHashDictIterator *result;
    
    arg1 = (DcmHashDict *)jarg1; 
    result = (DcmHashDictIterator *)new DcmHashDictIterator((DcmHashDict const *)arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmHashDictIterator__SWIG_3(void * jarg1) {
    void * jresult = 0 ;
    DcmHashDictIterator *arg1 = 0 ;
    DcmHashDictIterator *result;
    
    arg1 = (DcmHashDictIterator *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmHashDictIterator const & reference is null");
    } 
    result = (DcmHashDictIterator *)new DcmHashDictIterator((DcmHashDictIterator const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmHashDictIterator___ref__(void * jarg1) {
    void * jresult = 0 ;
    DcmHashDictIterator *arg1 = (DcmHashDictIterator *) 0 ;
    DcmDictEntry *result;
    
    arg1 = (DcmHashDictIterator *)jarg1; 
    result = (DcmDictEntry *)((DcmHashDictIterator const *)arg1)->operator *();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmHashDictIterator(void * jarg1) {
    DcmHashDictIterator *arg1 = (DcmHashDictIterator *) 0 ;
    
    arg1 = (DcmHashDictIterator *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_new_DcmHashDict__SWIG_0(int jarg1) {
    void * jresult = 0 ;
    int arg1 ;
    DcmHashDict *result;
    
    arg1 = (int)jarg1; 
    result = (DcmHashDict *)new DcmHashDict(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmHashDict__SWIG_1() {
    void * jresult = 0 ;
    DcmHashDict *result;
    
    result = (DcmHashDict *)new DcmHashDict();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmHashDict(void * jarg1) {
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    
    arg1 = (DcmHashDict *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmHashDict_size(void * jarg1) {
    int jresult = 0 ;
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    int result;
    
    arg1 = (DcmHashDict *)jarg1; 
    result = (int)((DcmHashDict const *)arg1)->size();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmHashDict_clear(void * jarg1) {
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    
    arg1 = (DcmHashDict *)jarg1; 
    (arg1)->clear();
    
}


DllExport void SWIGSTDCALL CSharp_DcmHashDict_put(void * jarg1, void * jarg2) {
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    DcmDictEntry *arg2 = (DcmDictEntry *) 0 ;
    
    arg1 = (DcmHashDict *)jarg1; 
    arg2 = (DcmDictEntry *)jarg2; 
    (arg1)->put(arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmHashDict_get(void * jarg1, void * jarg2, char * jarg3) {
    void * jresult = 0 ;
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    DcmTagKey *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    DcmDictEntry *result;
    
    arg1 = (DcmHashDict *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = jarg3; 
    result = (DcmDictEntry *)((DcmHashDict const *)arg1)->get((DcmTagKey const &)*arg2,(char const *)arg3);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmHashDict_del(void * jarg1, void * jarg2, char * jarg3) {
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    DcmTagKey *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    
    arg1 = (DcmHashDict *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = jarg3; 
    (arg1)->del((DcmTagKey const &)*arg2,(char const *)arg3);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmHashDict_begin(void * jarg1) {
    void * jresult = 0 ;
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    DcmHashDictIterator result;
    
    arg1 = (DcmHashDict *)jarg1; 
    result = ((DcmHashDict const *)arg1)->begin();
    
    jresult = new DcmHashDictIterator((DcmHashDictIterator &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmHashDict_end(void * jarg1) {
    void * jresult = 0 ;
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    DcmHashDictIterator result;
    
    arg1 = (DcmHashDict *)jarg1; 
    result = ((DcmHashDict const *)arg1)->end();
    
    jresult = new DcmHashDictIterator((DcmHashDictIterator &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmHashDict_loadSummary(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmHashDict *arg1 = (DcmHashDict *) 0 ;
    ostream *arg2 = 0 ;
    ostream *result;
    
    arg1 = (DcmHashDict *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    {
        ostream &_result_ref = (arg1)->loadSummary(*arg2);
        result = (ostream *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DCM_MAXDICTLINESIZE() {
    int jresult = 0 ;
    int result;
    
    result = (int) 2048;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DCM_MAXDICTFIELDS() {
    int jresult = 0 ;
    int result;
    
    result = (int) 6;
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_DCM_DICT_ENVIRONMENT_VARIABLE() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "DCMDICTPATH";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char SWIGSTDCALL CSharp_get_ENVIRONMENT_PATH_SEPARATOR() {
    char jresult = 0 ;
    char result;
    
    result = (char) '\n';
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDataDictionary(unsigned int jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    bool arg1 ;
    bool arg2 ;
    DcmDataDictionary *result;
    
    arg1 = jarg1 ? true : false; 
    arg2 = jarg2 ? true : false; 
    result = (DcmDataDictionary *)new DcmDataDictionary(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmDataDictionary(void * jarg1) {
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    delete arg1;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmDataDictionary_isDictionaryLoaded(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    bool result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    result = (bool)((DcmDataDictionary const *)arg1)->isDictionaryLoaded();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDataDictionary_numberOfNormalTagEntries(void * jarg1) {
    int jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    int result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    result = (int)((DcmDataDictionary const *)arg1)->numberOfNormalTagEntries();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDataDictionary_numberOfRepeatingTagEntries(void * jarg1) {
    int jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    int result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    result = (int)((DcmDataDictionary const *)arg1)->numberOfRepeatingTagEntries();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDataDictionary_numberOfEntries(void * jarg1) {
    int jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    int result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    result = (int)((DcmDataDictionary const *)arg1)->numberOfEntries();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDataDictionary_numberOfSkeletonEntries(void * jarg1) {
    int jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    int result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    result = (int)((DcmDataDictionary const *)arg1)->numberOfSkeletonEntries();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmDataDictionary_loadDictionary__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
    unsigned int jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    char *arg2 = (char *) 0 ;
    bool arg3 ;
    bool result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3 ? true : false; 
    result = (bool)(arg1)->loadDictionary((char const *)arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmDataDictionary_loadDictionary__SWIG_1(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    arg2 = jarg2; 
    result = (bool)(arg1)->loadDictionary((char const *)arg2);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataDictionary_findEntry__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
    void * jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    DcmTagKey *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    DcmDictEntry *result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = jarg3; 
    result = (DcmDictEntry *)((DcmDataDictionary const *)arg1)->findEntry((DcmTagKey const &)*arg2,(char const *)arg3);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataDictionary_findEntry__SWIG_1(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    char *arg2 = (char *) 0 ;
    DcmDictEntry *result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    arg2 = jarg2; 
    result = (DcmDictEntry *)((DcmDataDictionary const *)arg1)->findEntry((char const *)arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmDataDictionary_clear(void * jarg1) {
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    (arg1)->clear();
    
}


DllExport void SWIGSTDCALL CSharp_DcmDataDictionary_addEntry(void * jarg1, void * jarg2) {
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    DcmDictEntry *arg2 = (DcmDictEntry *) 0 ;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    arg2 = (DcmDictEntry *)jarg2; 
    (arg1)->addEntry(arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmDataDictionary_normalBegin(void * jarg1) {
    void * jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    DcmHashDictIterator result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    result = (arg1)->normalBegin();
    
    jresult = new DcmHashDictIterator((DcmHashDictIterator &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataDictionary_normalEnd(void * jarg1) {
    void * jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    DcmHashDictIterator result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    result = (arg1)->normalEnd();
    
    jresult = new DcmHashDictIterator((DcmHashDictIterator &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataDictionary_repeatingBegin(void * jarg1) {
    void * jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    DcmDictEntryListIterator result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    result = (arg1)->repeatingBegin();
    
    jresult = new DcmDictEntryListIterator((DcmDictEntryListIterator &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataDictionary_repeatingEnd(void * jarg1) {
    void * jresult = 0 ;
    DcmDataDictionary *arg1 = (DcmDataDictionary *) 0 ;
    DcmDictEntryListIterator result;
    
    arg1 = (DcmDataDictionary *)jarg1; 
    result = (arg1)->repeatingEnd();
    
    jresult = new DcmDictEntryListIterator((DcmDictEntryListIterator &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_GlobalDcmDataDictionary(unsigned int jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    bool arg1 ;
    bool arg2 ;
    GlobalDcmDataDictionary *result;
    
    arg1 = jarg1 ? true : false; 
    arg2 = jarg2 ? true : false; 
    result = (GlobalDcmDataDictionary *)new GlobalDcmDataDictionary(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_GlobalDcmDataDictionary(void * jarg1) {
    GlobalDcmDataDictionary *arg1 = (GlobalDcmDataDictionary *) 0 ;
    
    arg1 = (GlobalDcmDataDictionary *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_GlobalDcmDataDictionary_rdlock(void * jarg1) {
    void * jresult = 0 ;
    GlobalDcmDataDictionary *arg1 = (GlobalDcmDataDictionary *) 0 ;
    DcmDataDictionary *result;
    
    arg1 = (GlobalDcmDataDictionary *)jarg1; 
    {
        DcmDataDictionary const &_result_ref = (arg1)->rdlock();
        result = (DcmDataDictionary *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_GlobalDcmDataDictionary_wrlock(void * jarg1) {
    void * jresult = 0 ;
    GlobalDcmDataDictionary *arg1 = (GlobalDcmDataDictionary *) 0 ;
    DcmDataDictionary *result;
    
    arg1 = (GlobalDcmDataDictionary *)jarg1; 
    {
        DcmDataDictionary &_result_ref = (arg1)->wrlock();
        result = (DcmDataDictionary *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_GlobalDcmDataDictionary_unlock(void * jarg1) {
    GlobalDcmDataDictionary *arg1 = (GlobalDcmDataDictionary *) 0 ;
    
    arg1 = (GlobalDcmDataDictionary *)jarg1; 
    (arg1)->unlock();
    
}


DllExport unsigned int SWIGSTDCALL CSharp_GlobalDcmDataDictionary_isDictionaryLoaded(void * jarg1) {
    unsigned int jresult = 0 ;
    GlobalDcmDataDictionary *arg1 = (GlobalDcmDataDictionary *) 0 ;
    bool result;
    
    arg1 = (GlobalDcmDataDictionary *)jarg1; 
    result = (bool)(arg1)->isDictionaryLoaded();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_GlobalDcmDataDictionary_clear(void * jarg1) {
    GlobalDcmDataDictionary *arg1 = (GlobalDcmDataDictionary *) 0 ;
    
    arg1 = (GlobalDcmDataDictionary *)jarg1; 
    (arg1)->clear();
    
}


DllExport void * SWIGSTDCALL CSharp_get_dcmDataDict() {
    void * jresult = 0 ;
    GlobalDcmDataDictionary *result;
    
    result = (GlobalDcmDataDictionary *)&dcmDataDict;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_DCM_DICT_DEFTAG_BUILD_DATE() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "2004-04-06 19:43:15";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCM_MaxReadLength() {
    unsigned long jresult = 0 ;
    Uint32 result;
    
    result = (Uint32)(Uint32)DCM_MaxReadLength;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCM_TagInfoLength() {
    unsigned long jresult = 0 ;
    Uint32 result;
    
    result = (Uint32)(Uint32)DCM_TagInfoLength;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCM_OptPrintLineLength() {
    unsigned long jresult = 0 ;
    Uint32 result;
    
    result = (Uint32)(Uint32)DCM_OptPrintLineLength;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_get_DCM_OptPrintValueLength() {
    unsigned long jresult = 0 ;
    Uint32 result;
    
    result = (Uint32)(Uint32)DCM_OptPrintValueLength;
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_dcmEnableAutomaticInputDataCorrection(void * jarg1) {
    OFGlobal<bool > *arg1 = (OFGlobal<bool > *) 0 ;
    
    arg1 = (OFGlobal<bool > *)jarg1; 
    dcmEnableAutomaticInputDataCorrection = *arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_get_dcmEnableAutomaticInputDataCorrection() {
    void * jresult = 0 ;
    OFGlobal<bool > *result;
    
    result = (OFGlobal<bool > *)&dcmEnableAutomaticInputDataCorrection;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_dcmAcceptOddAttributeLength(void * jarg1) {
    OFGlobal<bool > *arg1 = (OFGlobal<bool > *) 0 ;
    
    arg1 = (OFGlobal<bool > *)jarg1; 
    dcmAcceptOddAttributeLength = *arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_get_dcmAcceptOddAttributeLength() {
    void * jresult = 0 ;
    OFGlobal<bool > *result;
    
    result = (OFGlobal<bool > *)&dcmAcceptOddAttributeLength;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmObject(void * jarg1) {
    DcmObject *arg1 = (DcmObject *) 0 ;
    
    arg1 = (DcmObject *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmObject_ident(void * jarg1) {
    int jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (DcmEVR)((DcmObject const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmObject_getVR(void * jarg1) {
    int jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (DcmEVR)((DcmObject const *)arg1)->getVR();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmObject_isaString(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    bool result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (bool)((DcmObject const *)arg1)->isaString();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmObject_isLeaf(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    bool result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (bool)((DcmObject const *)arg1)->isLeaf();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmObject_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmObject *arg1 = (DcmObject *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmObject_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmObject *arg1 = (DcmObject *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmObject_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmObject *arg1 = (DcmObject *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmObject_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmObject *arg1 = (DcmObject *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmObject_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmObject *arg1 = (DcmObject *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_error(void * jarg1) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    result = ((DcmObject const *)arg1)->error();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmObject_transferState(void * jarg1) {
    int jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    E_TransferState result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (E_TransferState)((DcmObject const *)arg1)->transferState();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmObject_transferInit(void * jarg1) {
    DcmObject *arg1 = (DcmObject *) 0 ;
    
    arg1 = (DcmObject *)jarg1; 
    (arg1)->transferInit();
    
}


DllExport void SWIGSTDCALL CSharp_DcmObject_transferEnd(void * jarg1) {
    DcmObject *arg1 = (DcmObject *) 0 ;
    
    arg1 = (DcmObject *)jarg1; 
    (arg1)->transferEnd();
    
}


DllExport unsigned short SWIGSTDCALL CSharp_DcmObject_getGTag(void * jarg1) {
    unsigned short jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    Uint16 result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (Uint16)((DcmObject const *)arg1)->getGTag();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_DcmObject_getETag(void * jarg1) {
    unsigned short jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    Uint16 result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (Uint16)((DcmObject const *)arg1)->getETag();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_getTag(void * jarg1) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmTag *result;
    
    arg1 = (DcmObject *)jarg1; 
    {
        DcmTag const &_result_ref = ((DcmObject const *)arg1)->getTag();
        result = (DcmTag *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmObject_setGTag(void * jarg1, unsigned short jarg2) {
    DcmObject *arg1 = (DcmObject *) 0 ;
    Uint16 arg2 ;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (Uint16)jarg2; 
    (arg1)->setGTag(arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_setVR(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmEVR arg2 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmEVR)jarg2; 
    result = (arg1)->setVR((DcmEVR )arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmObject_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    unsigned long result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmObject_calcElementLength(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->calcElementLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmObject_getLength__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmObject_getLength__SWIG_1(void * jarg1, int jarg2) {
    unsigned long jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    E_TransferSyntax arg2 ;
    Uint32 result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmObject_getLength__SWIG_2(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    Uint32 result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (Uint32)(arg1)->getLength();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmObject_canWriteXfer(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    E_TransferSyntax arg2 ;
    E_TransferSyntax arg3 ;
    bool result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2,(E_TransferSyntax )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_read__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_read__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_read__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_write__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_write__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_writeXML__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    result = (arg1)->writeXML(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_writeXML__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    ostream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    result = (arg1)->writeXML(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_writeSignatureFormat__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_writeSignatureFormat__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmObject_isSignable(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    bool result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (bool)((DcmObject const *)arg1)->isSignable();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmObject_containsUnknownVR(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    bool result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (bool)((DcmObject const *)arg1)->containsUnknownVR();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_clear(void * jarg1) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (arg1)->clear();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_nextInContainer(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmObject *arg2 = (DcmObject *) 0 ;
    DcmObject *result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmObject *)jarg2; 
    result = (DcmObject *)(arg1)->nextInContainer((DcmObject const *)arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_nextObject(void * jarg1, void * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmStack *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmStack *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    arg3 = jarg3 ? true : false; 
    result = (arg1)->nextObject(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_search__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmStack *arg3 = 0 ;
    E_SearchMode arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmStack *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    arg4 = (E_SearchMode)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->search((DcmTagKey const &)*arg2,*arg3,(E_SearchMode )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_search__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmStack *arg3 = 0 ;
    E_SearchMode arg4 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmStack *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    arg4 = (E_SearchMode)jarg4; 
    result = (arg1)->search((DcmTagKey const &)*arg2,*arg3,(E_SearchMode )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_search__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmStack *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmStack *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    result = (arg1)->search((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_searchErrors(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    DcmStack *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    arg2 = (DcmStack *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    result = (arg1)->searchErrors(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmObject_loadAllDataIntoMemory(void * jarg1) {
    void * jresult = 0 ;
    DcmObject *arg1 = (DcmObject *) 0 ;
    OFCondition result;
    
    arg1 = (DcmObject *)jarg1; 
    result = (arg1)->loadAllDataIntoMemory();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmElement(void * jarg1) {
    DcmElement *arg1 = (DcmElement *) 0 ;
    
    arg1 = (DcmElement *)jarg1; 
    delete arg1;
    
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmElement_calcElementLength(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->calcElementLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmElement_getLength__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmElement_getLength__SWIG_1(void * jarg1, int jarg2) {
    unsigned long jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    E_TransferSyntax arg2 ;
    Uint32 result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmElement_getLength__SWIG_2(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint32 result;
    
    arg1 = (DcmElement *)jarg1; 
    result = (Uint32)(arg1)->getLength();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmElement_isLeaf(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    bool result;
    
    arg1 = (DcmElement *)jarg1; 
    result = (bool)((DcmElement const *)arg1)->isLeaf();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmElement_valueLoaded(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    bool result;
    
    arg1 = (DcmElement *)jarg1; 
    result = (bool)(arg1)->valueLoaded();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmElement_transferInit(void * jarg1) {
    DcmElement *arg1 = (DcmElement *) 0 ;
    
    arg1 = (DcmElement *)jarg1; 
    (arg1)->transferInit();
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmElement_canWriteXfer(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    E_TransferSyntax arg2 ;
    E_TransferSyntax arg3 ;
    bool result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2,(E_TransferSyntax )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_read__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_read__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_read__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_write__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_write__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_writeXML__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    result = (arg1)->writeXML(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_writeXML__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    ostream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    result = (arg1)->writeXML(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_writeSignatureFormat__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_writeSignatureFormat__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_clear(void * jarg1) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    result = (arg1)->clear();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_loadAllDataIntoMemory(void * jarg1) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    result = (arg1)->loadAllDataIntoMemory();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getUint8__SWIG_0(void * jarg1, unsigned char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint8 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint8 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getUint8(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getUint8__SWIG_1(void * jarg1, unsigned char * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint8 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint8 *)jarg2; 
    result = (arg1)->getUint8(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getSint16__SWIG_0(void * jarg1, short * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint16 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getSint16(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getSint16__SWIG_1(void * jarg1, short * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint16 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint16 *)jarg2; 
    result = (arg1)->getSint16(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getUint16__SWIG_0(void * jarg1, unsigned short * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint16 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getUint16(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getUint16__SWIG_1(void * jarg1, unsigned short * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint16 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    result = (arg1)->getUint16(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getSint32__SWIG_0(void * jarg1, int * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint32 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getSint32(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getSint32__SWIG_1(void * jarg1, int * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint32 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint32 *)jarg2; 
    result = (arg1)->getSint32(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getUint32__SWIG_0(void * jarg1, unsigned int * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint32 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getUint32(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getUint32__SWIG_1(void * jarg1, unsigned int * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint32 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint32 *)jarg2; 
    result = (arg1)->getUint32(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getFloat32__SWIG_0(void * jarg1, float * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float32 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getFloat32(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getFloat32__SWIG_1(void * jarg1, float * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float32 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float32 *)jarg2; 
    result = (arg1)->getFloat32(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getFloat64__SWIG_0(void * jarg1, double * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float64 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float64 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getFloat64(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getFloat64__SWIG_1(void * jarg1, double * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float64 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float64 *)jarg2; 
    result = (arg1)->getFloat64(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getTagVal__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmTagKey *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey & reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getTagVal(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getTagVal__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmTagKey *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey & reference is null");
    } 
    result = (arg1)->getTagVal(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getOFStringArray__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = (arg1)->getOFStringArray(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getOFStringArray__SWIG_1(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (arg1)->getOFStringArray(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getString(void * jarg1, char** jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    char **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (char **)jarg2; 
    result = (arg1)->getString(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getUint8Array(void * jarg1, unsigned char** jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint8 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint8 **)jarg2; 
    result = (arg1)->getUint8Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getSint16Array(void * jarg1, short** jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint16 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint16 **)jarg2; 
    result = (arg1)->getSint16Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getUint16Array(void * jarg1, unsigned short** jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint16 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint16 **)jarg2; 
    result = (arg1)->getUint16Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getSint32Array(void * jarg1, int** jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint32 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint32 **)jarg2; 
    result = (arg1)->getSint32Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getUint32Array(void * jarg1, unsigned int** jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint32 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint32 **)jarg2; 
    result = (arg1)->getUint32Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getFloat32Array(void * jarg1, float** jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float32 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float32 **)jarg2; 
    result = (arg1)->getFloat32Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_getFloat64Array(void * jarg1, double** jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float64 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float64 **)jarg2; 
    result = (arg1)->getFloat64Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_detachValueField__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->detachValueField(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_detachValueField__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    result = (arg1)->detachValueField();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putOFStringArray(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    if (!jarg2) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    result = (arg1)->putOFStringArray((std::string const &)*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putSint16__SWIG_0(void * jarg1, short jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint16 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint16)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putSint16(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putSint16__SWIG_1(void * jarg1, short jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint16 arg2 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint16)jarg2; 
    result = (arg1)->putSint16(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putUint16__SWIG_0(void * jarg1, unsigned short jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint16 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint16)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint16(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putUint16__SWIG_1(void * jarg1, unsigned short jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint16 arg2 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint16)jarg2; 
    result = (arg1)->putUint16(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putSint32__SWIG_0(void * jarg1, long jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint32 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint32)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putSint32(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putSint32__SWIG_1(void * jarg1, long jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint32 arg2 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint32)jarg2; 
    result = (arg1)->putSint32(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putUint32__SWIG_0(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint32 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint32)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint32(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putUint32__SWIG_1(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint32 arg2 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint32)jarg2; 
    result = (arg1)->putUint32(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putFloat32__SWIG_0(void * jarg1, float jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float32 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float32)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putFloat32(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putFloat32__SWIG_1(void * jarg1, float jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float32 arg2 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float32)jarg2; 
    result = (arg1)->putFloat32(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putFloat64__SWIG_0(void * jarg1, double jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float64 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float64)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putFloat64(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putFloat64__SWIG_1(void * jarg1, double jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float64 arg2 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float64)jarg2; 
    result = (arg1)->putFloat64(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putTagVal__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmTagKey *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putTagVal((DcmTagKey const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putTagVal__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    DcmTagKey *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    result = (arg1)->putTagVal((DcmTagKey const &)*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putUint8Array(void * jarg1, const unsigned char* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint8 *arg2 = (Uint8 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint8 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint8Array((Uint8 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putSint16Array(void * jarg1, const short* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint16 *arg2 = (Sint16 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putSint16Array((Sint16 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putUint16Array(void * jarg1, const unsigned short* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint16 *arg2 = (Uint16 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint16Array((Uint16 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putSint32Array(void * jarg1, const int* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Sint32 *arg2 = (Sint32 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Sint32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putSint32Array((Sint32 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putUint32Array(void * jarg1, const unsigned int* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Uint32 *arg2 = (Uint32 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Uint32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint32Array((Uint32 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putFloat32Array(void * jarg1, const float* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float32 *arg2 = (Float32 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putFloat32Array((Float32 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmElement_putFloat64Array(void * jarg1, const double* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement *arg1 = (DcmElement *) 0 ;
    Float64 *arg2 = (Float64 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement *)jarg1; 
    arg2 = (Float64 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putFloat64Array((Float64 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmItem__SWIG_0() {
    void * jresult = 0 ;
    DcmItem *result;
    
    result = (DcmItem *)new DcmItem();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmItem__SWIG_1(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmItem *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmItem *)new DcmItem((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmItem__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmItem *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmItem *)new DcmItem((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmItem__SWIG_3(void * jarg1) {
    void * jresult = 0 ;
    DcmItem *arg1 = 0 ;
    DcmItem *result;
    
    arg1 = (DcmItem *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmItem const & reference is null");
    } 
    result = (DcmItem *)new DcmItem((DcmItem const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmItem(void * jarg1) {
    DcmItem *arg1 = (DcmItem *) 0 ;
    
    arg1 = (DcmItem *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmItem_ident(void * jarg1) {
    int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmItem *)jarg1; 
    result = (DcmEVR)((DcmItem const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmItem_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    unsigned long result;
    
    arg1 = (DcmItem *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmItem_card(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    unsigned long result;
    
    arg1 = (DcmItem *)jarg1; 
    result = (unsigned long)((DcmItem const *)arg1)->card();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmItem_isLeaf(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    bool result;
    
    arg1 = (DcmItem *)jarg1; 
    result = (bool)((DcmItem const *)arg1)->isLeaf();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmItem_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmItem *arg1 = (DcmItem *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmItem_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmItem *arg1 = (DcmItem *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmItem_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmItem *arg1 = (DcmItem *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmItem_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmItem *arg1 = (DcmItem *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmItem_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmItem *arg1 = (DcmItem *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmItem_calcElementLength(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->calcElementLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmItem_getLength__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmItem_getLength__SWIG_1(void * jarg1, int jarg2) {
    unsigned long jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_TransferSyntax arg2 ;
    Uint32 result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmItem_getLength__SWIG_2(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    Uint32 result;
    
    arg1 = (DcmItem *)jarg1; 
    result = (Uint32)(arg1)->getLength();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmItem_transferInit(void * jarg1) {
    DcmItem *arg1 = (DcmItem *) 0 ;
    
    arg1 = (DcmItem *)jarg1; 
    (arg1)->transferInit();
    
}


DllExport void SWIGSTDCALL CSharp_DcmItem_transferEnd(void * jarg1) {
    DcmItem *arg1 = (DcmItem *) 0 ;
    
    arg1 = (DcmItem *)jarg1; 
    (arg1)->transferEnd();
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmItem_canWriteXfer(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_TransferSyntax arg2 ;
    E_TransferSyntax arg3 ;
    bool result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2,(E_TransferSyntax )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_read__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_read__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_read__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_write__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_write__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_writeXML__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    result = (arg1)->writeXML(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_writeXML__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    ostream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    result = (arg1)->writeXML(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_writeSignatureFormat__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_writeSignatureFormat__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmItem_containsUnknownVR(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    bool result;
    
    arg1 = (DcmItem *)jarg1; 
    result = (bool)((DcmItem const *)arg1)->containsUnknownVR();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_insert__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmElement *arg2 = (DcmElement *) 0 ;
    bool arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmElement *)jarg2; 
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->insert(arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_insert__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmElement *arg2 = (DcmElement *) 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmElement *)jarg2; 
    arg3 = jarg3 ? true : false; 
    result = (arg1)->insert(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_insert__SWIG_2(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmElement *arg2 = (DcmElement *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmElement *)jarg2; 
    result = (arg1)->insert(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_getElement(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    unsigned long arg2 ;
    DcmElement *result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (unsigned long)jarg2; 
    result = (DcmElement *)(arg1)->getElement(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_nextObject(void * jarg1, void * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmStack *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmStack *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    arg3 = jarg3 ? true : false; 
    result = (arg1)->nextObject(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_nextInContainer(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmObject *arg2 = (DcmObject *) 0 ;
    DcmObject *result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmObject *)jarg2; 
    result = (DcmObject *)(arg1)->nextInContainer((DcmObject const *)arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_remove__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    unsigned long arg2 ;
    DcmElement *result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (unsigned long)jarg2; 
    result = (DcmElement *)(arg1)->remove(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_remove__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmObject *arg2 = (DcmObject *) 0 ;
    DcmElement *result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmObject *)jarg2; 
    result = (DcmElement *)(arg1)->remove(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_remove__SWIG_2(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmElement *result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    result = (DcmElement *)(arg1)->remove((DcmTagKey const &)*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_clear(void * jarg1) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    result = (arg1)->clear();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_search__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmStack *arg3 = 0 ;
    E_SearchMode arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmStack *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    arg4 = (E_SearchMode)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->search((DcmTagKey const &)*arg2,*arg3,(E_SearchMode )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_search__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmStack *arg3 = 0 ;
    E_SearchMode arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmStack *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    arg4 = (E_SearchMode)jarg4; 
    result = (arg1)->search((DcmTagKey const &)*arg2,*arg3,(E_SearchMode )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_search__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmStack *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmStack *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    result = (arg1)->search((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_searchErrors(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmStack *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmStack *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    result = (arg1)->searchErrors(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_loadAllDataIntoMemory(void * jarg1) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    result = (arg1)->loadAllDataIntoMemory();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_computeGroupLengthAndPadding__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, unsigned long jarg6, unsigned long jarg7, unsigned long jarg8) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    E_TransferSyntax arg4 ;
    E_EncodingType arg5 ;
    Uint32 arg6 ;
    Uint32 arg7 ;
    Uint32 arg8 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    arg4 = (E_TransferSyntax)jarg4; 
    arg5 = (E_EncodingType)jarg5; 
    arg6 = (Uint32)jarg6; 
    arg7 = (Uint32)jarg7; 
    arg8 = (Uint32)jarg8; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3,(E_TransferSyntax )arg4,(E_EncodingType )arg5,arg6,arg7,arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_computeGroupLengthAndPadding__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, unsigned long jarg6, unsigned long jarg7) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    E_TransferSyntax arg4 ;
    E_EncodingType arg5 ;
    Uint32 arg6 ;
    Uint32 arg7 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    arg4 = (E_TransferSyntax)jarg4; 
    arg5 = (E_EncodingType)jarg5; 
    arg6 = (Uint32)jarg6; 
    arg7 = (Uint32)jarg7; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3,(E_TransferSyntax )arg4,(E_EncodingType )arg5,arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_computeGroupLengthAndPadding__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, unsigned long jarg6) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    E_TransferSyntax arg4 ;
    E_EncodingType arg5 ;
    Uint32 arg6 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    arg4 = (E_TransferSyntax)jarg4; 
    arg5 = (E_EncodingType)jarg5; 
    arg6 = (Uint32)jarg6; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3,(E_TransferSyntax )arg4,(E_EncodingType )arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_computeGroupLengthAndPadding__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    E_TransferSyntax arg4 ;
    E_EncodingType arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    arg4 = (E_TransferSyntax)jarg4; 
    arg5 = (E_EncodingType)jarg5; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3,(E_TransferSyntax )arg4,(E_EncodingType )arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_computeGroupLengthAndPadding__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    E_TransferSyntax arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    arg4 = (E_TransferSyntax)jarg4; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3,(E_TransferSyntax )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_computeGroupLengthAndPadding__SWIG_5(void * jarg1, int jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_computeGroupLengthAndPadding__SWIG_6(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    E_GrpLenEncoding arg2 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmItem_tagExists__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    bool arg3 ;
    bool result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = jarg3 ? true : false; 
    result = (bool)(arg1)->tagExists((DcmTagKey const &)*arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmItem_tagExists__SWIG_1(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    bool result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    result = (bool)(arg1)->tagExists((DcmTagKey const &)*arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmItem_tagExistsWithValue__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    bool arg3 ;
    bool result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = jarg3 ? true : false; 
    result = (bool)(arg1)->tagExistsWithValue((DcmTagKey const &)*arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmItem_tagExistsWithValue__SWIG_1(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    bool result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    result = (bool)(arg1)->tagExistsWithValue((DcmTagKey const &)*arg2);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetElement__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmElement **arg3 = 0 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmElement **)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmElement *& reference is null");
    } 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->findAndGetElement((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetElement__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmElement **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmElement **)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmElement *& reference is null");
    } 
    result = (arg1)->findAndGetElement((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetElements(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmStack *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmStack *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    result = (arg1)->findAndGetElements((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetString__SWIG_0(void * jarg1, void * jarg2, char** jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    char **arg3 = 0 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (char **)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->findAndGetString((DcmTagKey const &)*arg2,(char const *&)*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetString__SWIG_1(void * jarg1, void * jarg2, char** jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    char **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (char **)jarg3; 
    result = (arg1)->findAndGetString((DcmTagKey const &)*arg2,(char const *&)*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetOFString__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    std::string *arg3 = 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    
    if (!jarg3) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg3_str;
    arg3 = &arg3_str;
    
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetOFString((DcmTagKey const &)*arg2,*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetOFString__SWIG_1(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    std::string *arg3 = 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    
    if (!jarg3) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg3_str;
    arg3 = &arg3_str;
    
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->findAndGetOFString((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetOFString__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    std::string *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    
    if (!jarg3) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg3_str;
    arg3 = &arg3_str;
    
    result = (arg1)->findAndGetOFString((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetOFStringArray__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    std::string *arg3 = 0 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    
    if (!jarg3) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg3_str;
    arg3 = &arg3_str;
    
    arg4 = jarg4 ? true : false; 
    result = (arg1)->findAndGetOFStringArray((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetOFStringArray__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    std::string *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    
    if (!jarg3) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg3_str;
    arg3 = &arg3_str;
    
    result = (arg1)->findAndGetOFStringArray((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint8__SWIG_0(void * jarg1, void * jarg2, unsigned char * jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint8 *arg3 = 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint8 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetUint8((DcmTagKey const &)*arg2,*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint8__SWIG_1(void * jarg1, void * jarg2, unsigned char * jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint8 *arg3 = 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint8 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->findAndGetUint8((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint8__SWIG_2(void * jarg1, void * jarg2, unsigned char * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint8 *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint8 *)jarg3; 
    result = (arg1)->findAndGetUint8((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint8Array__SWIG_0(void * jarg1, void * jarg2, unsigned char** jarg3, void * jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint8 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint8 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetUint8Array((DcmTagKey const &)*arg2,(unsigned char const *&)*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint8Array__SWIG_1(void * jarg1, void * jarg2, unsigned char** jarg3, void * jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint8 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint8 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    result = (arg1)->findAndGetUint8Array((DcmTagKey const &)*arg2,(unsigned char const *&)*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint8Array__SWIG_2(void * jarg1, void * jarg2, unsigned char** jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint8 **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint8 **)jarg3; 
    result = (arg1)->findAndGetUint8Array((DcmTagKey const &)*arg2,(unsigned char const *&)*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint16__SWIG_0(void * jarg1, void * jarg2, unsigned short * jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint16 *arg3 = 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint16 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetUint16((DcmTagKey const &)*arg2,*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint16__SWIG_1(void * jarg1, void * jarg2, unsigned short * jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint16 *arg3 = 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint16 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->findAndGetUint16((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint16__SWIG_2(void * jarg1, void * jarg2, unsigned short * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint16 *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint16 *)jarg3; 
    result = (arg1)->findAndGetUint16((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint16Array__SWIG_0(void * jarg1, void * jarg2, unsigned short** jarg3, void * jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint16 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint16 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetUint16Array((DcmTagKey const &)*arg2,(unsigned short const *&)*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint16Array__SWIG_1(void * jarg1, void * jarg2, unsigned short** jarg3, void * jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint16 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint16 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    result = (arg1)->findAndGetUint16Array((DcmTagKey const &)*arg2,(unsigned short const *&)*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint16Array__SWIG_2(void * jarg1, void * jarg2, unsigned short** jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint16 **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint16 **)jarg3; 
    result = (arg1)->findAndGetUint16Array((DcmTagKey const &)*arg2,(unsigned short const *&)*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint16__SWIG_0(void * jarg1, void * jarg2, short * jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint16 *arg3 = 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint16 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetSint16((DcmTagKey const &)*arg2,*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint16__SWIG_1(void * jarg1, void * jarg2, short * jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint16 *arg3 = 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint16 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->findAndGetSint16((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint16__SWIG_2(void * jarg1, void * jarg2, short * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint16 *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint16 *)jarg3; 
    result = (arg1)->findAndGetSint16((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint16Array__SWIG_0(void * jarg1, void * jarg2, short** jarg3, void * jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint16 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint16 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetSint16Array((DcmTagKey const &)*arg2,(short const *&)*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint16Array__SWIG_1(void * jarg1, void * jarg2, short** jarg3, void * jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint16 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint16 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    result = (arg1)->findAndGetSint16Array((DcmTagKey const &)*arg2,(short const *&)*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint16Array__SWIG_2(void * jarg1, void * jarg2, short** jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint16 **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint16 **)jarg3; 
    result = (arg1)->findAndGetSint16Array((DcmTagKey const &)*arg2,(short const *&)*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint32__SWIG_0(void * jarg1, void * jarg2, unsigned int * jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint32 *arg3 = 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint32 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetUint32((DcmTagKey const &)*arg2,*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint32__SWIG_1(void * jarg1, void * jarg2, unsigned int * jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint32 *arg3 = 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint32 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->findAndGetUint32((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint32__SWIG_2(void * jarg1, void * jarg2, unsigned int * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint32 *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint32 *)jarg3; 
    result = (arg1)->findAndGetUint32((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint32Array__SWIG_0(void * jarg1, void * jarg2, unsigned int** jarg3, void * jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint32 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint32 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetUint32Array((DcmTagKey const &)*arg2,(unsigned long const *&)*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint32Array__SWIG_1(void * jarg1, void * jarg2, unsigned int** jarg3, void * jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint32 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint32 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    result = (arg1)->findAndGetUint32Array((DcmTagKey const &)*arg2,(unsigned long const *&)*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetUint32Array__SWIG_2(void * jarg1, void * jarg2, unsigned int** jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Uint32 **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Uint32 **)jarg3; 
    result = (arg1)->findAndGetUint32Array((DcmTagKey const &)*arg2,(unsigned long const *&)*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint32__SWIG_0(void * jarg1, void * jarg2, int * jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint32 *arg3 = 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint32 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetSint32((DcmTagKey const &)*arg2,*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint32__SWIG_1(void * jarg1, void * jarg2, int * jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint32 *arg3 = 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint32 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->findAndGetSint32((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint32__SWIG_2(void * jarg1, void * jarg2, int * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint32 *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint32 *)jarg3; 
    result = (arg1)->findAndGetSint32((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint32Array__SWIG_0(void * jarg1, void * jarg2, int** jarg3, void * jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint32 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint32 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetSint32Array((DcmTagKey const &)*arg2,(long const *&)*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint32Array__SWIG_1(void * jarg1, void * jarg2, int** jarg3, void * jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint32 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint32 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    result = (arg1)->findAndGetSint32Array((DcmTagKey const &)*arg2,(long const *&)*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSint32Array__SWIG_2(void * jarg1, void * jarg2, int** jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Sint32 **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Sint32 **)jarg3; 
    result = (arg1)->findAndGetSint32Array((DcmTagKey const &)*arg2,(long const *&)*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetLongInt__SWIG_0(void * jarg1, void * jarg2, int * jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    long *arg3 = 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (long *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetLongInt((DcmTagKey const &)*arg2,*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetLongInt__SWIG_1(void * jarg1, void * jarg2, int * jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    long *arg3 = 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (long *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->findAndGetLongInt((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetLongInt__SWIG_2(void * jarg1, void * jarg2, int * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    long *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (long *)jarg3; 
    result = (arg1)->findAndGetLongInt((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat32__SWIG_0(void * jarg1, void * jarg2, float * jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float32 *arg3 = 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float32 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetFloat32((DcmTagKey const &)*arg2,*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat32__SWIG_1(void * jarg1, void * jarg2, float * jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float32 *arg3 = 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float32 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->findAndGetFloat32((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat32__SWIG_2(void * jarg1, void * jarg2, float * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float32 *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float32 *)jarg3; 
    result = (arg1)->findAndGetFloat32((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat32Array__SWIG_0(void * jarg1, void * jarg2, float** jarg3, void * jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float32 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float32 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetFloat32Array((DcmTagKey const &)*arg2,(float const *&)*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat32Array__SWIG_1(void * jarg1, void * jarg2, float** jarg3, void * jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float32 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float32 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    result = (arg1)->findAndGetFloat32Array((DcmTagKey const &)*arg2,(float const *&)*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat32Array__SWIG_2(void * jarg1, void * jarg2, float** jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float32 **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float32 **)jarg3; 
    result = (arg1)->findAndGetFloat32Array((DcmTagKey const &)*arg2,(float const *&)*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat64__SWIG_0(void * jarg1, void * jarg2, double * jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float64 *arg3 = 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float64 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetFloat64((DcmTagKey const &)*arg2,*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat64__SWIG_1(void * jarg1, void * jarg2, double * jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float64 *arg3 = 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float64 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->findAndGetFloat64((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat64__SWIG_2(void * jarg1, void * jarg2, double * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float64 *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float64 *)jarg3; 
    result = (arg1)->findAndGetFloat64((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat64Array__SWIG_0(void * jarg1, void * jarg2, double** jarg3, void * jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float64 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float64 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->findAndGetFloat64Array((DcmTagKey const &)*arg2,(double const *&)*arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat64Array__SWIG_1(void * jarg1, void * jarg2, double** jarg3, void * jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float64 **arg3 = 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float64 **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    result = (arg1)->findAndGetFloat64Array((DcmTagKey const &)*arg2,(double const *&)*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetFloat64Array__SWIG_2(void * jarg1, void * jarg2, double** jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    Float64 **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (Float64 **)jarg3; 
    result = (arg1)->findAndGetFloat64Array((DcmTagKey const &)*arg2,(double const *&)*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSequence__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmSequenceOfItems **arg3 = 0 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmSequenceOfItems **)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmSequenceOfItems *& reference is null");
    } 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->findAndGetSequence((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSequence__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmSequenceOfItems **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmSequenceOfItems **)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmSequenceOfItems *& reference is null");
    } 
    result = (arg1)->findAndGetSequence((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSequenceItem__SWIG_0(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmItem **arg3 = 0 ;
    long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmItem **)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmItem *& reference is null");
    } 
    arg4 = (long)jarg4; 
    result = (arg1)->findAndGetSequenceItem((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndGetSequenceItem__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmItem **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmItem **)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmItem *& reference is null");
    } 
    result = (arg1)->findAndGetSequenceItem((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findOrCreateSequenceItem__SWIG_0(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    DcmItem **arg3 = 0 ;
    long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (DcmItem **)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmItem *& reference is null");
    } 
    arg4 = (long)jarg4; 
    result = (arg1)->findOrCreateSequenceItem((DcmTag const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findOrCreateSequenceItem__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    DcmItem **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (DcmItem **)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmItem *& reference is null");
    } 
    result = (arg1)->findOrCreateSequenceItem((DcmTag const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndDeleteElement__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->findAndDeleteElement((DcmTagKey const &)*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndDeleteElement__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = jarg3 ? true : false; 
    result = (arg1)->findAndDeleteElement((DcmTagKey const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndDeleteElement__SWIG_2(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    result = (arg1)->findAndDeleteElement((DcmTagKey const &)*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndCopyElement__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmElement **arg3 = 0 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmElement **)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmElement *& reference is null");
    } 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->findAndCopyElement((DcmTagKey const &)*arg2,*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_findAndCopyElement__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmElement **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmElement **)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmElement *& reference is null");
    } 
    result = (arg1)->findAndCopyElement((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertString__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->putAndInsertString((DcmTag const &)*arg2,(char const *)arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertString__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = jarg3; 
    result = (arg1)->putAndInsertString((DcmTag const &)*arg2,(char const *)arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertOFStringArray__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    std::string *arg3 = 0 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    if (!jarg3) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg3_str(jarg3);
    arg3 = &arg3_str; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->putAndInsertOFStringArray((DcmTag const &)*arg2,(std::string const &)*arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertOFStringArray__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    std::string *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    if (!jarg3) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg3_str(jarg3);
    arg3 = &arg3_str; 
    result = (arg1)->putAndInsertOFStringArray((DcmTag const &)*arg2,(std::string const &)*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertUint8Array__SWIG_0(void * jarg1, void * jarg2, const unsigned char* jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Uint8 *arg3 = (Uint8 *) 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint8 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->putAndInsertUint8Array((DcmTag const &)*arg2,(Uint8 const *)arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertUint8Array__SWIG_1(void * jarg1, void * jarg2, const unsigned char* jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Uint8 *arg3 = (Uint8 *) 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint8 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->putAndInsertUint8Array((DcmTag const &)*arg2,(Uint8 const *)arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertUint16__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Uint16 arg3 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint16)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->putAndInsertUint16((DcmTag const &)*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertUint16__SWIG_1(void * jarg1, void * jarg2, unsigned short jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Uint16 arg3 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint16)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->putAndInsertUint16((DcmTag const &)*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertUint16__SWIG_2(void * jarg1, void * jarg2, unsigned short jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Uint16 arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint16)jarg3; 
    result = (arg1)->putAndInsertUint16((DcmTag const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertUint16Array__SWIG_0(void * jarg1, void * jarg2, const unsigned short* jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Uint16 *arg3 = (Uint16 *) 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint16 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->putAndInsertUint16Array((DcmTag const &)*arg2,(Uint16 const *)arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertUint16Array__SWIG_1(void * jarg1, void * jarg2, const unsigned short* jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Uint16 *arg3 = (Uint16 *) 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint16 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->putAndInsertUint16Array((DcmTag const &)*arg2,(Uint16 const *)arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertSint16__SWIG_0(void * jarg1, void * jarg2, short jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Sint16 arg3 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Sint16)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->putAndInsertSint16((DcmTag const &)*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertSint16__SWIG_1(void * jarg1, void * jarg2, short jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Sint16 arg3 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Sint16)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->putAndInsertSint16((DcmTag const &)*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertSint16__SWIG_2(void * jarg1, void * jarg2, short jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Sint16 arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Sint16)jarg3; 
    result = (arg1)->putAndInsertSint16((DcmTag const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertSint16Array__SWIG_0(void * jarg1, void * jarg2, const short* jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Sint16 *arg3 = (Sint16 *) 0 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Sint16 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->putAndInsertSint16Array((DcmTag const &)*arg2,(Sint16 const *)arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertSint16Array__SWIG_1(void * jarg1, void * jarg2, const short* jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Sint16 *arg3 = (Sint16 *) 0 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Sint16 *)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->putAndInsertSint16Array((DcmTag const &)*arg2,(Sint16 const *)arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertUint32__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Uint32 arg3 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint32)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->putAndInsertUint32((DcmTag const &)*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertUint32__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Uint32 arg3 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint32)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->putAndInsertUint32((DcmTag const &)*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertUint32__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Uint32 arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint32)jarg3; 
    result = (arg1)->putAndInsertUint32((DcmTag const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertSint32__SWIG_0(void * jarg1, void * jarg2, long jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Sint32 arg3 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Sint32)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->putAndInsertSint32((DcmTag const &)*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertSint32__SWIG_1(void * jarg1, void * jarg2, long jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Sint32 arg3 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Sint32)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->putAndInsertSint32((DcmTag const &)*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertSint32__SWIG_2(void * jarg1, void * jarg2, long jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Sint32 arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Sint32)jarg3; 
    result = (arg1)->putAndInsertSint32((DcmTag const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertFloat32__SWIG_0(void * jarg1, void * jarg2, float jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Float32 arg3 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Float32)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->putAndInsertFloat32((DcmTag const &)*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertFloat32__SWIG_1(void * jarg1, void * jarg2, float jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Float32 arg3 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Float32)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->putAndInsertFloat32((DcmTag const &)*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertFloat32__SWIG_2(void * jarg1, void * jarg2, float jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Float32 arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Float32)jarg3; 
    result = (arg1)->putAndInsertFloat32((DcmTag const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertFloat64__SWIG_0(void * jarg1, void * jarg2, double jarg3, unsigned long jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Float64 arg3 ;
    unsigned long arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Float64)jarg3; 
    arg4 = (unsigned long)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->putAndInsertFloat64((DcmTag const &)*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertFloat64__SWIG_1(void * jarg1, void * jarg2, double jarg3, unsigned long jarg4) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Float64 arg3 ;
    unsigned long arg4 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Float64)jarg3; 
    arg4 = (unsigned long)jarg4; 
    result = (arg1)->putAndInsertFloat64((DcmTag const &)*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_putAndInsertFloat64__SWIG_2(void * jarg1, void * jarg2, double jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    Float64 arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Float64)jarg3; 
    result = (arg1)->putAndInsertFloat64((DcmTag const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_insertEmptyElement__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = jarg3 ? true : false; 
    result = (arg1)->insertEmptyElement((DcmTag const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmItem_insertEmptyElement__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTag *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (arg1)->insertEmptyElement((DcmTag const &)*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_newDicomElement__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmElement **arg1 = 0 ;
    DcmTag *arg2 = 0 ;
    Uint32 arg3 ;
    OFCondition result;
    
    arg1 = (DcmElement **)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmElement *& reference is null");
    } 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg3 = (Uint32)jarg3; 
    result = newDicomElement(*arg1,(DcmTag const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_newDicomElement__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmElement **arg1 = 0 ;
    DcmTag *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmElement **)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmElement *& reference is null");
    } 
    arg2 = (DcmTag *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = newDicomElement(*arg1,(DcmTag const &)*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_newDicomElement__SWIG_2(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmElement *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmElement *)newDicomElement((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_newDicomElement__SWIG_3(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmElement *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmElement *)newDicomElement((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_nextUp(void * jarg1) {
    void * jresult = 0 ;
    DcmStack *arg1 = 0 ;
    OFCondition result;
    
    arg1 = (DcmStack *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    result = nextUp(*arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_DCM_Magic() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "DICM";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DCM_MagicLen() {
    int jresult = 0 ;
    int result;
    
    result = (int) 4;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DCM_PreambleLen() {
    int jresult = 0 ;
    int result;
    
    result = (int) 128;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmMetaInfo__SWIG_0() {
    void * jresult = 0 ;
    DcmMetaInfo *result;
    
    result = (DcmMetaInfo *)new DcmMetaInfo();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmMetaInfo__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmMetaInfo *arg1 = 0 ;
    DcmMetaInfo *result;
    
    arg1 = (DcmMetaInfo *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmMetaInfo const & reference is null");
    } 
    result = (DcmMetaInfo *)new DcmMetaInfo((DcmMetaInfo const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmMetaInfo(void * jarg1) {
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmMetaInfo_ident(void * jarg1) {
    int jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    result = (DcmEVR)((DcmMetaInfo const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmMetaInfo_getOriginalXfer(void * jarg1) {
    int jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    E_TransferSyntax result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    result = (E_TransferSyntax)((DcmMetaInfo const *)arg1)->getOriginalXfer();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmMetaInfo_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmMetaInfo_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmMetaInfo_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmMetaInfo_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmMetaInfo_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DcmMetaInfo_transferInit(void * jarg1) {
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    (arg1)->transferInit();
    
}


DllExport void SWIGSTDCALL CSharp_DcmMetaInfo_transferEnd(void * jarg1) {
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    (arg1)->transferEnd();
    
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmMetaInfo_calcElementLength(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->calcElementLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmMetaInfo_read__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmMetaInfo_read__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmMetaInfo_read__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmMetaInfo_read__SWIG_3(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    DcmInputStream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    result = (arg1)->read(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmMetaInfo_write__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmMetaInfo_write__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmMetaInfo_writeXML__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    OFCondition result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    result = (arg1)->writeXML(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmMetaInfo_writeXML__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmMetaInfo *arg1 = (DcmMetaInfo *) 0 ;
    ostream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmMetaInfo *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    result = (arg1)->writeXML(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDataset__SWIG_0() {
    void * jresult = 0 ;
    DcmDataset *result;
    
    result = (DcmDataset *)new DcmDataset();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDataset__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmDataset *arg1 = 0 ;
    DcmDataset *result;
    
    arg1 = (DcmDataset *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmDataset const & reference is null");
    } 
    result = (DcmDataset *)new DcmDataset((DcmDataset const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmDataset(void * jarg1) {
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    
    arg1 = (DcmDataset *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmDataset_ident(void * jarg1) {
    int jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmDataset *)jarg1; 
    result = (DcmEVR)((DcmDataset const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmDataset_getOriginalXfer(void * jarg1) {
    int jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    E_TransferSyntax result;
    
    arg1 = (DcmDataset *)jarg1; 
    result = (E_TransferSyntax)((DcmDataset const *)arg1)->getOriginalXfer();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmDataset_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmDataset_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmDataset_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmDataset_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmDataset_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmDataset_calcElementLength(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->calcElementLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmDataset_canWriteXfer__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    E_TransferSyntax arg2 ;
    E_TransferSyntax arg3 ;
    bool result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2,(E_TransferSyntax )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmDataset_canWriteXfer__SWIG_1(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    E_TransferSyntax arg2 ;
    bool result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_read__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_read__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_read__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_read__SWIG_3(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmInputStream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    result = (arg1)->read(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_write__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_write__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_write__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7, unsigned long jarg8, unsigned long jarg9) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    Uint32 arg8 ;
    Uint32 arg9 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    arg8 = (Uint32)jarg8; 
    arg9 = (Uint32)jarg9; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7,arg8,arg9);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_write__SWIG_3(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7, unsigned long jarg8) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    Uint32 arg8 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    arg8 = (Uint32)jarg8; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7,arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_write__SWIG_4(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_write__SWIG_5(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_write__SWIG_6(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_writeSignatureFormat__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_writeSignatureFormat__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_writeXML__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    result = (arg1)->writeXML(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_writeXML__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    ostream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    result = (arg1)->writeXML(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_loadFile__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->loadFile((char const *)arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_loadFile__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->loadFile((char const *)arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_loadFile__SWIG_2(void * jarg1, char * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->loadFile((char const *)arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_loadFile__SWIG_3(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->loadFile((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_saveFile__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7, unsigned long jarg8) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    Uint32 arg8 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    arg8 = (Uint32)jarg8; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7,arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_saveFile__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_saveFile__SWIG_2(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_saveFile__SWIG_3(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_saveFile__SWIG_4(void * jarg1, char * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_saveFile__SWIG_5(void * jarg1, char * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_saveFile__SWIG_6(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->saveFile((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDataset_chooseRepresentation(void * jarg1, int jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    OFCondition result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    result = (arg1)->chooseRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmDataset_hasRepresentation(void * jarg1, int jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    bool result;
    
    arg1 = (DcmDataset *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    result = (bool)(arg1)->hasRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmDataset_removeAllButOriginalRepresentations(void * jarg1) {
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    
    arg1 = (DcmDataset *)jarg1; 
    (arg1)->removeAllButOriginalRepresentations();
    
}


DllExport void SWIGSTDCALL CSharp_DcmDataset_removeAllButCurrentRepresentations(void * jarg1) {
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    
    arg1 = (DcmDataset *)jarg1; 
    (arg1)->removeAllButCurrentRepresentations();
    
}


DllExport void * SWIGSTDCALL CSharp_new_DcmSequenceOfItems__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmSequenceOfItems *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmSequenceOfItems *)new DcmSequenceOfItems((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmSequenceOfItems__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmSequenceOfItems *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmSequenceOfItems *)new DcmSequenceOfItems((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmSequenceOfItems__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = 0 ;
    DcmSequenceOfItems *result;
    
    arg1 = (DcmSequenceOfItems *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmSequenceOfItems const & reference is null");
    } 
    result = (DcmSequenceOfItems *)new DcmSequenceOfItems((DcmSequenceOfItems const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmSequenceOfItems(void * jarg1) {
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmSequenceOfItems_ident(void * jarg1) {
    int jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    result = (DcmEVR)((DcmSequenceOfItems const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmSequenceOfItems_isLeaf(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    bool result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    result = (bool)((DcmSequenceOfItems const *)arg1)->isLeaf();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmSequenceOfItems_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSequenceOfItems_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSequenceOfItems_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSequenceOfItems_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSequenceOfItems_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmSequenceOfItems_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    unsigned long result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, unsigned long jarg6, unsigned long jarg7, unsigned long jarg8) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    E_TransferSyntax arg4 ;
    E_EncodingType arg5 ;
    Uint32 arg6 ;
    Uint32 arg7 ;
    Uint32 arg8 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    arg4 = (E_TransferSyntax)jarg4; 
    arg5 = (E_EncodingType)jarg5; 
    arg6 = (Uint32)jarg6; 
    arg7 = (Uint32)jarg7; 
    arg8 = (Uint32)jarg8; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3,(E_TransferSyntax )arg4,(E_EncodingType )arg5,arg6,arg7,arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, unsigned long jarg6, unsigned long jarg7) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    E_TransferSyntax arg4 ;
    E_EncodingType arg5 ;
    Uint32 arg6 ;
    Uint32 arg7 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    arg4 = (E_TransferSyntax)jarg4; 
    arg5 = (E_EncodingType)jarg5; 
    arg6 = (Uint32)jarg6; 
    arg7 = (Uint32)jarg7; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3,(E_TransferSyntax )arg4,(E_EncodingType )arg5,arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, unsigned long jarg6) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    E_TransferSyntax arg4 ;
    E_EncodingType arg5 ;
    Uint32 arg6 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    arg4 = (E_TransferSyntax)jarg4; 
    arg5 = (E_EncodingType)jarg5; 
    arg6 = (Uint32)jarg6; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3,(E_TransferSyntax )arg4,(E_EncodingType )arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    E_TransferSyntax arg4 ;
    E_EncodingType arg5 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    arg4 = (E_TransferSyntax)jarg4; 
    arg5 = (E_EncodingType)jarg5; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3,(E_TransferSyntax )arg4,(E_EncodingType )arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    E_TransferSyntax arg4 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    arg4 = (E_TransferSyntax)jarg4; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3,(E_TransferSyntax )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_5(void * jarg1, int jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_GrpLenEncoding arg2 ;
    E_PaddingEncoding arg3 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    arg3 = (E_PaddingEncoding)jarg3; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2,(E_PaddingEncoding )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_computeGroupLengthAndPadding__SWIG_6(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_GrpLenEncoding arg2 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_GrpLenEncoding)jarg2; 
    result = (arg1)->computeGroupLengthAndPadding((E_GrpLenEncoding )arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmSequenceOfItems_calcElementLength(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->calcElementLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmSequenceOfItems_getLength__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmSequenceOfItems_getLength__SWIG_1(void * jarg1, int jarg2) {
    unsigned long jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_TransferSyntax arg2 ;
    Uint32 result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmSequenceOfItems_getLength__SWIG_2(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    Uint32 result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    result = (Uint32)(arg1)->getLength();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmSequenceOfItems_transferInit(void * jarg1) {
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    (arg1)->transferInit();
    
}


DllExport void SWIGSTDCALL CSharp_DcmSequenceOfItems_transferEnd(void * jarg1) {
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    (arg1)->transferEnd();
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmSequenceOfItems_canWriteXfer(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    E_TransferSyntax arg2 ;
    E_TransferSyntax arg3 ;
    bool result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2,(E_TransferSyntax )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_read__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_read__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_read__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_write__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_write__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_writeXML__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    result = (arg1)->writeXML(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_writeXML__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    ostream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    result = (arg1)->writeXML(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_writeSignatureFormat__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_writeSignatureFormat__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmSequenceOfItems_isSignable(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    bool result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    result = (bool)((DcmSequenceOfItems const *)arg1)->isSignable();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmSequenceOfItems_containsUnknownVR(void * jarg1) {
    unsigned int jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    bool result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    result = (bool)((DcmSequenceOfItems const *)arg1)->containsUnknownVR();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmSequenceOfItems_card(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    unsigned long result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    result = (unsigned long)(arg1)->card();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_prepend(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    result = (arg1)->prepend(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_insert__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->insert(arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_insert__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->insert(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_insert__SWIG_2(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    result = (arg1)->insert(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_append(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    result = (arg1)->append(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_insertAtCurrentPos__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    arg3 = jarg3 ? true : false; 
    result = (arg1)->insertAtCurrentPos(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_insertAtCurrentPos__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    result = (arg1)->insertAtCurrentPos(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_getItem(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    unsigned long arg2 ;
    DcmItem *result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (unsigned long)jarg2; 
    result = (DcmItem *)(arg1)->getItem(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_nextObject(void * jarg1, void * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmStack *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmStack *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    arg3 = jarg3 ? true : false; 
    result = (arg1)->nextObject(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_nextInContainer(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmObject *arg2 = (DcmObject *) 0 ;
    DcmObject *result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmObject *)jarg2; 
    result = (DcmObject *)(arg1)->nextInContainer((DcmObject const *)arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_remove__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    unsigned long arg2 ;
    DcmItem *result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (unsigned long)jarg2; 
    result = (DcmItem *)(arg1)->remove(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_remove__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    DcmItem *result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    result = (DcmItem *)(arg1)->remove(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_clear(void * jarg1) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    result = (arg1)->clear();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_search__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmStack *arg3 = 0 ;
    E_SearchMode arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmStack *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    arg4 = (E_SearchMode)jarg4; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->search((DcmTagKey const &)*arg2,*arg3,(E_SearchMode )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_search__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmStack *arg3 = 0 ;
    E_SearchMode arg4 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmStack *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    arg4 = (E_SearchMode)jarg4; 
    result = (arg1)->search((DcmTagKey const &)*arg2,*arg3,(E_SearchMode )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_search__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmTagKey *arg2 = 0 ;
    DcmStack *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (DcmStack *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    result = (arg1)->search((DcmTagKey const &)*arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_searchErrors(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    DcmStack *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    arg2 = (DcmStack *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    result = (arg1)->searchErrors(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSequenceOfItems_loadAllDataIntoMemory(void * jarg1) {
    void * jresult = 0 ;
    DcmSequenceOfItems *arg1 = (DcmSequenceOfItems *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSequenceOfItems *)jarg1; 
    result = (arg1)->loadAllDataIntoMemory();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmFileFormat__SWIG_0() {
    void * jresult = 0 ;
    DcmFileFormat *result;
    
    result = (DcmFileFormat *)new DcmFileFormat();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmFileFormat__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmDataset *arg1 = (DcmDataset *) 0 ;
    DcmFileFormat *result;
    
    arg1 = (DcmDataset *)jarg1; 
    result = (DcmFileFormat *)new DcmFileFormat(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmFileFormat__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = 0 ;
    DcmFileFormat *result;
    
    arg1 = (DcmFileFormat *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmFileFormat const & reference is null");
    } 
    result = (DcmFileFormat *)new DcmFileFormat((DcmFileFormat const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmFileFormat(void * jarg1) {
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    
    arg1 = (DcmFileFormat *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmFileFormat_ident(void * jarg1) {
    int jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    result = (DcmEVR)((DcmFileFormat const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmFileFormat_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFileFormat_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFileFormat_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFileFormat_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFileFormat_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_validateMetaInfo(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    E_TransferSyntax arg2 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (arg1)->validateMetaInfo((E_TransferSyntax )arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_getMetaInfo(void * jarg1) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmMetaInfo *result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    result = (DcmMetaInfo *)(arg1)->getMetaInfo();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_getDataset(void * jarg1) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmDataset *result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    result = (DcmDataset *)(arg1)->getDataset();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_getAndRemoveDataset(void * jarg1) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmDataset *result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    result = (DcmDataset *)(arg1)->getAndRemoveDataset();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmFileFormat_calcElementLength(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->calcElementLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmFileFormat_canWriteXfer__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    E_TransferSyntax arg2 ;
    E_TransferSyntax arg3 ;
    bool result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2,(E_TransferSyntax )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmFileFormat_canWriteXfer__SWIG_1(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    E_TransferSyntax arg2 ;
    bool result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_read__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_read__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_read__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_read__SWIG_3(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmInputStream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    result = (arg1)->read(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_write__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_write__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_write__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7, unsigned long jarg8, unsigned long jarg9) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    Uint32 arg8 ;
    Uint32 arg9 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    arg8 = (Uint32)jarg8; 
    arg9 = (Uint32)jarg9; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7,arg8,arg9);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_write__SWIG_3(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7, unsigned long jarg8) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    Uint32 arg8 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    arg8 = (Uint32)jarg8; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7,arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_write__SWIG_4(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_write__SWIG_5(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_write__SWIG_6(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_writeXML__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    result = (arg1)->writeXML(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_writeXML__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    ostream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    result = (arg1)->writeXML(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_loadFile__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4, unsigned long jarg5, unsigned int jarg6) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    bool arg6 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    arg6 = jarg6 ? true : false; 
    result = (arg1)->loadFile((char const *)arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_loadFile__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->loadFile((char const *)arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_loadFile__SWIG_2(void * jarg1, char * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->loadFile((char const *)arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_loadFile__SWIG_3(void * jarg1, char * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->loadFile((char const *)arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_loadFile__SWIG_4(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->loadFile((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_saveFile__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7, unsigned long jarg8, unsigned int jarg9) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    Uint32 arg8 ;
    bool arg9 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    arg8 = (Uint32)jarg8; 
    arg9 = jarg9 ? true : false; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7,arg8,arg9);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_saveFile__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7, unsigned long jarg8) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    Uint32 arg8 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    arg8 = (Uint32)jarg8; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7,arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_saveFile__SWIG_2(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned long jarg7) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    Uint32 arg7 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    arg7 = (Uint32)jarg7; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_saveFile__SWIG_3(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    E_PaddingEncoding arg6 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    arg6 = (E_PaddingEncoding)jarg6; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5,(E_PaddingEncoding )arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_saveFile__SWIG_4(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    E_GrpLenEncoding arg5 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    arg5 = (E_GrpLenEncoding)jarg5; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4,(E_GrpLenEncoding )arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_saveFile__SWIG_5(void * jarg1, char * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_saveFile__SWIG_6(void * jarg1, char * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->saveFile((char const *)arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_saveFile__SWIG_7(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->saveFile((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_chooseRepresentation(void * jarg1, int jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    result = (arg1)->chooseRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmFileFormat_hasRepresentation(void * jarg1, int jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    bool result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    result = (bool)(arg1)->hasRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmFileFormat_removeAllButOriginalRepresentations(void * jarg1) {
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    
    arg1 = (DcmFileFormat *)jarg1; 
    (arg1)->removeAllButOriginalRepresentations();
    
}


DllExport void SWIGSTDCALL CSharp_DcmFileFormat_removeAllButCurrentRepresentations(void * jarg1) {
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    
    arg1 = (DcmFileFormat *)jarg1; 
    (arg1)->removeAllButCurrentRepresentations();
    
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_insertItem__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->insertItem(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_insertItem__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    result = (arg1)->insertItem(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_remove__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    unsigned long arg2 ;
    DcmItem *result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (unsigned long)jarg2; 
    result = (DcmItem *)(arg1)->remove(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_remove__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    DcmItem *result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    result = (DcmItem *)(arg1)->remove(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFileFormat_clear(void * jarg1) {
    void * jresult = 0 ;
    DcmFileFormat *arg1 = (DcmFileFormat *) 0 ;
    OFCondition result;
    
    arg1 = (DcmFileFormat *)jarg1; 
    result = (arg1)->clear();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_DEFAULT_DICOMDIR_NAME() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "DICOMDIR";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_TEMPNAME_TEMPLATE() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "DDXXXXXX";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_DICOMDIR_BACKUP_SUFFIX() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) ".$$$";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_ItemOffset_item(void * jarg1, void * jarg2) {
    ItemOffset *arg1 = (ItemOffset *) 0 ;
    DcmItem *arg2 = (DcmItem *) 0 ;
    
    arg1 = (ItemOffset *)jarg1; 
    arg2 = (DcmItem *)jarg2; 
    if (arg1) (arg1)->item = arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_ItemOffset_item(void * jarg1) {
    void * jresult = 0 ;
    ItemOffset *arg1 = (ItemOffset *) 0 ;
    DcmItem *result;
    
    arg1 = (ItemOffset *)jarg1; 
    result = (DcmItem *) ((arg1)->item);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_ItemOffset_fileOffset(void * jarg1, unsigned long jarg2) {
    ItemOffset *arg1 = (ItemOffset *) 0 ;
    Uint32 arg2 ;
    
    arg1 = (ItemOffset *)jarg1; 
    arg2 = (Uint32)jarg2; 
    if (arg1) (arg1)->fileOffset = arg2;
    
}


DllExport unsigned long SWIGSTDCALL CSharp_get_ItemOffset_fileOffset(void * jarg1) {
    unsigned long jresult = 0 ;
    ItemOffset *arg1 = (ItemOffset *) 0 ;
    Uint32 result;
    
    arg1 = (ItemOffset *)jarg1; 
    result = (Uint32) ((arg1)->fileOffset);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_ItemOffset() {
    void * jresult = 0 ;
    ItemOffset *result;
    
    result = (ItemOffset *)new ItemOffset();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_ItemOffset(void * jarg1) {
    ItemOffset *arg1 = (ItemOffset *) 0 ;
    
    arg1 = (ItemOffset *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDicomDir__SWIG_0() {
    void * jresult = 0 ;
    DcmDicomDir *result;
    
    result = (DcmDicomDir *)new DcmDicomDir();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDicomDir__SWIG_1(char * jarg1, char * jarg2) {
    void * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    DcmDicomDir *result;
    
    arg1 = jarg1; 
    arg2 = jarg2; 
    result = (DcmDicomDir *)new DcmDicomDir((char const *)arg1,(char const *)arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDicomDir__SWIG_2(char * jarg1) {
    void * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    DcmDicomDir *result;
    
    arg1 = jarg1; 
    result = (DcmDicomDir *)new DcmDicomDir((char const *)arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDicomDir__SWIG_3(void * jarg1) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = 0 ;
    DcmDicomDir *result;
    
    arg1 = (DcmDicomDir *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmDicomDir const & reference is null");
    } 
    result = (DcmDicomDir *)new DcmDicomDir((DcmDicomDir const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmDicomDir(void * jarg1) {
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    
    arg1 = (DcmDicomDir *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_DcmDicomDir_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmDicomDir_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmDicomDir_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmDicomDir_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmDicomDir_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_error(void * jarg1) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    OFCondition result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    result = (arg1)->error();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_getDirFileFormat(void * jarg1) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    DcmFileFormat *result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    {
        DcmFileFormat &_result_ref = (arg1)->getDirFileFormat();
        result = (DcmFileFormat *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmDicomDir_getDirFileName(void * jarg1) {
    char * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    char *result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    result = (char *)(arg1)->getDirFileName();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_getRootRecord(void * jarg1) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    DcmDirectoryRecord *result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    {
        DcmDirectoryRecord &_result_ref = (arg1)->getRootRecord();
        result = (DcmDirectoryRecord *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_getMRDRSequence(void * jarg1) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    DcmSequenceOfItems *result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    {
        DcmSequenceOfItems &_result_ref = (arg1)->getMRDRSequence();
        result = (DcmSequenceOfItems *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_matchFilename(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    char *arg2 = (char *) 0 ;
    DcmDirectoryRecord *result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = jarg2; 
    result = (DcmDirectoryRecord *)(arg1)->matchFilename(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_matchOrCreateMRDR(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    char *arg2 = (char *) 0 ;
    DcmDirectoryRecord *result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = jarg2; 
    result = (DcmDirectoryRecord *)(arg1)->matchOrCreateMRDR(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_write__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->write((E_TransferSyntax )arg2,(E_EncodingType )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_write__SWIG_1(void * jarg1, int jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    OFCondition result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (arg1)->write((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_write__SWIG_2(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    E_TransferSyntax arg2 ;
    OFCondition result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (arg1)->write((E_TransferSyntax )arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_write__SWIG_3(void * jarg1) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    OFCondition result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    result = (arg1)->write();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDicomDir_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmDicomDir *arg1 = (DcmDicomDir *) 0 ;
    OFCondition result;
    
    arg1 = (DcmDicomDir *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmPixelSequence__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmPixelSequence *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmPixelSequence *)new DcmPixelSequence((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmPixelSequence__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmPixelSequence *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmPixelSequence *)new DcmPixelSequence((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmPixelSequence__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = 0 ;
    DcmPixelSequence *result;
    
    arg1 = (DcmPixelSequence *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmPixelSequence const & reference is null");
    } 
    result = (DcmPixelSequence *)new DcmPixelSequence((DcmPixelSequence const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmPixelSequence(void * jarg1) {
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmPixelSequence_ident(void * jarg1) {
    int jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    result = (DcmEVR)((DcmPixelSequence const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmPixelSequence_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmPixelSequence_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmPixelSequence_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmPixelSequence_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmPixelSequence_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmPixelSequence_calcElementLength(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->calcElementLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_insert__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmPixelItem *arg2 = (DcmPixelItem *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmPixelItem *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->insert(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_insert__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmPixelItem *arg2 = (DcmPixelItem *) 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmPixelItem *)jarg2; 
    result = (arg1)->insert(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_getItem(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmPixelItem **arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmPixelItem **)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmPixelItem *& reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getItem(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_remove__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmPixelItem **arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmPixelItem **)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmPixelItem *& reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->remove(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_remove__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmPixelItem *arg2 = (DcmPixelItem *) 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmPixelItem *)jarg2; 
    result = (arg1)->remove(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_changeXfer(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    E_TransferSyntax arg2 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (arg1)->changeXfer((E_TransferSyntax )arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmPixelSequence_canWriteXfer(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    E_TransferSyntax arg2 ;
    E_TransferSyntax arg3 ;
    bool result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2,(E_TransferSyntax )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_read__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_read__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_read__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_write(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_writeSignatureFormat__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_writeSignatureFormat__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelSequence_storeCompressedFrame(void * jarg1, void * jarg2, const unsigned char* jarg3, unsigned long jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmPixelSequence *arg1 = (DcmPixelSequence *) 0 ;
    DcmOffsetList *arg2 = 0 ;
    Uint8 *arg3 = (Uint8 *) 0 ;
    Uint32 arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmPixelSequence *)jarg1; 
    arg2 = (DcmOffsetList *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOffsetList & reference is null");
    } 
    arg3 = (Uint8 *)jarg3; 
    arg4 = (Uint32)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->storeCompressedFrame(*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmByteString__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmByteString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmByteString *)new DcmByteString((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmByteString__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmByteString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmByteString *)new DcmByteString((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmByteString__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmByteString *arg1 = 0 ;
    DcmByteString *result;
    
    arg1 = (DcmByteString *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmByteString const & reference is null");
    } 
    result = (DcmByteString *)new DcmByteString((DcmByteString const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmByteString(void * jarg1) {
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    
    arg1 = (DcmByteString *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmByteString_ident(void * jarg1) {
    int jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmByteString *)jarg1; 
    result = (DcmEVR)((DcmByteString const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_clear(void * jarg1) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    result = (arg1)->clear();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmByteString_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    unsigned long result;
    
    arg1 = (DcmByteString *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmByteString_getRealLength(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    Uint32 result;
    
    arg1 = (DcmByteString *)jarg1; 
    result = (Uint32)(arg1)->getRealLength();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmByteString_getLength__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmByteString_getLength__SWIG_1(void * jarg1, int jarg2) {
    unsigned long jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    E_TransferSyntax arg2 ;
    Uint32 result;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmByteString_getLength__SWIG_2(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    Uint32 result;
    
    arg1 = (DcmByteString *)jarg1; 
    result = (Uint32)(arg1)->getLength();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmByteString_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmByteString_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmByteString_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmByteString_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmByteString_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_write__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_write__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_writeSignatureFormat__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_writeSignatureFormat__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_getString(void * jarg1, char** jarg2) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    char **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = (char **)jarg2; 
    result = (arg1)->getString(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_putOFStringArray(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    if (!jarg2) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    result = (arg1)->putOFStringArray((std::string const &)*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmByteString_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmByteString *arg1 = (DcmByteString *) 0 ;
    OFCondition result;
    
    arg1 = (DcmByteString *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_get_DELETE_TRAILING() {
    unsigned int jresult = 0 ;
    bool result;
    
    result = (bool)(bool)DELETE_TRAILING;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_get_DELETE_LEADING() {
    unsigned int jresult = 0 ;
    bool result;
    
    result = (bool)(bool)DELETE_LEADING;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_get_MULTIPART() {
    unsigned int jresult = 0 ;
    bool result;
    
    result = (bool)(bool)MULTIPART;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_getStringPart(char * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    
    if (!jarg1) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg1_str;
    arg1 = &arg1_str;
    
    arg2 = jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = getStringPart(*arg1,(char const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmApplicationEntity__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmApplicationEntity *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmApplicationEntity *)new DcmApplicationEntity((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmApplicationEntity__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmApplicationEntity *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmApplicationEntity *)new DcmApplicationEntity((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmApplicationEntity__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmApplicationEntity *arg1 = 0 ;
    DcmApplicationEntity *result;
    
    arg1 = (DcmApplicationEntity *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmApplicationEntity const & reference is null");
    } 
    result = (DcmApplicationEntity *)new DcmApplicationEntity((DcmApplicationEntity const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmApplicationEntity(void * jarg1) {
    DcmApplicationEntity *arg1 = (DcmApplicationEntity *) 0 ;
    
    arg1 = (DcmApplicationEntity *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmApplicationEntity_ident(void * jarg1) {
    int jresult = 0 ;
    DcmApplicationEntity *arg1 = (DcmApplicationEntity *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmApplicationEntity *)jarg1; 
    result = (DcmEVR)((DcmApplicationEntity const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmApplicationEntity_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmApplicationEntity *arg1 = (DcmApplicationEntity *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmApplicationEntity *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmApplicationEntity_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmApplicationEntity *arg1 = (DcmApplicationEntity *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmApplicationEntity *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmAgeString__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmAgeString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmAgeString *)new DcmAgeString((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmAgeString__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmAgeString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmAgeString *)new DcmAgeString((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmAgeString__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmAgeString *arg1 = 0 ;
    DcmAgeString *result;
    
    arg1 = (DcmAgeString *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmAgeString const & reference is null");
    } 
    result = (DcmAgeString *)new DcmAgeString((DcmAgeString const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmAgeString(void * jarg1) {
    DcmAgeString *arg1 = (DcmAgeString *) 0 ;
    
    arg1 = (DcmAgeString *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmAgeString_ident(void * jarg1) {
    int jresult = 0 ;
    DcmAgeString *arg1 = (DcmAgeString *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmAgeString *)jarg1; 
    result = (DcmEVR)((DcmAgeString const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmCodeString__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmCodeString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmCodeString *)new DcmCodeString((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmCodeString__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmCodeString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmCodeString *)new DcmCodeString((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmCodeString__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmCodeString *arg1 = 0 ;
    DcmCodeString *result;
    
    arg1 = (DcmCodeString *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmCodeString const & reference is null");
    } 
    result = (DcmCodeString *)new DcmCodeString((DcmCodeString const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmCodeString(void * jarg1) {
    DcmCodeString *arg1 = (DcmCodeString *) 0 ;
    
    arg1 = (DcmCodeString *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmCodeString_ident(void * jarg1) {
    int jresult = 0 ;
    DcmCodeString *arg1 = (DcmCodeString *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmCodeString *)jarg1; 
    result = (DcmEVR)((DcmCodeString const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmCodeString_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmCodeString *arg1 = (DcmCodeString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmCodeString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmCodeString_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmCodeString *arg1 = (DcmCodeString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmCodeString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmCodeString_checkVR__SWIG_0(char * jarg1, void * jarg2, unsigned int jarg3) {
    unsigned int jresult = 0 ;
    std::string *arg1 = 0 ;
    size_t *arg2 = (size_t *) 0 ;
    bool arg3 ;
    bool result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    arg2 = (size_t *)jarg2; 
    arg3 = jarg3 ? true : false; 
    result = (bool)DcmCodeString::checkVR((std::string const &)*arg1,arg2,arg3);
    
    jresult = result; 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmCodeString_checkVR__SWIG_1(char * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    std::string *arg1 = 0 ;
    size_t *arg2 = (size_t *) 0 ;
    bool result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    arg2 = (size_t *)jarg2; 
    result = (bool)DcmCodeString::checkVR((std::string const &)*arg1,arg2);
    
    jresult = result; 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmCodeString_checkVR__SWIG_2(char * jarg1) {
    unsigned int jresult = 0 ;
    std::string *arg1 = 0 ;
    bool result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    result = (bool)DcmCodeString::checkVR((std::string const &)*arg1);
    
    jresult = result; 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDate__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmDate *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmDate *)new DcmDate((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDate__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmDate *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmDate *)new DcmDate((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDate__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmDate *arg1 = 0 ;
    DcmDate *result;
    
    arg1 = (DcmDate *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmDate const & reference is null");
    } 
    result = (DcmDate *)new DcmDate((DcmDate const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmDate(void * jarg1) {
    DcmDate *arg1 = (DcmDate *) 0 ;
    
    arg1 = (DcmDate *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmDate_ident(void * jarg1) {
    int jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmDate *)jarg1; 
    result = (DcmEVR)((DcmDate const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmDate *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmDate *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_setCurrentDate(void * jarg1) {
    void * jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    OFCondition result;
    
    arg1 = (DcmDate *)jarg1; 
    result = (arg1)->setCurrentDate();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_setOFDate(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    OFDate *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmDate *)jarg1; 
    arg2 = (OFDate *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDate const & reference is null");
    } 
    result = (arg1)->setOFDate((OFDate const &)*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getOFDate__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    OFDate *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmDate *)jarg1; 
    arg2 = (OFDate *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDate & reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFDate(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getOFDate__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    OFDate *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmDate *)jarg1; 
    arg2 = (OFDate *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDate & reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFDate(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getOFDate__SWIG_2(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    OFDate *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmDate *)jarg1; 
    arg2 = (OFDate *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDate & reference is null");
    } 
    result = (arg1)->getOFDate(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getISOFormattedDate__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmDate *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getISOFormattedDate(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getISOFormattedDate__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmDate *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getISOFormattedDate(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getISOFormattedDate__SWIG_2(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmDate *arg1 = (DcmDate *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmDate *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (arg1)->getISOFormattedDate(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getCurrentDate(char * jarg1) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    OFCondition result;
    
    
    if (!jarg1) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg1_str;
    arg1 = &arg1_str;
    
    result = DcmDate::getCurrentDate(*arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getDicomDateFromOFDate(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    OFDate *arg1 = 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (OFDate *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDate const & reference is null");
    } 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = DcmDate::getDicomDateFromOFDate((OFDate const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getOFDateFromString__SWIG_0(char * jarg1, void * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    OFDate *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    arg2 = (OFDate *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDate & reference is null");
    } 
    arg3 = jarg3 ? true : false; 
    result = DcmDate::getOFDateFromString((std::string const &)*arg1,*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getOFDateFromString__SWIG_1(char * jarg1, void * jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    OFDate *arg2 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    arg2 = (OFDate *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDate & reference is null");
    } 
    result = DcmDate::getOFDateFromString((std::string const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getISOFormattedDateFromString__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = DcmDate::getISOFormattedDateFromString((std::string const &)*arg1,*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDate_getISOFormattedDateFromString__SWIG_1(char * jarg1, char * jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = DcmDate::getISOFormattedDateFromString((std::string const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDecimalString__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmDecimalString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmDecimalString *)new DcmDecimalString((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDecimalString__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmDecimalString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmDecimalString *)new DcmDecimalString((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDecimalString__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmDecimalString *arg1 = 0 ;
    DcmDecimalString *result;
    
    arg1 = (DcmDecimalString *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmDecimalString const & reference is null");
    } 
    result = (DcmDecimalString *)new DcmDecimalString((DcmDecimalString const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmDecimalString(void * jarg1) {
    DcmDecimalString *arg1 = (DcmDecimalString *) 0 ;
    
    arg1 = (DcmDecimalString *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmDecimalString_ident(void * jarg1) {
    int jresult = 0 ;
    DcmDecimalString *arg1 = (DcmDecimalString *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmDecimalString *)jarg1; 
    result = (DcmEVR)((DcmDecimalString const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDecimalString_getFloat64__SWIG_0(void * jarg1, double * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmDecimalString *arg1 = (DcmDecimalString *) 0 ;
    Float64 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmDecimalString *)jarg1; 
    arg2 = (Float64 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getFloat64(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDecimalString_getFloat64__SWIG_1(void * jarg1, double * jarg2) {
    void * jresult = 0 ;
    DcmDecimalString *arg1 = (DcmDecimalString *) 0 ;
    Float64 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmDecimalString *)jarg1; 
    arg2 = (Float64 *)jarg2; 
    result = (arg1)->getFloat64(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDecimalString_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmDecimalString *arg1 = (DcmDecimalString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmDecimalString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDecimalString_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmDecimalString *arg1 = (DcmDecimalString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmDecimalString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDateTime__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmDateTime *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmDateTime *)new DcmDateTime((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDateTime__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmDateTime *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmDateTime *)new DcmDateTime((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmDateTime__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = 0 ;
    DcmDateTime *result;
    
    arg1 = (DcmDateTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmDateTime const & reference is null");
    } 
    result = (DcmDateTime *)new DcmDateTime((DcmDateTime const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmDateTime(void * jarg1) {
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    
    arg1 = (DcmDateTime *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmDateTime_ident(void * jarg1) {
    int jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmDateTime *)jarg1; 
    result = (DcmEVR)((DcmDateTime const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_setCurrentDateTime__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    bool arg2 ;
    bool arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    arg2 = jarg2 ? true : false; 
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->setCurrentDateTime(arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_setCurrentDateTime__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    bool arg2 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    arg2 = jarg2 ? true : false; 
    arg3 = jarg3 ? true : false; 
    result = (arg1)->setCurrentDateTime(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_setCurrentDateTime__SWIG_2(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->setCurrentDateTime(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_setCurrentDateTime__SWIG_3(void * jarg1) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    result = (arg1)->setCurrentDateTime();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_setOFDateTime(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    OFDateTime *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    arg2 = (OFDateTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDateTime const & reference is null");
    } 
    result = (arg1)->setOFDateTime((OFDateTime const &)*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getOFDateTime__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    OFDateTime *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    arg2 = (OFDateTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDateTime & reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFDateTime(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getOFDateTime__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    OFDateTime *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    arg2 = (OFDateTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDateTime & reference is null");
    } 
    result = (arg1)->getOFDateTime(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTime__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    bool arg7 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    arg7 = jarg7 ? true : false; 
    result = (arg1)->getISOFormattedDateTime(*arg2,arg3,arg4,arg5,arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTime__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    result = (arg1)->getISOFormattedDateTime(*arg2,arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTime__SWIG_2(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->getISOFormattedDateTime(*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTime__SWIG_3(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getISOFormattedDateTime(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTime__SWIG_4(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getISOFormattedDateTime(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTime__SWIG_5(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (arg1)->getISOFormattedDateTime(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTime__SWIG_6(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, char * jarg8) {
    void * jresult = 0 ;
    DcmDateTime *arg1 = (DcmDateTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    bool arg7 ;
    std::string *arg8 = 0 ;
    OFCondition result;
    
    arg1 = (DcmDateTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    arg7 = jarg7 ? true : false; 
    if (!jarg8) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg8_str(jarg8);
    arg8 = &arg8_str; 
    result = (arg1)->getISOFormattedDateTime(*arg2,arg3,arg4,arg5,arg6,arg7,(std::string const &)*arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg8_str.c_str() != 0 && arg8_str.length() > 0)
    {
        memcpy(jarg8, arg8_str.c_str(), arg8_str.length());
        jarg8[arg8_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getCurrentDateTime__SWIG_0(char * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    bool arg2 ;
    bool arg3 ;
    bool arg4 ;
    OFCondition result;
    
    
    if (!jarg1) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg1_str;
    arg1 = &arg1_str;
    
    arg2 = jarg2 ? true : false; 
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    result = DcmDateTime::getCurrentDateTime(*arg1,arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getCurrentDateTime__SWIG_1(char * jarg1, unsigned int jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    bool arg2 ;
    bool arg3 ;
    OFCondition result;
    
    
    if (!jarg1) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg1_str;
    arg1 = &arg1_str;
    
    arg2 = jarg2 ? true : false; 
    arg3 = jarg3 ? true : false; 
    result = DcmDateTime::getCurrentDateTime(*arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getCurrentDateTime__SWIG_2(char * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    bool arg2 ;
    OFCondition result;
    
    
    if (!jarg1) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg1_str;
    arg1 = &arg1_str;
    
    arg2 = jarg2 ? true : false; 
    result = DcmDateTime::getCurrentDateTime(*arg1,arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getCurrentDateTime__SWIG_3(char * jarg1) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    OFCondition result;
    
    
    if (!jarg1) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg1_str;
    arg1 = &arg1_str;
    
    result = DcmDateTime::getCurrentDateTime(*arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getDicomDateTimeFromOFDateTime__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    OFDateTime *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (OFDateTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDateTime const & reference is null");
    } 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    result = DcmDateTime::getDicomDateTimeFromOFDateTime((OFDateTime const &)*arg1,*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getDicomDateTimeFromOFDateTime__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    OFDateTime *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (OFDateTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDateTime const & reference is null");
    } 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    result = DcmDateTime::getDicomDateTimeFromOFDateTime((OFDateTime const &)*arg1,*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getDicomDateTimeFromOFDateTime__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    OFDateTime *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (OFDateTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDateTime const & reference is null");
    } 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = DcmDateTime::getDicomDateTimeFromOFDateTime((OFDateTime const &)*arg1,*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getDicomDateTimeFromOFDateTime__SWIG_3(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    OFDateTime *arg1 = 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (OFDateTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDateTime const & reference is null");
    } 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = DcmDateTime::getDicomDateTimeFromOFDateTime((OFDateTime const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getOFDateTimeFromString(char * jarg1, void * jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    OFDateTime *arg2 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    arg2 = (OFDateTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFDateTime & reference is null");
    } 
    result = DcmDateTime::getOFDateTimeFromString((std::string const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTimeFromString__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    result = DcmDateTime::getISOFormattedDateTimeFromString((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTimeFromString__SWIG_1(char * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    result = DcmDateTime::getISOFormattedDateTimeFromString((std::string const &)*arg1,*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTimeFromString__SWIG_2(char * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    result = DcmDateTime::getISOFormattedDateTimeFromString((std::string const &)*arg1,*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTimeFromString__SWIG_3(char * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = DcmDateTime::getISOFormattedDateTimeFromString((std::string const &)*arg1,*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTimeFromString__SWIG_4(char * jarg1, char * jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = DcmDateTime::getISOFormattedDateTimeFromString((std::string const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmDateTime_getISOFormattedDateTimeFromString__SWIG_5(char * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    std::string *arg7 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    if (!jarg7) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg7_str(jarg7);
    arg7 = &arg7_str; 
    result = DcmDateTime::getISOFormattedDateTimeFromString((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg7_str.c_str() != 0 && arg7_str.length() > 0)
    {
        memcpy(jarg7, arg7_str.c_str(), arg7_str.length());
        jarg7[arg7_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmIntegerString__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmIntegerString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmIntegerString *)new DcmIntegerString((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmIntegerString__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmIntegerString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmIntegerString *)new DcmIntegerString((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmIntegerString__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmIntegerString *arg1 = 0 ;
    DcmIntegerString *result;
    
    arg1 = (DcmIntegerString *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmIntegerString const & reference is null");
    } 
    result = (DcmIntegerString *)new DcmIntegerString((DcmIntegerString const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmIntegerString(void * jarg1) {
    DcmIntegerString *arg1 = (DcmIntegerString *) 0 ;
    
    arg1 = (DcmIntegerString *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmIntegerString_ident(void * jarg1) {
    int jresult = 0 ;
    DcmIntegerString *arg1 = (DcmIntegerString *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmIntegerString *)jarg1; 
    result = (DcmEVR)((DcmIntegerString const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmIntegerString_getSint32__SWIG_0(void * jarg1, int * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmIntegerString *arg1 = (DcmIntegerString *) 0 ;
    Sint32 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmIntegerString *)jarg1; 
    arg2 = (Sint32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getSint32(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmIntegerString_getSint32__SWIG_1(void * jarg1, int * jarg2) {
    void * jresult = 0 ;
    DcmIntegerString *arg1 = (DcmIntegerString *) 0 ;
    Sint32 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmIntegerString *)jarg1; 
    arg2 = (Sint32 *)jarg2; 
    result = (arg1)->getSint32(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmIntegerString_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmIntegerString *arg1 = (DcmIntegerString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmIntegerString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmIntegerString_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmIntegerString *arg1 = (DcmIntegerString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmIntegerString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTime__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmTime *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmTime *)new DcmTime((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTime__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmTime *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmTime *)new DcmTime((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmTime__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmTime *arg1 = 0 ;
    DcmTime *result;
    
    arg1 = (DcmTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTime const & reference is null");
    } 
    result = (DcmTime *)new DcmTime((DcmTime const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmTime(void * jarg1) {
    DcmTime *arg1 = (DcmTime *) 0 ;
    
    arg1 = (DcmTime *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmTime_ident(void * jarg1) {
    int jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmTime *)jarg1; 
    result = (DcmEVR)((DcmTime const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_setCurrentTime__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    bool arg2 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    arg2 = jarg2 ? true : false; 
    arg3 = jarg3 ? true : false; 
    result = (arg1)->setCurrentTime(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_setCurrentTime__SWIG_1(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->setCurrentTime(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_setCurrentTime__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    result = (arg1)->setCurrentTime();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_setOFTime(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    OFTime *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    arg2 = (OFTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime const & reference is null");
    } 
    result = (arg1)->setOFTime((OFTime const &)*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getOFTime__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    OFTime *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    arg2 = (OFTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime & reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFTime(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getOFTime__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    OFTime *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    arg2 = (OFTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime & reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFTime(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getOFTime__SWIG_2(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    OFTime *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    arg2 = (OFTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime & reference is null");
    } 
    result = (arg1)->getOFTime(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTime__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    bool arg7 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    arg7 = jarg7 ? true : false; 
    result = (arg1)->getISOFormattedTime(*arg2,arg3,arg4,arg5,arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTime__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    result = (arg1)->getISOFormattedTime(*arg2,arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTime__SWIG_2(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    bool arg5 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    result = (arg1)->getISOFormattedTime(*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTime__SWIG_3(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getISOFormattedTime(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTime__SWIG_4(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getISOFormattedTime(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTime__SWIG_5(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmTime *arg1 = (DcmTime *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmTime *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (arg1)->getISOFormattedTime(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getCurrentTime__SWIG_0(char * jarg1, unsigned int jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    bool arg2 ;
    bool arg3 ;
    OFCondition result;
    
    
    if (!jarg1) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg1_str;
    arg1 = &arg1_str;
    
    arg2 = jarg2 ? true : false; 
    arg3 = jarg3 ? true : false; 
    result = DcmTime::getCurrentTime(*arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getCurrentTime__SWIG_1(char * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    bool arg2 ;
    OFCondition result;
    
    
    if (!jarg1) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg1_str;
    arg1 = &arg1_str;
    
    arg2 = jarg2 ? true : false; 
    result = DcmTime::getCurrentTime(*arg1,arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getCurrentTime__SWIG_2(char * jarg1) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    OFCondition result;
    
    
    if (!jarg1) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg1_str;
    arg1 = &arg1_str;
    
    result = DcmTime::getCurrentTime(*arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getDicomTimeFromOFTime__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    OFTime *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (OFTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime const & reference is null");
    } 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    result = DcmTime::getDicomTimeFromOFTime((OFTime const &)*arg1,*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getDicomTimeFromOFTime__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    OFTime *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (OFTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime const & reference is null");
    } 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = DcmTime::getDicomTimeFromOFTime((OFTime const &)*arg1,*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getDicomTimeFromOFTime__SWIG_2(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    OFTime *arg1 = 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (OFTime *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime const & reference is null");
    } 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = DcmTime::getDicomTimeFromOFTime((OFTime const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getOFTimeFromString__SWIG_0(char * jarg1, void * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    OFTime *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    arg2 = (OFTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime & reference is null");
    } 
    arg3 = jarg3 ? true : false; 
    result = DcmTime::getOFTimeFromString((std::string const &)*arg1,*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getOFTimeFromString__SWIG_1(char * jarg1, void * jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    OFTime *arg2 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    arg2 = (OFTime *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFTime & reference is null");
    } 
    result = DcmTime::getOFTimeFromString((std::string const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTimeFromString__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool arg6 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    arg6 = jarg6 ? true : false; 
    result = DcmTime::getISOFormattedTimeFromString((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTimeFromString__SWIG_1(char * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    arg5 = jarg5 ? true : false; 
    result = DcmTime::getISOFormattedTimeFromString((std::string const &)*arg1,*arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTimeFromString__SWIG_2(char * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    arg4 = jarg4 ? true : false; 
    result = DcmTime::getISOFormattedTimeFromString((std::string const &)*arg1,*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTimeFromString__SWIG_3(char * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = DcmTime::getISOFormattedTimeFromString((std::string const &)*arg1,*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getISOFormattedTimeFromString__SWIG_4(char * jarg1, char * jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = DcmTime::getISOFormattedTimeFromString((std::string const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmTime_getTimeZoneFromString(char * jarg1, double * jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    double *arg2 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    arg2 = (double *)jarg2; 
    result = DcmTime::getTimeZoneFromString((std::string const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUniqueIdentifier__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmUniqueIdentifier *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmUniqueIdentifier *)new DcmUniqueIdentifier((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUniqueIdentifier__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmUniqueIdentifier *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmUniqueIdentifier *)new DcmUniqueIdentifier((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUniqueIdentifier__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmUniqueIdentifier *arg1 = 0 ;
    DcmUniqueIdentifier *result;
    
    arg1 = (DcmUniqueIdentifier *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmUniqueIdentifier const & reference is null");
    } 
    result = (DcmUniqueIdentifier *)new DcmUniqueIdentifier((DcmUniqueIdentifier const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmUniqueIdentifier(void * jarg1) {
    DcmUniqueIdentifier *arg1 = (DcmUniqueIdentifier *) 0 ;
    
    arg1 = (DcmUniqueIdentifier *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmUniqueIdentifier_ident(void * jarg1) {
    int jresult = 0 ;
    DcmUniqueIdentifier *arg1 = (DcmUniqueIdentifier *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmUniqueIdentifier *)jarg1; 
    result = (DcmEVR)((DcmUniqueIdentifier const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmUniqueIdentifier_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmUniqueIdentifier *arg1 = (DcmUniqueIdentifier *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmUniqueIdentifier *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUniqueIdentifier_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmUniqueIdentifier *arg1 = (DcmUniqueIdentifier *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmUniqueIdentifier *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUniqueIdentifier_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmUniqueIdentifier *arg1 = (DcmUniqueIdentifier *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmUniqueIdentifier *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUniqueIdentifier_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmUniqueIdentifier *arg1 = (DcmUniqueIdentifier *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmUniqueIdentifier *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUniqueIdentifier_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmUniqueIdentifier *arg1 = (DcmUniqueIdentifier *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmUniqueIdentifier *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmUniqueIdentifier_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmUniqueIdentifier *arg1 = (DcmUniqueIdentifier *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmUniqueIdentifier *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmCharString__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmCharString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmCharString *)new DcmCharString((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmCharString__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmCharString *arg1 = 0 ;
    DcmCharString *result;
    
    arg1 = (DcmCharString *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmCharString const & reference is null");
    } 
    result = (DcmCharString *)new DcmCharString((DcmCharString const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmCharString(void * jarg1) {
    DcmCharString *arg1 = (DcmCharString *) 0 ;
    
    arg1 = (DcmCharString *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_new_DcmLongString__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmLongString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmLongString *)new DcmLongString((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmLongString__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmLongString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmLongString *)new DcmLongString((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmLongString__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmLongString *arg1 = 0 ;
    DcmLongString *result;
    
    arg1 = (DcmLongString *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmLongString const & reference is null");
    } 
    result = (DcmLongString *)new DcmLongString((DcmLongString const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmLongString(void * jarg1) {
    DcmLongString *arg1 = (DcmLongString *) 0 ;
    
    arg1 = (DcmLongString *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmLongString_ident(void * jarg1) {
    int jresult = 0 ;
    DcmLongString *arg1 = (DcmLongString *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmLongString *)jarg1; 
    result = (DcmEVR)((DcmLongString const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmLongString_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmLongString *arg1 = (DcmLongString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmLongString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmLongString_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmLongString *arg1 = (DcmLongString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmLongString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmLongText__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmLongText *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmLongText *)new DcmLongText((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmLongText__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmLongText *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmLongText *)new DcmLongText((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmLongText__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmLongText *arg1 = 0 ;
    DcmLongText *result;
    
    arg1 = (DcmLongText *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmLongText const & reference is null");
    } 
    result = (DcmLongText *)new DcmLongText((DcmLongText const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmLongText(void * jarg1) {
    DcmLongText *arg1 = (DcmLongText *) 0 ;
    
    arg1 = (DcmLongText *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmLongText_ident(void * jarg1) {
    int jresult = 0 ;
    DcmLongText *arg1 = (DcmLongText *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmLongText *)jarg1; 
    result = (DcmEVR)((DcmLongText const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmLongText_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmLongText *arg1 = (DcmLongText *) 0 ;
    unsigned long result;
    
    arg1 = (DcmLongText *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmLongText_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmLongText *arg1 = (DcmLongText *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmLongText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmLongText_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmLongText *arg1 = (DcmLongText *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmLongText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmLongText_getOFStringArray__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmLongText *arg1 = (DcmLongText *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmLongText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = (arg1)->getOFStringArray(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmLongText_getOFStringArray__SWIG_1(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmLongText *arg1 = (DcmLongText *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmLongText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (arg1)->getOFStringArray(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmPersonName__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmPersonName *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmPersonName *)new DcmPersonName((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmPersonName__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmPersonName *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmPersonName *)new DcmPersonName((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmPersonName__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmPersonName *arg1 = 0 ;
    DcmPersonName *result;
    
    arg1 = (DcmPersonName *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmPersonName const & reference is null");
    } 
    result = (DcmPersonName *)new DcmPersonName((DcmPersonName const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmPersonName(void * jarg1) {
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    
    arg1 = (DcmPersonName *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmPersonName_ident(void * jarg1) {
    int jresult = 0 ;
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmPersonName *)jarg1; 
    result = (DcmEVR)((DcmPersonName const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmPersonName *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmPersonName *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getNameComponents__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, unsigned long jarg7, unsigned int jarg8) {
    void * jresult = 0 ;
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    unsigned long arg7 ;
    unsigned int arg8 ;
    OFCondition result;
    
    arg1 = (DcmPersonName *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    
    if (!jarg3) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg3_str;
    arg3 = &arg3_str;
    
    
    if (!jarg4) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg4_str;
    arg4 = &arg4_str;
    
    
    if (!jarg5) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg5_str;
    arg5 = &arg5_str;
    
    
    if (!jarg6) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg6_str;
    arg6 = &arg6_str;
    
    arg7 = (unsigned long)jarg7; 
    arg8 = (unsigned int)jarg8; 
    result = (arg1)->getNameComponents(*arg2,*arg3,*arg4,*arg5,*arg6,arg7,arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    
    if (arg4_str.c_str() != 0 && arg4_str.length() > 0)
    {
        memcpy(jarg4, arg4_str.c_str(), arg4_str.length());
        jarg4[arg4_str.length()] = 0;
    }
    
    
    if (arg5_str.c_str() != 0 && arg5_str.length() > 0)
    {
        memcpy(jarg5, arg5_str.c_str(), arg5_str.length());
        jarg5[arg5_str.length()] = 0;
    }
    
    
    if (arg6_str.c_str() != 0 && arg6_str.length() > 0)
    {
        memcpy(jarg6, arg6_str.c_str(), arg6_str.length());
        jarg6[arg6_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getNameComponents__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, unsigned long jarg7) {
    void * jresult = 0 ;
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    unsigned long arg7 ;
    OFCondition result;
    
    arg1 = (DcmPersonName *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    
    if (!jarg3) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg3_str;
    arg3 = &arg3_str;
    
    
    if (!jarg4) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg4_str;
    arg4 = &arg4_str;
    
    
    if (!jarg5) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg5_str;
    arg5 = &arg5_str;
    
    
    if (!jarg6) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg6_str;
    arg6 = &arg6_str;
    
    arg7 = (unsigned long)jarg7; 
    result = (arg1)->getNameComponents(*arg2,*arg3,*arg4,*arg5,*arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    
    if (arg4_str.c_str() != 0 && arg4_str.length() > 0)
    {
        memcpy(jarg4, arg4_str.c_str(), arg4_str.length());
        jarg4[arg4_str.length()] = 0;
    }
    
    
    if (arg5_str.c_str() != 0 && arg5_str.length() > 0)
    {
        memcpy(jarg5, arg5_str.c_str(), arg5_str.length());
        jarg5[arg5_str.length()] = 0;
    }
    
    
    if (arg6_str.c_str() != 0 && arg6_str.length() > 0)
    {
        memcpy(jarg6, arg6_str.c_str(), arg6_str.length());
        jarg6[arg6_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getNameComponents__SWIG_2(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
    void * jresult = 0 ;
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    OFCondition result;
    
    arg1 = (DcmPersonName *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    
    if (!jarg3) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg3_str;
    arg3 = &arg3_str;
    
    
    if (!jarg4) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg4_str;
    arg4 = &arg4_str;
    
    
    if (!jarg5) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg5_str;
    arg5 = &arg5_str;
    
    
    if (!jarg6) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg6_str;
    arg6 = &arg6_str;
    
    result = (arg1)->getNameComponents(*arg2,*arg3,*arg4,*arg5,*arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    
    if (arg4_str.c_str() != 0 && arg4_str.length() > 0)
    {
        memcpy(jarg4, arg4_str.c_str(), arg4_str.length());
        jarg4[arg4_str.length()] = 0;
    }
    
    
    if (arg5_str.c_str() != 0 && arg5_str.length() > 0)
    {
        memcpy(jarg5, arg5_str.c_str(), arg5_str.length());
        jarg5[arg5_str.length()] = 0;
    }
    
    
    if (arg6_str.c_str() != 0 && arg6_str.length() > 0)
    {
        memcpy(jarg6, arg6_str.c_str(), arg6_str.length());
        jarg6[arg6_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getFormattedName__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    unsigned int arg4 ;
    OFCondition result;
    
    arg1 = (DcmPersonName *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = (unsigned int)jarg4; 
    result = (arg1)->getFormattedName(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getFormattedName__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmPersonName *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getFormattedName(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getFormattedName__SWIG_2(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmPersonName *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (arg1)->getFormattedName(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_putNameComponents(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
    void * jresult = 0 ;
    DcmPersonName *arg1 = (DcmPersonName *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    OFCondition result;
    
    arg1 = (DcmPersonName *)jarg1; 
    if (!jarg2) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    if (!jarg3) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg3_str(jarg3);
    arg3 = &arg3_str; 
    if (!jarg4) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg4_str(jarg4);
    arg4 = &arg4_str; 
    if (!jarg5) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg5_str(jarg5);
    arg5 = &arg5_str; 
    if (!jarg6) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg6_str(jarg6);
    arg6 = &arg6_str; 
    result = (arg1)->putNameComponents((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    
    if (arg4_str.c_str() != 0 && arg4_str.length() > 0)
    {
        memcpy(jarg4, arg4_str.c_str(), arg4_str.length());
        jarg4[arg4_str.length()] = 0;
    }
    
    
    if (arg5_str.c_str() != 0 && arg5_str.length() > 0)
    {
        memcpy(jarg5, arg5_str.c_str(), arg5_str.length());
        jarg5[arg5_str.length()] = 0;
    }
    
    
    if (arg6_str.c_str() != 0 && arg6_str.length() > 0)
    {
        memcpy(jarg6, arg6_str.c_str(), arg6_str.length());
        jarg6[arg6_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getNameComponentsFromString__SWIG_0(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, unsigned int jarg7) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    unsigned int arg7 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    
    if (!jarg3) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg3_str;
    arg3 = &arg3_str;
    
    
    if (!jarg4) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg4_str;
    arg4 = &arg4_str;
    
    
    if (!jarg5) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg5_str;
    arg5 = &arg5_str;
    
    
    if (!jarg6) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg6_str;
    arg6 = &arg6_str;
    
    arg7 = (unsigned int)jarg7; 
    result = DcmPersonName::getNameComponentsFromString((std::string const &)*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    
    if (arg4_str.c_str() != 0 && arg4_str.length() > 0)
    {
        memcpy(jarg4, arg4_str.c_str(), arg4_str.length());
        jarg4[arg4_str.length()] = 0;
    }
    
    
    if (arg5_str.c_str() != 0 && arg5_str.length() > 0)
    {
        memcpy(jarg5, arg5_str.c_str(), arg5_str.length());
        jarg5[arg5_str.length()] = 0;
    }
    
    
    if (arg6_str.c_str() != 0 && arg6_str.length() > 0)
    {
        memcpy(jarg6, arg6_str.c_str(), arg6_str.length());
        jarg6[arg6_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getNameComponentsFromString__SWIG_1(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    
    if (!jarg3) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg3_str;
    arg3 = &arg3_str;
    
    
    if (!jarg4) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg4_str;
    arg4 = &arg4_str;
    
    
    if (!jarg5) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg5_str;
    arg5 = &arg5_str;
    
    
    if (!jarg6) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg6_str;
    arg6 = &arg6_str;
    
    result = DcmPersonName::getNameComponentsFromString((std::string const &)*arg1,*arg2,*arg3,*arg4,*arg5,*arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    
    if (arg4_str.c_str() != 0 && arg4_str.length() > 0)
    {
        memcpy(jarg4, arg4_str.c_str(), arg4_str.length());
        jarg4[arg4_str.length()] = 0;
    }
    
    
    if (arg5_str.c_str() != 0 && arg5_str.length() > 0)
    {
        memcpy(jarg5, arg5_str.c_str(), arg5_str.length());
        jarg5[arg5_str.length()] = 0;
    }
    
    
    if (arg6_str.c_str() != 0 && arg6_str.length() > 0)
    {
        memcpy(jarg6, arg6_str.c_str(), arg6_str.length());
        jarg6[arg6_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getFormattedNameFromString__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    unsigned int arg3 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned int)jarg3; 
    result = DcmPersonName::getFormattedNameFromString((std::string const &)*arg1,*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getFormattedNameFromString__SWIG_1(char * jarg1, char * jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = DcmPersonName::getFormattedNameFromString((std::string const &)*arg1,*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getFormattedNameFromComponents(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    if (!jarg2) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    if (!jarg3) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg3_str(jarg3);
    arg3 = &arg3_str; 
    if (!jarg4) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg4_str(jarg4);
    arg4 = &arg4_str; 
    if (!jarg5) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg5_str(jarg5);
    arg5 = &arg5_str; 
    
    if (!jarg6) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg6_str;
    arg6 = &arg6_str;
    
    result = DcmPersonName::getFormattedNameFromComponents((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,*arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    
    if (arg4_str.c_str() != 0 && arg4_str.length() > 0)
    {
        memcpy(jarg4, arg4_str.c_str(), arg4_str.length());
        jarg4[arg4_str.length()] = 0;
    }
    
    
    if (arg5_str.c_str() != 0 && arg5_str.length() > 0)
    {
        memcpy(jarg5, arg5_str.c_str(), arg5_str.length());
        jarg5[arg5_str.length()] = 0;
    }
    
    
    if (arg6_str.c_str() != 0 && arg6_str.length() > 0)
    {
        memcpy(jarg6, arg6_str.c_str(), arg6_str.length());
        jarg6[arg6_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPersonName_getStringFromNameComponents(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    OFCondition result;
    
    if (!jarg1) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    if (!jarg2) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    if (!jarg3) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg3_str(jarg3);
    arg3 = &arg3_str; 
    if (!jarg4) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg4_str(jarg4);
    arg4 = &arg4_str; 
    if (!jarg5) SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    std::string arg5_str(jarg5);
    arg5 = &arg5_str; 
    
    if (!jarg6) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg6_str;
    arg6 = &arg6_str;
    
    result = DcmPersonName::getStringFromNameComponents((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,*arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg1_str.c_str() != 0 && arg1_str.length() > 0)
    {
        memcpy(jarg1, arg1_str.c_str(), arg1_str.length());
        jarg1[arg1_str.length()] = 0;
    }
    
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    
    if (arg3_str.c_str() != 0 && arg3_str.length() > 0)
    {
        memcpy(jarg3, arg3_str.c_str(), arg3_str.length());
        jarg3[arg3_str.length()] = 0;
    }
    
    
    if (arg4_str.c_str() != 0 && arg4_str.length() > 0)
    {
        memcpy(jarg4, arg4_str.c_str(), arg4_str.length());
        jarg4[arg4_str.length()] = 0;
    }
    
    
    if (arg5_str.c_str() != 0 && arg5_str.length() > 0)
    {
        memcpy(jarg5, arg5_str.c_str(), arg5_str.length());
        jarg5[arg5_str.length()] = 0;
    }
    
    
    if (arg6_str.c_str() != 0 && arg6_str.length() > 0)
    {
        memcpy(jarg6, arg6_str.c_str(), arg6_str.length());
        jarg6[arg6_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmShortString__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmShortString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmShortString *)new DcmShortString((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmShortString__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmShortString *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmShortString *)new DcmShortString((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmShortString__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmShortString *arg1 = 0 ;
    DcmShortString *result;
    
    arg1 = (DcmShortString *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmShortString const & reference is null");
    } 
    result = (DcmShortString *)new DcmShortString((DcmShortString const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmShortString(void * jarg1) {
    DcmShortString *arg1 = (DcmShortString *) 0 ;
    
    arg1 = (DcmShortString *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmShortString_ident(void * jarg1) {
    int jresult = 0 ;
    DcmShortString *arg1 = (DcmShortString *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmShortString *)jarg1; 
    result = (DcmEVR)((DcmShortString const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmShortString_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmShortString *arg1 = (DcmShortString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmShortString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmShortString_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmShortString *arg1 = (DcmShortString *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmShortString *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmShortText__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmShortText *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmShortText *)new DcmShortText((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmShortText__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmShortText *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmShortText *)new DcmShortText((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmShortText__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmShortText *arg1 = 0 ;
    DcmShortText *result;
    
    arg1 = (DcmShortText *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmShortText const & reference is null");
    } 
    result = (DcmShortText *)new DcmShortText((DcmShortText const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmShortText(void * jarg1) {
    DcmShortText *arg1 = (DcmShortText *) 0 ;
    
    arg1 = (DcmShortText *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmShortText_ident(void * jarg1) {
    int jresult = 0 ;
    DcmShortText *arg1 = (DcmShortText *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmShortText *)jarg1; 
    result = (DcmEVR)((DcmShortText const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmShortText_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmShortText *arg1 = (DcmShortText *) 0 ;
    unsigned long result;
    
    arg1 = (DcmShortText *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmShortText_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmShortText *arg1 = (DcmShortText *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmShortText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmShortText_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmShortText *arg1 = (DcmShortText *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmShortText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmShortText_getOFStringArray__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmShortText *arg1 = (DcmShortText *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmShortText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = (arg1)->getOFStringArray(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmShortText_getOFStringArray__SWIG_1(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmShortText *arg1 = (DcmShortText *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmShortText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (arg1)->getOFStringArray(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnlimitedText__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmUnlimitedText *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmUnlimitedText *)new DcmUnlimitedText((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnlimitedText__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmUnlimitedText *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmUnlimitedText *)new DcmUnlimitedText((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnlimitedText__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmUnlimitedText *arg1 = 0 ;
    DcmUnlimitedText *result;
    
    arg1 = (DcmUnlimitedText *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmUnlimitedText const & reference is null");
    } 
    result = (DcmUnlimitedText *)new DcmUnlimitedText((DcmUnlimitedText const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmUnlimitedText(void * jarg1) {
    DcmUnlimitedText *arg1 = (DcmUnlimitedText *) 0 ;
    
    arg1 = (DcmUnlimitedText *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmUnlimitedText_ident(void * jarg1) {
    int jresult = 0 ;
    DcmUnlimitedText *arg1 = (DcmUnlimitedText *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmUnlimitedText *)jarg1; 
    result = (DcmEVR)((DcmUnlimitedText const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmUnlimitedText_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmUnlimitedText *arg1 = (DcmUnlimitedText *) 0 ;
    unsigned long result;
    
    arg1 = (DcmUnlimitedText *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnlimitedText_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmUnlimitedText *arg1 = (DcmUnlimitedText *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmUnlimitedText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnlimitedText_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmUnlimitedText *arg1 = (DcmUnlimitedText *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmUnlimitedText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnlimitedText_getOFStringArray__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmUnlimitedText *arg1 = (DcmUnlimitedText *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmUnlimitedText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = (arg1)->getOFStringArray(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnlimitedText_getOFStringArray__SWIG_1(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmUnlimitedText *arg1 = (DcmUnlimitedText *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmUnlimitedText *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (arg1)->getOFStringArray(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmOtherByteOtherWord__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmOtherByteOtherWord *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmOtherByteOtherWord *)new DcmOtherByteOtherWord((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmOtherByteOtherWord__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmOtherByteOtherWord *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmOtherByteOtherWord *)new DcmOtherByteOtherWord((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmOtherByteOtherWord__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = 0 ;
    DcmOtherByteOtherWord *result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOtherByteOtherWord const & reference is null");
    } 
    result = (DcmOtherByteOtherWord *)new DcmOtherByteOtherWord((DcmOtherByteOtherWord const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmOtherByteOtherWord(void * jarg1) {
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmOtherByteOtherWord_ident(void * jarg1) {
    int jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    result = (DcmEVR)((DcmOtherByteOtherWord const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    unsigned long result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_setVR(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    DcmEVR arg2 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (DcmEVR)jarg2; 
    result = (arg1)->setVR((DcmEVR )arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmOtherByteOtherWord_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmOtherByteOtherWord_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmOtherByteOtherWord_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmOtherByteOtherWord_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmOtherByteOtherWord_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmOtherByteOtherWord_canWriteXfer(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    E_TransferSyntax arg2 ;
    E_TransferSyntax arg3 ;
    bool result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2,(E_TransferSyntax )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_write__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_write__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_writeXML__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    result = (arg1)->writeXML(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_writeXML__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    ostream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    result = (arg1)->writeXML(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_writeSignatureFormat__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_writeSignatureFormat__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getUint8__SWIG_0(void * jarg1, unsigned char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    Uint8 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (Uint8 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getUint8(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getUint8__SWIG_1(void * jarg1, unsigned char * jarg2) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    Uint8 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (Uint8 *)jarg2; 
    result = (arg1)->getUint8(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getUint16__SWIG_0(void * jarg1, unsigned short * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    Uint16 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getUint16(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getUint16__SWIG_1(void * jarg1, unsigned short * jarg2) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    Uint16 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    result = (arg1)->getUint16(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getUint8Array(void * jarg1, unsigned char** jarg2) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    Uint8 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (Uint8 **)jarg2; 
    result = (arg1)->getUint8Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getUint16Array(void * jarg1, unsigned short** jarg2) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    Uint16 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (Uint16 **)jarg2; 
    result = (arg1)->getUint16Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getOFStringArray__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = jarg3 ? true : false; 
    result = (arg1)->getOFStringArray(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_getOFStringArray__SWIG_1(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    std::string *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    result = (arg1)->getOFStringArray(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_putUint8Array(void * jarg1, const unsigned char* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    Uint8 *arg2 = (Uint8 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (Uint8 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint8Array((Uint8 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_putUint16Array(void * jarg1, const unsigned short* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    Uint16 *arg2 = (Uint16 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint16Array((Uint16 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmOtherByteOtherWord_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmOtherByteOtherWord *arg1 = (DcmOtherByteOtherWord *) 0 ;
    OFCondition result;
    
    arg1 = (DcmOtherByteOtherWord *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmRepresentationParameter(void * jarg1) {
    DcmRepresentationParameter *arg1 = (DcmRepresentationParameter *) 0 ;
    
    arg1 = (DcmRepresentationParameter *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_DcmRepresentationParameter_clone(void * jarg1) {
    void * jresult = 0 ;
    DcmRepresentationParameter *arg1 = (DcmRepresentationParameter *) 0 ;
    DcmRepresentationParameter *result;
    
    arg1 = (DcmRepresentationParameter *)jarg1; 
    result = (DcmRepresentationParameter *)((DcmRepresentationParameter const *)arg1)->clone();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DcmRepresentationParameter_className(void * jarg1) {
    char * jresult = 0 ;
    DcmRepresentationParameter *arg1 = (DcmRepresentationParameter *) 0 ;
    char *result;
    
    arg1 = (DcmRepresentationParameter *)jarg1; 
    result = (char *)((DcmRepresentationParameter const *)arg1)->className();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmPixelData__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmPixelData *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmPixelData *)new DcmPixelData((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmPixelData__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmPixelData *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmPixelData *)new DcmPixelData((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmPixelData__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = 0 ;
    DcmPixelData *result;
    
    arg1 = (DcmPixelData *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmPixelData const & reference is null");
    } 
    result = (DcmPixelData *)new DcmPixelData((DcmPixelData const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmPixelData(void * jarg1) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_setVR(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    DcmEVR arg2 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (DcmEVR)jarg2; 
    result = (arg1)->setVR((DcmEVR )arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_DcmPixelData_ident(void * jarg1) {
    int jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmPixelData *)jarg1; 
    result = (DcmEVR)((DcmPixelData const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmPixelData_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmPixelData_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmPixelData_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmPixelData_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmPixelData_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmPixelData_canWriteXfer(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    E_TransferSyntax arg3 ;
    bool result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (bool)(arg1)->canWriteXfer((E_TransferSyntax )arg2,(E_TransferSyntax )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmPixelData_calcElementLength(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->calcElementLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmPixelData_getLength__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned long jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    E_EncodingType arg3 ;
    Uint32 result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (E_EncodingType)jarg3; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2,(E_EncodingType )arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmPixelData_getLength__SWIG_1(void * jarg1, int jarg2) {
    unsigned long jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    Uint32 result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (Uint32)(arg1)->getLength((E_TransferSyntax )arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmPixelData_getLength__SWIG_2(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    Uint32 result;
    
    arg1 = (DcmPixelData *)jarg1; 
    result = (Uint32)(arg1)->getLength();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmPixelData_transferInit(void * jarg1) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    (arg1)->transferInit();
    
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_read__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_read__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_GrpLenEncoding arg4 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_GrpLenEncoding)jarg4; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3,(E_GrpLenEncoding )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_read__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    DcmInputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (DcmInputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmInputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->read(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_write__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_write__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->write(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_writeXML__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    result = (arg1)->writeXML(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_writeXML__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    ostream *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    result = (arg1)->writeXML(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_writeSignatureFormat__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    E_EncodingType arg4 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    arg4 = (E_EncodingType)jarg4; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3,(E_EncodingType )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_writeSignatureFormat__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    DcmOutputStream *arg2 = 0 ;
    E_TransferSyntax arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (DcmOutputStream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOutputStream & reference is null");
    } 
    arg3 = (E_TransferSyntax)jarg3; 
    result = (arg1)->writeSignatureFormat(*arg2,(E_TransferSyntax )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_loadAllDataIntoMemory(void * jarg1) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    result = (arg1)->loadAllDataIntoMemory();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmPixelData_transferEnd(void * jarg1) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    (arg1)->transferEnd();
    
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmPixelData_canChooseRepresentation(void * jarg1, int jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    bool result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    result = (bool)(arg1)->canChooseRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_chooseRepresentation(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    DcmStack *arg4 = 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    arg4 = (DcmStack *)jarg4;
    if(!arg4) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmStack & reference is null");
    } 
    result = (arg1)->chooseRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3,*arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmPixelData_putOriginalRepresentation(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    DcmPixelSequence *arg4 = (DcmPixelSequence *) 0 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    arg4 = (DcmPixelSequence *)jarg4; 
    (arg1)->putOriginalRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3,arg4);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_putUint8Array(void * jarg1, const unsigned char* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    Uint8 *arg2 = (Uint8 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (Uint8 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint8Array((Uint8 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_putUint16Array(void * jarg1, const unsigned short* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    Uint16 *arg2 = (Uint16 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint16Array((Uint16 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_createUint8Array(void * jarg1, unsigned long jarg2, unsigned char** jarg3) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    Uint32 arg2 ;
    Uint8 **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (Uint32)jarg2; 
    arg3 = (Uint8 **)jarg3; 
    result = (arg1)->createUint8Array(arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_createUint16Array(void * jarg1, unsigned long jarg2, unsigned short** jarg3) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    Uint32 arg2 ;
    Uint16 **arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (Uint32)jarg2; 
    arg3 = (Uint16 **)jarg3; 
    result = (arg1)->createUint16Array(arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_getEncapsulatedRepresentation(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    DcmPixelSequence **arg4 = 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    arg4 = (DcmPixelSequence **)jarg4;
    if(!arg4) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmPixelSequence *& reference is null");
    } 
    result = (arg1)->getEncapsulatedRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3,*arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_setCurrentRepresentationParameter(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    DcmRepresentationParameter *arg2 = (DcmRepresentationParameter *) 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (DcmRepresentationParameter *)jarg2; 
    result = (arg1)->setCurrentRepresentationParameter((DcmRepresentationParameter const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmPixelData_hasRepresentation__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    bool result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    result = (bool)(arg1)->hasRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmPixelData_hasRepresentation__SWIG_1(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    bool result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    result = (bool)(arg1)->hasRepresentation((E_TransferSyntax )arg2);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_removeRepresentation(void * jarg1, int jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    result = (arg1)->removeRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmPixelData_removeAllButOriginalRepresentations(void * jarg1) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    (arg1)->removeAllButOriginalRepresentations();
    
}


DllExport void SWIGSTDCALL CSharp_DcmPixelData_removeAllButCurrentRepresentations(void * jarg1) {
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    
    arg1 = (DcmPixelData *)jarg1; 
    (arg1)->removeAllButCurrentRepresentations();
    
}


DllExport void * SWIGSTDCALL CSharp_DcmPixelData_removeOriginalRepresentation(void * jarg1, int jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmPixelData *arg1 = (DcmPixelData *) 0 ;
    E_TransferSyntax arg2 ;
    DcmRepresentationParameter *arg3 = (DcmRepresentationParameter *) 0 ;
    OFCondition result;
    
    arg1 = (DcmPixelData *)jarg1; 
    arg2 = (E_TransferSyntax)jarg2; 
    arg3 = (DcmRepresentationParameter *)jarg3; 
    result = (arg1)->removeOriginalRepresentation((E_TransferSyntax )arg2,(DcmRepresentationParameter const *)arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmOverlayData__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmOverlayData *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmOverlayData *)new DcmOverlayData((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmOverlayData__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmOverlayData *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmOverlayData *)new DcmOverlayData((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmOverlayData__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmOverlayData *arg1 = 0 ;
    DcmOverlayData *result;
    
    arg1 = (DcmOverlayData *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOverlayData const & reference is null");
    } 
    result = (DcmOverlayData *)new DcmOverlayData((DcmOverlayData const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmOverlayData(void * jarg1) {
    DcmOverlayData *arg1 = (DcmOverlayData *) 0 ;
    
    arg1 = (DcmOverlayData *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmOverlayData_ident(void * jarg1) {
    int jresult = 0 ;
    DcmOverlayData *arg1 = (DcmOverlayData *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmOverlayData *)jarg1; 
    result = (DcmEVR)((DcmOverlayData const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmAttributeTag__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmAttributeTag *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmAttributeTag *)new DcmAttributeTag((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmAttributeTag__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmAttributeTag *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmAttributeTag *)new DcmAttributeTag((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmAttributeTag__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = 0 ;
    DcmAttributeTag *result;
    
    arg1 = (DcmAttributeTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmAttributeTag const & reference is null");
    } 
    result = (DcmAttributeTag *)new DcmAttributeTag((DcmAttributeTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmAttributeTag(void * jarg1) {
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmAttributeTag_ident(void * jarg1) {
    int jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    result = (DcmEVR)((DcmAttributeTag const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmAttributeTag_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    unsigned long result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmAttributeTag_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmAttributeTag_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmAttributeTag_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmAttributeTag_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmAttributeTag_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_getTagVal__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    DcmTagKey *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey & reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getTagVal(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_getTagVal__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    DcmTagKey *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey & reference is null");
    } 
    result = (arg1)->getTagVal(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_getUint16Array(void * jarg1, unsigned short** jarg2) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    Uint16 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (Uint16 **)jarg2; 
    result = (arg1)->getUint16Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_putTagVal__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    DcmTagKey *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putTagVal((DcmTagKey const &)*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_putTagVal__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    DcmTagKey *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (DcmTagKey *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTagKey const & reference is null");
    } 
    result = (arg1)->putTagVal((DcmTagKey const &)*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_putUint16Array(void * jarg1, const unsigned short* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    Uint16 *arg2 = (Uint16 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint16Array((Uint16 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAttributeTag_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmAttributeTag *arg1 = (DcmAttributeTag *) 0 ;
    OFCondition result;
    
    arg1 = (DcmAttributeTag *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmSignedShort__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmSignedShort *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmSignedShort *)new DcmSignedShort((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmSignedShort__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmSignedShort *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmSignedShort *)new DcmSignedShort((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmSignedShort__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = 0 ;
    DcmSignedShort *result;
    
    arg1 = (DcmSignedShort *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmSignedShort const & reference is null");
    } 
    result = (DcmSignedShort *)new DcmSignedShort((DcmSignedShort const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmSignedShort(void * jarg1) {
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    
    arg1 = (DcmSignedShort *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmSignedShort_ident(void * jarg1) {
    int jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    result = (DcmEVR)((DcmSignedShort const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmSignedShort_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    unsigned long result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmSignedShort_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSignedShort_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSignedShort_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSignedShort_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSignedShort_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_getSint16__SWIG_0(void * jarg1, short * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    Sint16 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (Sint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getSint16(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_getSint16__SWIG_1(void * jarg1, short * jarg2) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    Sint16 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (Sint16 *)jarg2; 
    result = (arg1)->getSint16(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_getSint16Array(void * jarg1, short** jarg2) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    Sint16 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (Sint16 **)jarg2; 
    result = (arg1)->getSint16Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_putSint16__SWIG_0(void * jarg1, short jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    Sint16 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (Sint16)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putSint16(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_putSint16__SWIG_1(void * jarg1, short jarg2) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    Sint16 arg2 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (Sint16)jarg2; 
    result = (arg1)->putSint16(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_putSint16Array(void * jarg1, const short* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    Sint16 *arg2 = (Sint16 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = (Sint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putSint16Array((Sint16 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedShort_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmSignedShort *arg1 = (DcmSignedShort *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSignedShort *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnsignedShort__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmUnsignedShort *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmUnsignedShort *)new DcmUnsignedShort((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnsignedShort__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmUnsignedShort *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmUnsignedShort *)new DcmUnsignedShort((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnsignedShort__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = 0 ;
    DcmUnsignedShort *result;
    
    arg1 = (DcmUnsignedShort *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmUnsignedShort const & reference is null");
    } 
    result = (DcmUnsignedShort *)new DcmUnsignedShort((DcmUnsignedShort const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmUnsignedShort(void * jarg1) {
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmUnsignedShort_ident(void * jarg1) {
    int jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    result = (DcmEVR)((DcmUnsignedShort const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmUnsignedShort_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    unsigned long result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmUnsignedShort_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUnsignedShort_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUnsignedShort_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUnsignedShort_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUnsignedShort_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_getUint16__SWIG_0(void * jarg1, unsigned short * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    Uint16 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getUint16(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_getUint16__SWIG_1(void * jarg1, unsigned short * jarg2) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    Uint16 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    result = (arg1)->getUint16(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_getUint16Array(void * jarg1, unsigned short** jarg2) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    Uint16 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (Uint16 **)jarg2; 
    result = (arg1)->getUint16Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_putUint16__SWIG_0(void * jarg1, unsigned short jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    Uint16 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (Uint16)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint16(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_putUint16__SWIG_1(void * jarg1, unsigned short jarg2) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    Uint16 arg2 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (Uint16)jarg2; 
    result = (arg1)->putUint16(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_putUint16Array(void * jarg1, const unsigned short* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    Uint16 *arg2 = (Uint16 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = (Uint16 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint16Array((Uint16 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedShort_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmUnsignedShort *arg1 = (DcmUnsignedShort *) 0 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedShort *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmSignedLong__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmSignedLong *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmSignedLong *)new DcmSignedLong((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmSignedLong__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmSignedLong *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmSignedLong *)new DcmSignedLong((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmSignedLong__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = 0 ;
    DcmSignedLong *result;
    
    arg1 = (DcmSignedLong *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmSignedLong const & reference is null");
    } 
    result = (DcmSignedLong *)new DcmSignedLong((DcmSignedLong const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmSignedLong(void * jarg1) {
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    
    arg1 = (DcmSignedLong *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmSignedLong_ident(void * jarg1) {
    int jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    result = (DcmEVR)((DcmSignedLong const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmSignedLong_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    unsigned long result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmSignedLong_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSignedLong_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSignedLong_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSignedLong_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmSignedLong_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_getSint32__SWIG_0(void * jarg1, int * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    Sint32 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (Sint32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getSint32(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_getSint32__SWIG_1(void * jarg1, int * jarg2) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    Sint32 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (Sint32 *)jarg2; 
    result = (arg1)->getSint32(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_getSint32Array(void * jarg1, int** jarg2) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    Sint32 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (Sint32 **)jarg2; 
    result = (arg1)->getSint32Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_putSint32__SWIG_0(void * jarg1, long jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    Sint32 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (Sint32)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putSint32(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_putSint32__SWIG_1(void * jarg1, long jarg2) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    Sint32 arg2 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (Sint32)jarg2; 
    result = (arg1)->putSint32(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_putSint32Array(void * jarg1, const int* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    Sint32 *arg2 = (Sint32 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = (Sint32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putSint32Array((Sint32 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmSignedLong_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmSignedLong *arg1 = (DcmSignedLong *) 0 ;
    OFCondition result;
    
    arg1 = (DcmSignedLong *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnsignedLong__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmUnsignedLong *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmUnsignedLong *)new DcmUnsignedLong((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnsignedLong__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmUnsignedLong *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmUnsignedLong *)new DcmUnsignedLong((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnsignedLong__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = 0 ;
    DcmUnsignedLong *result;
    
    arg1 = (DcmUnsignedLong *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmUnsignedLong const & reference is null");
    } 
    result = (DcmUnsignedLong *)new DcmUnsignedLong((DcmUnsignedLong const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmUnsignedLong(void * jarg1) {
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmUnsignedLong_ident(void * jarg1) {
    int jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    result = (DcmEVR)((DcmUnsignedLong const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmUnsignedLong_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    unsigned long result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmUnsignedLong_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUnsignedLong_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUnsignedLong_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUnsignedLong_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmUnsignedLong_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_getUint32__SWIG_0(void * jarg1, unsigned int * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    Uint32 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (Uint32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getUint32(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_getUint32__SWIG_1(void * jarg1, unsigned int * jarg2) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    Uint32 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (Uint32 *)jarg2; 
    result = (arg1)->getUint32(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_getUint32Array(void * jarg1, unsigned int** jarg2) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    Uint32 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (Uint32 **)jarg2; 
    result = (arg1)->getUint32Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_putUint32__SWIG_0(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    Uint32 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (Uint32)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint32(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_putUint32__SWIG_1(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    Uint32 arg2 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (Uint32)jarg2; 
    result = (arg1)->putUint32(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_putUint32Array(void * jarg1, const unsigned int* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    Uint32 *arg2 = (Uint32 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = (Uint32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putUint32Array((Uint32 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLong_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmUnsignedLong *arg1 = (DcmUnsignedLong *) 0 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLong *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnsignedLongOffset__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmUnsignedLongOffset *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmUnsignedLongOffset *)new DcmUnsignedLongOffset((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnsignedLongOffset__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmUnsignedLongOffset *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmUnsignedLongOffset *)new DcmUnsignedLongOffset((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmUnsignedLongOffset__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmUnsignedLongOffset *arg1 = 0 ;
    DcmUnsignedLongOffset *result;
    
    arg1 = (DcmUnsignedLongOffset *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmUnsignedLongOffset const & reference is null");
    } 
    result = (DcmUnsignedLongOffset *)new DcmUnsignedLongOffset((DcmUnsignedLongOffset const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmUnsignedLongOffset(void * jarg1) {
    DcmUnsignedLongOffset *arg1 = (DcmUnsignedLongOffset *) 0 ;
    
    arg1 = (DcmUnsignedLongOffset *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmUnsignedLongOffset_ident(void * jarg1) {
    int jresult = 0 ;
    DcmUnsignedLongOffset *arg1 = (DcmUnsignedLongOffset *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmUnsignedLongOffset *)jarg1; 
    result = (DcmEVR)((DcmUnsignedLongOffset const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLongOffset_clear(void * jarg1) {
    void * jresult = 0 ;
    DcmUnsignedLongOffset *arg1 = (DcmUnsignedLongOffset *) 0 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLongOffset *)jarg1; 
    result = (arg1)->clear();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLongOffset_getNextRecord(void * jarg1) {
    void * jresult = 0 ;
    DcmUnsignedLongOffset *arg1 = (DcmUnsignedLongOffset *) 0 ;
    DcmObject *result;
    
    arg1 = (DcmUnsignedLongOffset *)jarg1; 
    result = (DcmObject *)(arg1)->getNextRecord();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLongOffset_setNextRecord(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    DcmUnsignedLongOffset *arg1 = (DcmUnsignedLongOffset *) 0 ;
    DcmObject *arg2 = (DcmObject *) 0 ;
    DcmObject *result;
    
    arg1 = (DcmUnsignedLongOffset *)jarg1; 
    arg2 = (DcmObject *)jarg2; 
    result = (DcmObject *)(arg1)->setNextRecord(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLongOffset_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmUnsignedLongOffset *arg1 = (DcmUnsignedLongOffset *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLongOffset *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmUnsignedLongOffset_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmUnsignedLongOffset *arg1 = (DcmUnsignedLongOffset *) 0 ;
    OFCondition result;
    
    arg1 = (DcmUnsignedLongOffset *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmFloatingPointSingle__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmFloatingPointSingle *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmFloatingPointSingle *)new DcmFloatingPointSingle((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmFloatingPointSingle__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmFloatingPointSingle *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmFloatingPointSingle *)new DcmFloatingPointSingle((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmFloatingPointSingle__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = 0 ;
    DcmFloatingPointSingle *result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmFloatingPointSingle const & reference is null");
    } 
    result = (DcmFloatingPointSingle *)new DcmFloatingPointSingle((DcmFloatingPointSingle const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmFloatingPointSingle(void * jarg1) {
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmFloatingPointSingle_ident(void * jarg1) {
    int jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    result = (DcmEVR)((DcmFloatingPointSingle const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmFloatingPointSingle_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    unsigned long result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmFloatingPointSingle_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFloatingPointSingle_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFloatingPointSingle_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFloatingPointSingle_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFloatingPointSingle_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_getFloat32__SWIG_0(void * jarg1, float * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    Float32 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (Float32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getFloat32(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_getFloat32__SWIG_1(void * jarg1, float * jarg2) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    Float32 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (Float32 *)jarg2; 
    result = (arg1)->getFloat32(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_getFloat32Array(void * jarg1, float** jarg2) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    Float32 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (Float32 **)jarg2; 
    result = (arg1)->getFloat32Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_putFloat32__SWIG_0(void * jarg1, float jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    Float32 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (Float32)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putFloat32(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_putFloat32__SWIG_1(void * jarg1, float jarg2) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    Float32 arg2 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (Float32)jarg2; 
    result = (arg1)->putFloat32(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_putFloat32Array(void * jarg1, const float* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    Float32 *arg2 = (Float32 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = (Float32 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putFloat32Array((Float32 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointSingle_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmFloatingPointSingle *arg1 = (DcmFloatingPointSingle *) 0 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointSingle *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmFloatingPointDouble__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmFloatingPointDouble *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmFloatingPointDouble *)new DcmFloatingPointDouble((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmFloatingPointDouble__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmFloatingPointDouble *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmFloatingPointDouble *)new DcmFloatingPointDouble((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmFloatingPointDouble__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = 0 ;
    DcmFloatingPointDouble *result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmFloatingPointDouble const & reference is null");
    } 
    result = (DcmFloatingPointDouble *)new DcmFloatingPointDouble((DcmFloatingPointDouble const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmFloatingPointDouble(void * jarg1) {
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmFloatingPointDouble_ident(void * jarg1) {
    int jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    result = (DcmEVR)((DcmFloatingPointDouble const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmFloatingPointDouble_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    unsigned long result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DcmFloatingPointDouble_print__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5, void * jarg6) {
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    size_t *arg6 = (size_t *) 0 ;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    arg6 = (size_t *)jarg6; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5,arg6);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFloatingPointDouble_print__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4, char * jarg5) {
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->print(*arg2,arg3,arg4,(char const *)arg5);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFloatingPointDouble_print__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, int jarg4) {
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    int arg4 ;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->print(*arg2,arg3,arg4);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFloatingPointDouble_print__SWIG_3(void * jarg1, void * jarg2, unsigned long jarg3) {
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    ostream *arg2 = 0 ;
    size_t arg3 ;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg3 = (size_t)jarg3; 
    (arg1)->print(*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DcmFloatingPointDouble_print__SWIG_4(void * jarg1, void * jarg2) {
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    (arg1)->print(*arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_getFloat64__SWIG_0(void * jarg1, double * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    Float64 *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (Float64 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getFloat64(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_getFloat64__SWIG_1(void * jarg1, double * jarg2) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    Float64 *arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (Float64 *)jarg2; 
    result = (arg1)->getFloat64(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_getFloat64Array(void * jarg1, double** jarg2) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    Float64 **arg2 = 0 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (Float64 **)jarg2; 
    result = (arg1)->getFloat64Array(*arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_getOFString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned int jarg4) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    bool arg4 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (arg1)->getOFString(*arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_getOFString__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    std::string *arg2 = 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    
    if (!jarg2) 
    SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "null string");
    
    std::string arg2_str;
    arg2 = &arg2_str;
    
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->getOFString(*arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    
    if (arg2_str.c_str() != 0 && arg2_str.length() > 0)
    {
        memcpy(jarg2, arg2_str.c_str(), arg2_str.length());
        jarg2[arg2_str.length()] = 0;
    }
    
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_putFloat64__SWIG_0(void * jarg1, double jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    Float64 arg2 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (Float64)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putFloat64(arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_putFloat64__SWIG_1(void * jarg1, double jarg2) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    Float64 arg2 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (Float64)jarg2; 
    result = (arg1)->putFloat64(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_putFloat64Array(void * jarg1, const double* jarg2, unsigned long jarg3) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    Float64 *arg2 = (Float64 *) 0 ;
    unsigned long arg3 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = (Float64 *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (arg1)->putFloat64Array((Float64 const *)arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_putString(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->putString((char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_verify__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (arg1)->verify(arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmFloatingPointDouble_verify__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmFloatingPointDouble *arg1 = (DcmFloatingPointDouble *) 0 ;
    OFCondition result;
    
    arg1 = (DcmFloatingPointDouble *)jarg1; 
    result = (arg1)->verify();
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmOtherFloat__SWIG_0(void * jarg1, unsigned long jarg2) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    Uint32 arg2 ;
    DcmOtherFloat *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    arg2 = (Uint32)jarg2; 
    result = (DcmOtherFloat *)new DcmOtherFloat((DcmTag const &)*arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmOtherFloat__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    DcmTag *arg1 = 0 ;
    DcmOtherFloat *result;
    
    arg1 = (DcmTag *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmTag const & reference is null");
    } 
    result = (DcmOtherFloat *)new DcmOtherFloat((DcmTag const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmOtherFloat__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    DcmOtherFloat *arg1 = 0 ;
    DcmOtherFloat *result;
    
    arg1 = (DcmOtherFloat *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmOtherFloat const & reference is null");
    } 
    result = (DcmOtherFloat *)new DcmOtherFloat((DcmOtherFloat const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmOtherFloat(void * jarg1) {
    DcmOtherFloat *arg1 = (DcmOtherFloat *) 0 ;
    
    arg1 = (DcmOtherFloat *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_DcmOtherFloat_ident(void * jarg1) {
    int jresult = 0 ;
    DcmOtherFloat *arg1 = (DcmOtherFloat *) 0 ;
    DcmEVR result;
    
    arg1 = (DcmOtherFloat *)jarg1; 
    result = (DcmEVR)((DcmOtherFloat const *)arg1)->ident();
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DcmOtherFloat_getVM(void * jarg1) {
    unsigned long jresult = 0 ;
    DcmOtherFloat *arg1 = (DcmOtherFloat *) 0 ;
    unsigned long result;
    
    arg1 = (DcmOtherFloat *)jarg1; 
    result = (unsigned long)(arg1)->getVM();
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_DICOM_STDAPPLICATIONCONTEXT() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.840.10008.3.1.1.1";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_DICOM_NET_IMPLEMENTATIONCLASSUID() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "1.2.276.0.7230010.3.0.3.5.3";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_get_DICOM_NET_IMPLEMENTATIONVERSIONNAME() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "OFFIS_DCMTK_353";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DICOM_APPLICATION_ACCEPTOR() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x01;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DICOM_APPLICATION_REQUESTOR() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x02;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DIC_UI_LEN() {
    int jresult = 0 ;
    int result;
    
    result = (int) 64;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DIC_AE_LEN() {
    int jresult = 0 ;
    int result;
    
    result = (int) 16;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DIC_SH_LEN() {
    int jresult = 0 ;
    int result;
    
    result = (int) 16;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DIC_PN_LEN() {
    int jresult = 0 ;
    int result;
    
    result = (int) 64;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DIC_LO_LEN() {
    int jresult = 0 ;
    int result;
    
    result = (int) 64;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DIC_CS_LEN() {
    int jresult = 0 ;
    int result;
    
    result = (int) 16;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DIC_DS_LEN() {
    int jresult = 0 ;
    int result;
    
    result = (int) 16;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DIC_IS_LEN() {
    int jresult = 0 ;
    int result;
    
    result = (int) 12;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DIC_NODENAME_LEN() {
    int jresult = 0 ;
    int result;
    
    result = (int) 128;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_DICOM_UI_LENGTH() {
    int jresult = 0 ;
    int result;
    
    result = (int) 64;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_ASC_DEFAULTMAXPDU() {
    int jresult = 0 ;
    int result;
    
    result = (int) 16384;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_ASC_MINIMUMPDUSIZE() {
    int jresult = 0 ;
    int result;
    
    result = (int) 4096;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_ASC_MAXIMUMPDUSIZE() {
    int jresult = 0 ;
    int result;
    
    result = (int) 131072;
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Network_role(void * jarg1, int jarg2) {
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_NetworkRole arg2 ;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (T_ASC_NetworkRole)jarg2; 
    if (arg1) (arg1)->role = (T_ASC_NetworkRole )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_ASC_Network_role(void * jarg1) {
    int jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_NetworkRole result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    result = (T_ASC_NetworkRole) ((arg1)->role);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Network_acceptorPort(void * jarg1, int jarg2) {
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    int arg2 ;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->acceptorPort = arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_ASC_Network_acceptorPort(void * jarg1) {
    int jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    int result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    result = (int) ((arg1)->acceptorPort);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Network_network(void * jarg1, void * jarg2) {
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    DUL_NETWORKKEY *arg2 = (DUL_NETWORKKEY *) 0 ;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (DUL_NETWORKKEY *)jarg2; 
    if (arg1) (arg1)->network = arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_ASC_Network_network(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    DUL_NETWORKKEY *result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    result = (DUL_NETWORKKEY *) ((arg1)->network);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_ASC_Network() {
    void * jresult = 0 ;
    T_ASC_Network *result;
    
    result = (T_ASC_Network *)new T_ASC_Network();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_ASC_Network(void * jarg1) {
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    
    arg1 = (T_ASC_Network *)jarg1; 
    delete arg1;
    
}


DllExport int SWIGSTDCALL CSharp_get_DICOM_MAXTRANSFERSYNTAXES() {
    int jresult = 0 ;
    int result;
    
    result = (int) 50;
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_PresentationContext_presentationContextID(void * jarg1, void * jarg2) {
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->presentationContextID = arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_ASC_PresentationContext_presentationContextID(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    T_ASC_PresentationContextID result;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    result =  ((arg1)->presentationContextID);
    
    jresult = new T_ASC_PresentationContextID((T_ASC_PresentationContextID &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_PresentationContext_abstractSyntax(void * jarg1, char * jarg2) {
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    char *arg2 ;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->abstractSyntax,arg2,64+1);
        else arg1->abstractSyntax[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_ASC_PresentationContext_abstractSyntax(void * jarg1) {
    char * jresult = 0 ;
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    char *result;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    result = (char *) ((arg1)->abstractSyntax);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_PresentationContext_transferSyntaxCount(void * jarg1, unsigned char jarg2) {
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    unsigned char arg2 ;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->transferSyntaxCount = arg2;
    
}


DllExport unsigned char SWIGSTDCALL CSharp_get_T_ASC_PresentationContext_transferSyntaxCount(void * jarg1) {
    unsigned char jresult = 0 ;
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    unsigned char result;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    result = (unsigned char) ((arg1)->transferSyntaxCount);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_PresentationContext_proposedTransferSyntaxes(void * jarg1, void * jarg2) {
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    DIC_UI *arg2 ;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    arg2 = (char (*)[64+1])jarg2; 
    {
        char (*inp)[64+1] = (char (*)[64+1])(arg2);
        char (*dest)[64+1] = (char (*)[64+1])(arg1->proposedTransferSyntaxes);
        size_t ii = 0;
        for (; ii < 50; ++ii) {
            char *ip = inp[ii];
            char *dp = dest[ii];
            size_t jj = 0;
            for (; jj < 64+1; ++jj) dp[jj] = ip[jj];
        }
    }
}


DllExport void * SWIGSTDCALL CSharp_get_T_ASC_PresentationContext_proposedTransferSyntaxes(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    DIC_UI *result;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    result = (DIC_UI *)(DIC_UI *) ((arg1)->proposedTransferSyntaxes);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_PresentationContext_acceptedTransferSyntax(void * jarg1, char * jarg2) {
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    char *arg2 ;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->acceptedTransferSyntax,arg2,64+1);
        else arg1->acceptedTransferSyntax[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_ASC_PresentationContext_acceptedTransferSyntax(void * jarg1) {
    char * jresult = 0 ;
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    char *result;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    result = (char *) ((arg1)->acceptedTransferSyntax);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_PresentationContext_resultReason(void * jarg1, int jarg2) {
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    T_ASC_P_ResultReason arg2 ;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    arg2 = (T_ASC_P_ResultReason)jarg2; 
    if (arg1) (arg1)->resultReason = (T_ASC_P_ResultReason )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_ASC_PresentationContext_resultReason(void * jarg1) {
    int jresult = 0 ;
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    T_ASC_P_ResultReason result;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    result = (T_ASC_P_ResultReason) ((arg1)->resultReason);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_PresentationContext_proposedRole(void * jarg1, int jarg2) {
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    T_ASC_SC_ROLE arg2 ;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    arg2 = (T_ASC_SC_ROLE)jarg2; 
    if (arg1) (arg1)->proposedRole = (T_ASC_SC_ROLE )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_ASC_PresentationContext_proposedRole(void * jarg1) {
    int jresult = 0 ;
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    T_ASC_SC_ROLE result;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    result = (T_ASC_SC_ROLE) ((arg1)->proposedRole);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_PresentationContext_acceptedRole(void * jarg1, int jarg2) {
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    T_ASC_SC_ROLE arg2 ;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    arg2 = (T_ASC_SC_ROLE)jarg2; 
    if (arg1) (arg1)->acceptedRole = (T_ASC_SC_ROLE )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_ASC_PresentationContext_acceptedRole(void * jarg1) {
    int jresult = 0 ;
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    T_ASC_SC_ROLE result;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    result = (T_ASC_SC_ROLE) ((arg1)->acceptedRole);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_ASC_PresentationContext() {
    void * jresult = 0 ;
    T_ASC_PresentationContext *result;
    
    result = (T_ASC_PresentationContext *)new T_ASC_PresentationContext();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_ASC_PresentationContext(void * jarg1) {
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_RejectParameters_result(void * jarg1, int jarg2) {
    T_ASC_RejectParameters *arg1 = (T_ASC_RejectParameters *) 0 ;
    T_ASC_RejectParametersResult arg2 ;
    
    arg1 = (T_ASC_RejectParameters *)jarg1; 
    arg2 = (T_ASC_RejectParametersResult)jarg2; 
    if (arg1) (arg1)->result = (T_ASC_RejectParametersResult )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_ASC_RejectParameters_result(void * jarg1) {
    int jresult = 0 ;
    T_ASC_RejectParameters *arg1 = (T_ASC_RejectParameters *) 0 ;
    T_ASC_RejectParametersResult result;
    
    arg1 = (T_ASC_RejectParameters *)jarg1; 
    result = (T_ASC_RejectParametersResult) ((arg1)->result);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_RejectParameters_source(void * jarg1, int jarg2) {
    T_ASC_RejectParameters *arg1 = (T_ASC_RejectParameters *) 0 ;
    T_ASC_RejectParametersSource arg2 ;
    
    arg1 = (T_ASC_RejectParameters *)jarg1; 
    arg2 = (T_ASC_RejectParametersSource)jarg2; 
    if (arg1) (arg1)->source = (T_ASC_RejectParametersSource )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_ASC_RejectParameters_source(void * jarg1) {
    int jresult = 0 ;
    T_ASC_RejectParameters *arg1 = (T_ASC_RejectParameters *) 0 ;
    T_ASC_RejectParametersSource result;
    
    arg1 = (T_ASC_RejectParameters *)jarg1; 
    result = (T_ASC_RejectParametersSource) ((arg1)->source);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_RejectParameters_reason(void * jarg1, int jarg2) {
    T_ASC_RejectParameters *arg1 = (T_ASC_RejectParameters *) 0 ;
    T_ASC_RejectParametersReason arg2 ;
    
    arg1 = (T_ASC_RejectParameters *)jarg1; 
    arg2 = (T_ASC_RejectParametersReason)jarg2; 
    if (arg1) (arg1)->reason = (T_ASC_RejectParametersReason )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_ASC_RejectParameters_reason(void * jarg1) {
    int jresult = 0 ;
    T_ASC_RejectParameters *arg1 = (T_ASC_RejectParameters *) 0 ;
    T_ASC_RejectParametersReason result;
    
    arg1 = (T_ASC_RejectParameters *)jarg1; 
    result = (T_ASC_RejectParametersReason) ((arg1)->reason);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_ASC_RejectParameters() {
    void * jresult = 0 ;
    T_ASC_RejectParameters *result;
    
    result = (T_ASC_RejectParameters *)new T_ASC_RejectParameters();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_ASC_RejectParameters(void * jarg1) {
    T_ASC_RejectParameters *arg1 = (T_ASC_RejectParameters *) 0 ;
    
    arg1 = (T_ASC_RejectParameters *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Parameters_ourImplementationClassUID(void * jarg1, char * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->ourImplementationClassUID,arg2,64+1);
        else arg1->ourImplementationClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_ASC_Parameters_ourImplementationClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    result = (char *) ((arg1)->ourImplementationClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Parameters_ourImplementationVersionName(void * jarg1, char * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->ourImplementationVersionName,arg2,16+1);
        else arg1->ourImplementationVersionName[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_ASC_Parameters_ourImplementationVersionName(void * jarg1) {
    char * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    result = (char *) ((arg1)->ourImplementationVersionName);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Parameters_theirImplementationClassUID(void * jarg1, char * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->theirImplementationClassUID,arg2,64+1);
        else arg1->theirImplementationClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_ASC_Parameters_theirImplementationClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    result = (char *) ((arg1)->theirImplementationClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Parameters_theirImplementationVersionName(void * jarg1, char * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->theirImplementationVersionName,arg2,16+1);
        else arg1->theirImplementationVersionName[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_ASC_Parameters_theirImplementationVersionName(void * jarg1) {
    char * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    result = (char *) ((arg1)->theirImplementationVersionName);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Parameters_modeCallback(void * jarg1, void * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    DUL_ModeCallback *arg2 = (DUL_ModeCallback *) 0 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (DUL_ModeCallback *)jarg2; 
    if (arg1) (arg1)->modeCallback = arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_ASC_Parameters_modeCallback(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    DUL_ModeCallback *result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    result = (DUL_ModeCallback *) ((arg1)->modeCallback);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Parameters_DULparams(void * jarg1, void * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    DUL_ASSOCIATESERVICEPARAMETERS arg2 ;
    DUL_ASSOCIATESERVICEPARAMETERS *argp2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    argp2 = (DUL_ASSOCIATESERVICEPARAMETERS *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null DUL_ASSOCIATESERVICEPARAMETERS");
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->DULparams = arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_ASC_Parameters_DULparams(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    DUL_ASSOCIATESERVICEPARAMETERS result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    result =  ((arg1)->DULparams);
    
    jresult = new DUL_ASSOCIATESERVICEPARAMETERS((DUL_ASSOCIATESERVICEPARAMETERS &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Parameters_ourMaxPDUReceiveSize(void * jarg1, long jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    long arg2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (long)jarg2; 
    if (arg1) (arg1)->ourMaxPDUReceiveSize = arg2;
    
}


DllExport long SWIGSTDCALL CSharp_get_T_ASC_Parameters_ourMaxPDUReceiveSize(void * jarg1) {
    long jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    long result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    result = (long) ((arg1)->ourMaxPDUReceiveSize);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Parameters_theirMaxPDUReceiveSize(void * jarg1, long jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    long arg2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (long)jarg2; 
    if (arg1) (arg1)->theirMaxPDUReceiveSize = arg2;
    
}


DllExport long SWIGSTDCALL CSharp_get_T_ASC_Parameters_theirMaxPDUReceiveSize(void * jarg1) {
    long jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    long result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    result = (long) ((arg1)->theirMaxPDUReceiveSize);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_ASC_Parameters() {
    void * jresult = 0 ;
    T_ASC_Parameters *result;
    
    result = (T_ASC_Parameters *)new T_ASC_Parameters();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_ASC_Parameters(void * jarg1) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Association_DULassociation(void * jarg1, void * jarg2) {
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    DUL_ASSOCIATIONKEY *arg2 = (DUL_ASSOCIATIONKEY *) 0 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (DUL_ASSOCIATIONKEY *)jarg2; 
    if (arg1) (arg1)->DULassociation = arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_ASC_Association_DULassociation(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    DUL_ASSOCIATIONKEY *result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = (DUL_ASSOCIATIONKEY *) ((arg1)->DULassociation);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Association_nextMsgID(void * jarg1, unsigned short jarg2) {
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    unsigned short arg2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->nextMsgID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_ASC_Association_nextMsgID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    unsigned short result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = (unsigned short) ((arg1)->nextMsgID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Association_sendPDVLength(void * jarg1, unsigned long jarg2) {
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    unsigned long arg2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (unsigned long)jarg2; 
    if (arg1) (arg1)->sendPDVLength = arg2;
    
}


DllExport unsigned long SWIGSTDCALL CSharp_get_T_ASC_Association_sendPDVLength(void * jarg1) {
    unsigned long jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    unsigned long result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = (unsigned long) ((arg1)->sendPDVLength);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_ASC_Association_sendPDVBuffer(void * jarg1, void * jarg2) {
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (unsigned char *)jarg2; 
    if (arg1) (arg1)->sendPDVBuffer = arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_ASC_Association_sendPDVBuffer(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    unsigned char *result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = (unsigned char *) ((arg1)->sendPDVBuffer);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_ASC_Association() {
    void * jresult = 0 ;
    T_ASC_Association *result;
    
    result = (T_ASC_Association *)new T_ASC_Association();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_ASC_Association(void * jarg1) {
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_ASC_initializeNetwork__SWIG_0(int jarg1, int jarg2, int jarg3, void * jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    T_ASC_NetworkRole arg1 ;
    int arg2 ;
    int arg3 ;
    T_ASC_Network **arg4 = (T_ASC_Network **) 0 ;
    unsigned long arg5 ;
    OFCondition result;
    
    arg1 = (T_ASC_NetworkRole)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (T_ASC_Network **)jarg4; 
    arg5 = (unsigned long)jarg5; 
    result = ASC_initializeNetwork((T_ASC_NetworkRole )arg1,arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_initializeNetwork__SWIG_1(int jarg1, int jarg2, int jarg3, void * jarg4) {
    void * jresult = 0 ;
    T_ASC_NetworkRole arg1 ;
    int arg2 ;
    int arg3 ;
    T_ASC_Network **arg4 = (T_ASC_Network **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_NetworkRole)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (T_ASC_Network **)jarg4; 
    result = ASC_initializeNetwork((T_ASC_NetworkRole )arg1,arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_dropNetwork(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Network **arg1 = (T_ASC_Network **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Network **)jarg1; 
    result = ASC_dropNetwork(arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_createAssociationParameters(void * jarg1, long jarg2) {
    void * jresult = 0 ;
    T_ASC_Parameters **arg1 = (T_ASC_Parameters **) 0 ;
    long arg2 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters **)jarg1; 
    arg2 = (long)jarg2; 
    result = ASC_createAssociationParameters(arg1,arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_destroyAssociationParameters(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Parameters **arg1 = (T_ASC_Parameters **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters **)jarg1; 
    result = ASC_destroyAssociationParameters(arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_setTransportLayerType(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    bool arg2 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = ASC_setTransportLayerType(arg1,arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_setAPTitles(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    arg4 = jarg4; 
    result = ASC_setAPTitles(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_getAPTitles(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    arg4 = jarg4; 
    result = ASC_getAPTitles(arg1,arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_getApplicationContextName(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    result = ASC_getApplicationContextName(arg1,arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_setPresentationAddresses(void * jarg1, char * jarg2, char * jarg3) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = ASC_setPresentationAddresses(arg1,(char const *)arg2,(char const *)arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_getPresentationAddresses(void * jarg1, char * jarg2, char * jarg3) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = ASC_getPresentationAddresses(arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_getRejectParameters(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    T_ASC_RejectParameters *arg2 = (T_ASC_RejectParameters *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (T_ASC_RejectParameters *)jarg2; 
    result = ASC_getRejectParameters(arg1,arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_ASC_printRejectParameters__SWIG_0(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_ASC_RejectParameters *arg2 = (T_ASC_RejectParameters *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_ASC_RejectParameters *)jarg2; 
    ASC_printRejectParameters(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_ASC_printRejectParameters__SWIG_1(void * jarg1, void * jarg2) {
    ostream *arg1 = 0 ;
    T_ASC_RejectParameters *arg2 = (T_ASC_RejectParameters *) 0 ;
    
    arg1 = (ostream *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg2 = (T_ASC_RejectParameters *)jarg2; 
    ASC_printRejectParameters(*arg1,arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_ASC_addPresentationContext__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, int jarg5, int jarg6) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    char *arg3 = (char *) 0 ;
    char **arg4 ;
    int arg5 ;
    T_ASC_SC_ROLE arg6 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = jarg3; 
    arg4 = (char **)jarg4; 
    arg5 = (int)jarg5; 
    arg6 = (T_ASC_SC_ROLE)jarg6; 
    result = ASC_addPresentationContext(arg1,arg2,(char const *)arg3,(char const *(*))arg4,arg5,(T_ASC_SC_ROLE )arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_addPresentationContext__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, int jarg5) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    char *arg3 = (char *) 0 ;
    char **arg4 ;
    int arg5 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = jarg3; 
    arg4 = (char **)jarg4; 
    arg5 = (int)jarg5; 
    result = ASC_addPresentationContext(arg1,arg2,(char const *)arg3,(char const *(*))arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_ASC_countPresentationContexts(void * jarg1) {
    int jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    int result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    result = (int)ASC_countPresentationContexts(arg1);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_ASC_countAcceptedPresentationContexts(void * jarg1) {
    int jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    int result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    result = (int)ASC_countAcceptedPresentationContexts(arg1);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_getPresentationContext(void * jarg1, int jarg2, void * jarg3) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    int arg2 ;
    T_ASC_PresentationContext *arg3 = (T_ASC_PresentationContext *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (T_ASC_PresentationContext *)jarg3; 
    result = ASC_getPresentationContext(arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_acceptPresentationContext__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    char *arg3 = (char *) 0 ;
    T_ASC_SC_ROLE arg4 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = jarg3; 
    arg4 = (T_ASC_SC_ROLE)jarg4; 
    result = ASC_acceptPresentationContext(arg1,arg2,(char const *)arg3,(T_ASC_SC_ROLE )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_acceptPresentationContext__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    char *arg3 = (char *) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = jarg3; 
    result = ASC_acceptPresentationContext(arg1,arg2,(char const *)arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_acceptContextsWithPreferredTransferSyntaxes__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char **arg2 ;
    int arg3 ;
    char **arg4 ;
    int arg5 ;
    T_ASC_SC_ROLE arg6 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (char **)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (char **)jarg4; 
    arg5 = (int)jarg5; 
    arg6 = (T_ASC_SC_ROLE)jarg6; 
    result = ASC_acceptContextsWithPreferredTransferSyntaxes(arg1,(char const *(*))arg2,arg3,(char const *(*))arg4,arg5,(T_ASC_SC_ROLE )arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_acceptContextsWithPreferredTransferSyntaxes__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char **arg2 ;
    int arg3 ;
    char **arg4 ;
    int arg5 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (char **)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (char **)jarg4; 
    arg5 = (int)jarg5; 
    result = ASC_acceptContextsWithPreferredTransferSyntaxes(arg1,(char const *(*))arg2,arg3,(char const *(*))arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_acceptContextsWithTransferSyntax__SWIG_0(void * jarg1, char * jarg2, int jarg3, void * jarg4, int jarg5) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    char **arg4 ;
    T_ASC_SC_ROLE arg5 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (char **)jarg4; 
    arg5 = (T_ASC_SC_ROLE)jarg5; 
    result = ASC_acceptContextsWithTransferSyntax(arg1,(char const *)arg2,arg3,(char const *(*))arg4,(T_ASC_SC_ROLE )arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_acceptContextsWithTransferSyntax__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    char **arg4 ;
    OFCondition result;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (char **)jarg4; 
    result = ASC_acceptContextsWithTransferSyntax(arg1,(char const *)arg2,arg3,(char const *(*))arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_refusePresentationContext(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_ASC_P_ResultReason arg3 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_ASC_P_ResultReason)jarg3; 
    result = ASC_refusePresentationContext(arg1,arg2,(T_ASC_P_ResultReason )arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_findAcceptedPresentationContext(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_ASC_PresentationContext *arg3 = (T_ASC_PresentationContext *) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_ASC_PresentationContext *)jarg3; 
    result = ASC_findAcceptedPresentationContext(arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_findAcceptedPresentationContextID__SWIG_0(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    char *arg2 = (char *) 0 ;
    T_ASC_PresentationContextID result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = jarg2; 
    result = ASC_findAcceptedPresentationContextID(arg1,(char const *)arg2);
    
    jresult = new T_ASC_PresentationContextID((T_ASC_PresentationContextID &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_findAcceptedPresentationContextID__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    T_ASC_PresentationContextID result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = ASC_findAcceptedPresentationContextID(arg1,(char const *)arg2,(char const *)arg3);
    
    jresult = new T_ASC_PresentationContextID((T_ASC_PresentationContextID &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_ASC_getRequestedExtNegList(void * jarg1, void * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    SOPClassExtendedNegotiationSubItemList **arg2 = (SOPClassExtendedNegotiationSubItemList **) 0 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (SOPClassExtendedNegotiationSubItemList **)jarg2; 
    ASC_getRequestedExtNegList(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_ASC_getAcceptedExtNegList(void * jarg1, void * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    SOPClassExtendedNegotiationSubItemList **arg2 = (SOPClassExtendedNegotiationSubItemList **) 0 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (SOPClassExtendedNegotiationSubItemList **)jarg2; 
    ASC_getAcceptedExtNegList(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_ASC_setRequestedExtNegList(void * jarg1, void * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    SOPClassExtendedNegotiationSubItemList *arg2 = (SOPClassExtendedNegotiationSubItemList *) 0 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (SOPClassExtendedNegotiationSubItemList *)jarg2; 
    ASC_setRequestedExtNegList(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_ASC_setAcceptedExtNegList(void * jarg1, void * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    SOPClassExtendedNegotiationSubItemList *arg2 = (SOPClassExtendedNegotiationSubItemList *) 0 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (SOPClassExtendedNegotiationSubItemList *)jarg2; 
    ASC_setAcceptedExtNegList(arg1,arg2);
    
}


DllExport unsigned long SWIGSTDCALL CSharp_ASC_getPeerCertificateLength(void * jarg1) {
    unsigned long jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    unsigned long result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = (unsigned long)ASC_getPeerCertificateLength(arg1);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_ASC_getPeerCertificate(void * jarg1, void * jarg2, unsigned long jarg3) {
    unsigned long jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    void *arg2 = (void *) 0 ;
    unsigned long arg3 ;
    unsigned long result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (void *)jarg2; 
    arg3 = (unsigned long)jarg3; 
    result = (unsigned long)ASC_getPeerCertificate(arg1,arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_setTransportLayer(void * jarg1, void * jarg2, int jarg3) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    DcmTransportLayer *arg2 = (DcmTransportLayer *) 0 ;
    int arg3 ;
    OFCondition result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (DcmTransportLayer *)jarg2; 
    arg3 = (int)jarg3; 
    result = ASC_setTransportLayer(arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_ASC_dumpParameters(void * jarg1, void * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    ASC_dumpParameters(arg1,*arg2);
    
}


DllExport void SWIGSTDCALL CSharp_ASC_dumpPresentationContext(void * jarg1, void * jarg2) {
    T_ASC_PresentationContext *arg1 = (T_ASC_PresentationContext *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (T_ASC_PresentationContext *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    ASC_dumpPresentationContext(arg1,*arg2);
    
}


DllExport void SWIGSTDCALL CSharp_ASC_dumpConnectionParameters(void * jarg1, void * jarg2) {
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    ostream *arg2 = 0 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (ostream *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    ASC_dumpConnectionParameters(arg1,*arg2);
    
}


DllExport void SWIGSTDCALL CSharp_ASC_activateCallback(void * jarg1, void * jarg2) {
    T_ASC_Parameters *arg1 = (T_ASC_Parameters *) 0 ;
    DUL_ModeCallback *arg2 = (DUL_ModeCallback *) 0 ;
    
    arg1 = (T_ASC_Parameters *)jarg1; 
    arg2 = (DUL_ModeCallback *)jarg2; 
    ASC_activateCallback(arg1,arg2);
    
}


DllExport unsigned int SWIGSTDCALL CSharp_ASC_associationWaiting(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    int arg2 ;
    bool result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)ASC_associationWaiting(arg1,arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_ASC_dataWaiting(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    int arg2 ;
    bool result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)ASC_dataWaiting(arg1,arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_ASC_selectReadableAssociation(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    T_ASC_Association **arg1 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    arg1 = (T_ASC_Association **)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)ASC_selectReadableAssociation(arg1,arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_requestAssociation__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_Parameters *arg2 = (T_ASC_Parameters *) 0 ;
    T_ASC_Association **arg3 = (T_ASC_Association **) 0 ;
    void **arg4 = (void **) 0 ;
    unsigned long *arg5 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (T_ASC_Parameters *)jarg2; 
    arg3 = (T_ASC_Association **)jarg3; 
    arg4 = (void **)jarg4; 
    arg5 = (unsigned long *)jarg5; 
    result = ASC_requestAssociation(arg1,arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_requestAssociation__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_Parameters *arg2 = (T_ASC_Parameters *) 0 ;
    T_ASC_Association **arg3 = (T_ASC_Association **) 0 ;
    void **arg4 = (void **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (T_ASC_Parameters *)jarg2; 
    arg3 = (T_ASC_Association **)jarg3; 
    arg4 = (void **)jarg4; 
    result = ASC_requestAssociation(arg1,arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_requestAssociation__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_Parameters *arg2 = (T_ASC_Parameters *) 0 ;
    T_ASC_Association **arg3 = (T_ASC_Association **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (T_ASC_Parameters *)jarg2; 
    arg3 = (T_ASC_Association **)jarg3; 
    result = ASC_requestAssociation(arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_receiveAssociation__SWIG_0(void * jarg1, void * jarg2, long jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7, int jarg8) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_Association **arg2 = (T_ASC_Association **) 0 ;
    long arg3 ;
    void **arg4 = (void **) 0 ;
    unsigned long *arg5 = (unsigned long *) 0 ;
    bool arg6 ;
    DUL_BLOCKOPTIONS arg7 ;
    int arg8 ;
    OFCondition result;
    DUL_BLOCKOPTIONS *argp7 ;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (T_ASC_Association **)jarg2; 
    arg3 = (long)jarg3; 
    arg4 = (void **)jarg4; 
    arg5 = (unsigned long *)jarg5; 
    arg6 = jarg6 ? true : false; 
    argp7 = (DUL_BLOCKOPTIONS *)jarg7; 
    if (!argp7) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null DUL_BLOCKOPTIONS");
    }
    arg7 = *argp7; 
    arg8 = (int)jarg8; 
    result = ASC_receiveAssociation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_receiveAssociation__SWIG_1(void * jarg1, void * jarg2, long jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_Association **arg2 = (T_ASC_Association **) 0 ;
    long arg3 ;
    void **arg4 = (void **) 0 ;
    unsigned long *arg5 = (unsigned long *) 0 ;
    bool arg6 ;
    DUL_BLOCKOPTIONS arg7 ;
    OFCondition result;
    DUL_BLOCKOPTIONS *argp7 ;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (T_ASC_Association **)jarg2; 
    arg3 = (long)jarg3; 
    arg4 = (void **)jarg4; 
    arg5 = (unsigned long *)jarg5; 
    arg6 = jarg6 ? true : false; 
    argp7 = (DUL_BLOCKOPTIONS *)jarg7; 
    if (!argp7) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null DUL_BLOCKOPTIONS");
    }
    arg7 = *argp7; 
    result = ASC_receiveAssociation(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_receiveAssociation__SWIG_2(void * jarg1, void * jarg2, long jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_Association **arg2 = (T_ASC_Association **) 0 ;
    long arg3 ;
    void **arg4 = (void **) 0 ;
    unsigned long *arg5 = (unsigned long *) 0 ;
    bool arg6 ;
    OFCondition result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (T_ASC_Association **)jarg2; 
    arg3 = (long)jarg3; 
    arg4 = (void **)jarg4; 
    arg5 = (unsigned long *)jarg5; 
    arg6 = jarg6 ? true : false; 
    result = ASC_receiveAssociation(arg1,arg2,arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_receiveAssociation__SWIG_3(void * jarg1, void * jarg2, long jarg3, void * jarg4, void * jarg5) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_Association **arg2 = (T_ASC_Association **) 0 ;
    long arg3 ;
    void **arg4 = (void **) 0 ;
    unsigned long *arg5 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (T_ASC_Association **)jarg2; 
    arg3 = (long)jarg3; 
    arg4 = (void **)jarg4; 
    arg5 = (unsigned long *)jarg5; 
    result = ASC_receiveAssociation(arg1,arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_receiveAssociation__SWIG_4(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_Association **arg2 = (T_ASC_Association **) 0 ;
    long arg3 ;
    void **arg4 = (void **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (T_ASC_Association **)jarg2; 
    arg3 = (long)jarg3; 
    arg4 = (void **)jarg4; 
    result = ASC_receiveAssociation(arg1,arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_receiveAssociation__SWIG_5(void * jarg1, void * jarg2, long jarg3) {
    void * jresult = 0 ;
    T_ASC_Network *arg1 = (T_ASC_Network *) 0 ;
    T_ASC_Association **arg2 = (T_ASC_Association **) 0 ;
    long arg3 ;
    OFCondition result;
    
    arg1 = (T_ASC_Network *)jarg1; 
    arg2 = (T_ASC_Association **)jarg2; 
    arg3 = (long)jarg3; 
    result = ASC_receiveAssociation(arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_acknowledgeAssociation__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    void **arg2 = (void **) 0 ;
    unsigned long *arg3 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (void **)jarg2; 
    arg3 = (unsigned long *)jarg3; 
    result = ASC_acknowledgeAssociation(arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_acknowledgeAssociation__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    void **arg2 = (void **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (void **)jarg2; 
    result = ASC_acknowledgeAssociation(arg1,arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_acknowledgeAssociation__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = ASC_acknowledgeAssociation(arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_rejectAssociation__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_RejectParameters *arg2 = (T_ASC_RejectParameters *) 0 ;
    void **arg3 = (void **) 0 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (T_ASC_RejectParameters *)jarg2; 
    arg3 = (void **)jarg3; 
    arg4 = (unsigned long *)jarg4; 
    result = ASC_rejectAssociation(arg1,arg2,arg3,arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_rejectAssociation__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_RejectParameters *arg2 = (T_ASC_RejectParameters *) 0 ;
    void **arg3 = (void **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (T_ASC_RejectParameters *)jarg2; 
    arg3 = (void **)jarg3; 
    result = ASC_rejectAssociation(arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_rejectAssociation__SWIG_2(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_RejectParameters *arg2 = (T_ASC_RejectParameters *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (T_ASC_RejectParameters *)jarg2; 
    result = ASC_rejectAssociation(arg1,arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_releaseAssociation(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = ASC_releaseAssociation(arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_acknowledgeRelease(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = ASC_acknowledgeRelease(arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_abortAssociation(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = ASC_abortAssociation(arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_dropSCPAssociation(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = ASC_dropSCPAssociation(arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_dropAssociation(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    result = ASC_dropAssociation(arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_ASC_destroyAssociation(void * jarg1) {
    void * jresult = 0 ;
    T_ASC_Association **arg1 = (T_ASC_Association **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association **)jarg1; 
    result = ASC_destroyAssociation(arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_ASCC_BADPRESENTATIONCONTEXTID() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)ASCC_BADPRESENTATIONCONTEXTID;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_ASCC_BADPRESENTATIONCONTEXTPOSITION() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)ASCC_BADPRESENTATIONCONTEXTPOSITION;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_ASCC_CODINGERROR() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)ASCC_CODINGERROR;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_ASCC_DUPLICATEPRESENTATIONCONTEXTID() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)ASCC_DUPLICATEPRESENTATIONCONTEXTID;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_ASCC_MISSINGTRANSFERSYNTAX() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)ASCC_MISSINGTRANSFERSYNTAX;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_ASCC_NULLKEY() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)ASCC_NULLKEY;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_ASCC_SHUTDOWNAPPLICATION() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)ASCC_SHUTDOWNAPPLICATION;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_ASC_BADPRESENTATIONCONTEXTID() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&ASC_BADPRESENTATIONCONTEXTID;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_ASC_MISSINGTRANSFERSYNTAX() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&ASC_MISSINGTRANSFERSYNTAX;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_ASC_NULLKEY() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&ASC_NULLKEY;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_ASC_SHUTDOWNAPPLICATION() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&ASC_SHUTDOWNAPPLICATION;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_BADCOMMANDTYPE() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_BADCOMMANDTYPE;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_BADDATA() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_BADDATA;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_BADMESSAGE() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_BADMESSAGE;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_BUILDFAILED() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_BUILDFAILED;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_ILLEGALASSOCIATION() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_ILLEGALASSOCIATION;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_INVALIDPRESENTATIONCONTEXTID() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_INVALIDPRESENTATIONCONTEXTID;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_NODATAAVAILABLE() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_NODATAAVAILABLE;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_NOVALIDPRESENTATIONCONTEXTID() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_NOVALIDPRESENTATIONCONTEXTID;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_NULLKEY() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_NULLKEY;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_OUTOFRESOURCES() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_OUTOFRESOURCES;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_PARSEFAILED() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_PARSEFAILED;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_READPDVFAILED() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_READPDVFAILED;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_RECEIVEFAILED() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_RECEIVEFAILED;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_SENDFAILED() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_SENDFAILED;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_UNEXPECTEDPDVTYPE() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_UNEXPECTEDPDVTYPE;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_UNEXPECTEDREQUEST() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_UNEXPECTEDREQUEST;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_UNEXPECTEDRESPONSE() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_UNEXPECTEDRESPONSE;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_UNSUPPORTEDTRANSFERSYNTAX() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_UNSUPPORTEDTRANSFERSYNTAX;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DIMSEC_NODATADICT() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DIMSEC_NODATADICT;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_BADCOMMANDTYPE() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_BADCOMMANDTYPE;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_BADDATA() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_BADDATA;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_BADMESSAGE() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_BADMESSAGE;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_ILLEGALASSOCIATION() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_ILLEGALASSOCIATION;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_NODATAAVAILABLE() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_NODATAAVAILABLE;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_NOVALIDPRESENTATIONCONTEXTID() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_NOVALIDPRESENTATIONCONTEXTID;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_NULLKEY() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_NULLKEY;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_OUTOFRESOURCES() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_OUTOFRESOURCES;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_PARSEFAILED() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_PARSEFAILED;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_READPDVFAILED() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_READPDVFAILED;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_RECEIVEFAILED() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_RECEIVEFAILED;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_SENDFAILED() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_SENDFAILED;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_UNEXPECTEDPDVTYPE() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_UNEXPECTEDPDVTYPE;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DIMSE_NODATADICT() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DIMSE_NODATADICT;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_ASSOCIATIONREJECTED() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_ASSOCIATIONREJECTED;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_CODINGERROR() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_CODINGERROR;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_FSMERROR() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_FSMERROR;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_ILLEGALACCEPT() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_ILLEGALACCEPT;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_ILLEGALKEY() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_ILLEGALKEY;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_ILLEGALPARAMETER() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_ILLEGALPARAMETER;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_ILLEGALPDU() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_ILLEGALPDU;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_ILLEGALPDULENGTH() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_ILLEGALPDULENGTH;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_ILLEGALREJECTREASON() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_ILLEGALREJECTREASON;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_ILLEGALREJECTRESULT() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_ILLEGALREJECTRESULT;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_ILLEGALREQUEST() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_ILLEGALREQUEST;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_ILLEGALSERVICEPARAMETER() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_ILLEGALSERVICEPARAMETER;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_INCORRECTBUFFERLENGTH() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_INCORRECTBUFFERLENGTH;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_INSUFFICIENTBUFFERLENGTH() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_INSUFFICIENTBUFFERLENGTH;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_LISTERROR() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_LISTERROR;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_NETWORKCLOSED() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_NETWORKCLOSED;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_NOASSOCIATIONREQUEST() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_NOASSOCIATIONREQUEST;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_NOPDVS() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_NOPDVS;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_NULLKEY() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_NULLKEY;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_PCTRANSLATIONFAILURE() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_PCTRANSLATIONFAILURE;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_PDATAPDUARRIVED() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_PDATAPDUARRIVED;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_PEERABORTEDASSOCIATION() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_PEERABORTEDASSOCIATION;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_PEERILLEGALXFERSYNTAXCOUNT() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_PEERILLEGALXFERSYNTAXCOUNT;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_PEERREQUESTEDRELEASE() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_PEERREQUESTEDRELEASE;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_READTIMEOUT() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_READTIMEOUT;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_REQUESTASSOCIATIONFAILED() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_REQUESTASSOCIATIONFAILED;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_TCPINITERROR() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_TCPINITERROR;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_TCPIOERROR() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_TCPIOERROR;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_TLSERROR() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_TLSERROR;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_UNEXPECTEDPDU() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_UNEXPECTEDPDU;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_UNKNOWNHOST() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_UNKNOWNHOST;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_UNRECOGNIZEDPDUTYPE() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_UNRECOGNIZEDPDUTYPE;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_UNSUPPORTEDPEERPROTOCOL() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_UNSUPPORTEDPEERPROTOCOL;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_WRONGDATATYPE() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_WRONGDATATYPE;
    
    jresult = result; 
    return jresult;
}


DllExport unsigned short SWIGSTDCALL CSharp_get_DULC_TCPWRAPPER() {
    unsigned short jresult = 0 ;
    unsigned short result;
    
    result = (unsigned short)(unsigned short)DULC_TCPWRAPPER;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_ASSOCIATIONREJECTED() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_ASSOCIATIONREJECTED;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_ILLEGALACCEPT() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_ILLEGALACCEPT;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_ILLEGALKEY() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_ILLEGALKEY;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_ILLEGALPDU() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_ILLEGALPDU;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_ILLEGALPDULENGTH() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_ILLEGALPDULENGTH;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_ILLEGALREQUEST() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_ILLEGALREQUEST;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_INCORRECTBUFFERLENGTH() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_INCORRECTBUFFERLENGTH;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_INSUFFICIENTBUFFERLENGTH() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_INSUFFICIENTBUFFERLENGTH;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_LISTERROR() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_LISTERROR;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_NETWORKCLOSED() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_NETWORKCLOSED;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_NOASSOCIATIONREQUEST() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_NOASSOCIATIONREQUEST;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_NOPDVS() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_NOPDVS;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_NULLKEY() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_NULLKEY;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_PCTRANSLATIONFAILURE() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_PCTRANSLATIONFAILURE;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_PDATAPDUARRIVED() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_PDATAPDUARRIVED;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_PEERABORTEDASSOCIATION() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_PEERABORTEDASSOCIATION;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_PEERREQUESTEDRELEASE() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_PEERREQUESTEDRELEASE;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_READTIMEOUT() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_READTIMEOUT;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_REQUESTASSOCIATIONFAILED() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_REQUESTASSOCIATIONFAILED;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_UNEXPECTEDPDU() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_UNEXPECTEDPDU;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_UNSUPPORTEDPEERPROTOCOL() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_UNSUPPORTEDPEERPROTOCOL;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_DUL_WRONGDATATYPE() {
    void * jresult = 0 ;
    OFCondition *result;
    
    result = (OFCondition *)&DUL_WRONGDATATYPE;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DimseCondition_dump__SWIG_0(void * jarg1, void * jarg2) {
    OFCondition arg1 ;
    OFConsole *arg2 = 0 ;
    OFCondition *argp1 ;
    
    argp1 = (OFCondition *)jarg1; 
    if (!argp1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null OFCondition");
    }
    arg1 = *argp1; 
    arg2 = (OFConsole *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "OFConsole & reference is null");
    } 
    DimseCondition::dump(arg1,*arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DimseCondition_dump__SWIG_1(void * jarg1) {
    OFCondition arg1 ;
    OFCondition *argp1 ;
    
    argp1 = (OFCondition *)jarg1; 
    if (!argp1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null OFCondition");
    }
    arg1 = *argp1; 
    DimseCondition::dump(arg1);
    
}


DllExport void * SWIGSTDCALL CSharp_DimseCondition_push__SWIG_0(unsigned short jarg1, unsigned short jarg2, int jarg3, char * jarg4, void * jarg5) {
    void * jresult = 0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    OFStatus arg3 ;
    char *arg4 = (char *) 0 ;
    OFCondition arg5 ;
    OFCondition result;
    OFCondition *argp5 ;
    
    arg1 = (unsigned short)jarg1; 
    arg2 = (unsigned short)jarg2; 
    arg3 = (OFStatus)jarg3; 
    arg4 = jarg4; 
    argp5 = (OFCondition *)jarg5; 
    if (!argp5) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null OFCondition");
    }
    arg5 = *argp5; 
    result = DimseCondition::push(arg1,arg2,(OFStatus )arg3,(char const *)arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DimseCondition_push__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    OFCondition arg1 ;
    OFCondition arg2 ;
    OFCondition result;
    OFCondition *argp1 ;
    OFCondition *argp2 ;
    
    argp1 = (OFCondition *)jarg1; 
    if (!argp1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null OFCondition");
    }
    arg1 = *argp1; 
    argp2 = (OFCondition *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null OFCondition");
    }
    arg2 = *argp2; 
    result = DimseCondition::push(arg1,arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DimseCondition() {
    void * jresult = 0 ;
    DimseCondition *result;
    
    result = (DimseCondition *)new DimseCondition();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DimseCondition(void * jarg1) {
    DimseCondition *arg1 = (DimseCondition *) 0 ;
    
    arg1 = (DimseCondition *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_DcmAssociationConfigurationFile_initialize(void * jarg1, char * jarg2) {
    void * jresult = 0 ;
    DcmAssociationConfiguration *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "DcmAssociationConfiguration & reference is null");
    } 
    arg2 = jarg2; 
    result = DcmAssociationConfigurationFile::initialize(*arg1,(char const *)arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_DcmAssociationConfigurationFile() {
    void * jresult = 0 ;
    DcmAssociationConfigurationFile *result;
    
    result = (DcmAssociationConfigurationFile *)new DcmAssociationConfigurationFile();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmAssociationConfigurationFile(void * jarg1) {
    DcmAssociationConfigurationFile *arg1 = (DcmAssociationConfigurationFile *) 0 ;
    
    arg1 = (DcmAssociationConfigurationFile *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_new_DcmAssociationConfiguration() {
    void * jresult = 0 ;
    DcmAssociationConfiguration *result;
    
    result = (DcmAssociationConfiguration *)new DcmAssociationConfiguration();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_DcmAssociationConfiguration(void * jarg1) {
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_DcmAssociationConfiguration_setAssociationParameters(void * jarg1, char * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    T_ASC_Parameters *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    arg3 = (T_ASC_Parameters *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "T_ASC_Parameters & reference is null");
    } 
    result = ((DcmAssociationConfiguration const *)arg1)->setAssociationParameters((char const *)arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAssociationConfiguration_evaluateAssociationParameters(void * jarg1, char * jarg2, void * jarg3) {
    void * jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    T_ASC_Association *arg3 = 0 ;
    OFCondition result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    arg3 = (T_ASC_Association *)jarg3;
    if(!arg3) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "T_ASC_Association & reference is null");
    } 
    result = ((DcmAssociationConfiguration const *)arg1)->evaluateAssociationParameters((char const *)arg2,*arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAssociationConfiguration_addTransferSyntax(void * jarg1, char * jarg2, char * jarg3) {
    void * jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = (arg1)->addTransferSyntax((char const *)arg2,(char const *)arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAssociationConfiguration_addPresentationContext(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
    void * jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    arg4 = jarg4; 
    result = (arg1)->addPresentationContext((char const *)arg2,(char const *)arg3,(char const *)arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAssociationConfiguration_addRole(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
    void * jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    T_ASC_SC_ROLE arg4 ;
    OFCondition result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    arg4 = (T_ASC_SC_ROLE)jarg4; 
    result = (arg1)->addRole((char const *)arg2,(char const *)arg3,(T_ASC_SC_ROLE )arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAssociationConfiguration_addExtendedNegotiation(void * jarg1, char * jarg2, char * jarg3, void * jarg4, unsigned long jarg5) {
    void * jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    unsigned char *arg4 = (unsigned char *) 0 ;
    Uint32 arg5 ;
    OFCondition result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    arg4 = (unsigned char *)jarg4; 
    arg5 = (Uint32)jarg5; 
    result = (arg1)->addExtendedNegotiation((char const *)arg2,(char const *)arg3,(unsigned char const *)arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAssociationConfiguration_addProfile__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
    void * jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    char *arg5 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    arg4 = jarg4; 
    arg5 = jarg5; 
    result = (arg1)->addProfile((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAssociationConfiguration_addProfile__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
    void * jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    arg4 = jarg4; 
    result = (arg1)->addProfile((char const *)arg2,(char const *)arg3,(char const *)arg4);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DcmAssociationConfiguration_addProfile__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
    void * jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    OFCondition result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = (arg1)->addProfile((char const *)arg2,(char const *)arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmAssociationConfiguration_isKnownProfile(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    result = (bool)((DcmAssociationConfiguration const *)arg1)->isKnownProfile((char const *)arg2);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DcmAssociationConfiguration_isValidSCPProfile(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    DcmAssociationConfiguration *arg1 = (DcmAssociationConfiguration *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    
    arg1 = (DcmAssociationConfiguration *)jarg1; 
    arg2 = jarg2; 
    result = (bool)((DcmAssociationConfiguration const *)arg1)->isValidSCPProfile((char const *)arg2);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_dcmPeerRequiresExactUIDCopy(void * jarg1) {
    OFGlobal<bool > *arg1 = (OFGlobal<bool > *) 0 ;
    
    arg1 = (OFGlobal<bool > *)jarg1; 
    dcmPeerRequiresExactUIDCopy = *arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_get_dcmPeerRequiresExactUIDCopy() {
    void * jresult = 0 ;
    OFGlobal<bool > *result;
    
    result = (OFGlobal<bool > *)&dcmPeerRequiresExactUIDCopy;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_dcmMaxOutgoingPDUSize(void * jarg1) {
    OFGlobal<Uint32 > *arg1 = (OFGlobal<Uint32 > *) 0 ;
    
    arg1 = (OFGlobal<Uint32 > *)jarg1; 
    dcmMaxOutgoingPDUSize = *arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_get_dcmMaxOutgoingPDUSize() {
    void * jresult = 0 ;
    OFGlobal<Uint32 > *result;
    
    result = (OFGlobal<Uint32 > *)&dcmMaxOutgoingPDUSize;
    
    jresult = (void *)result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_Success() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0000;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_Pending() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xff00;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_STORE_Refused_OutOfResources() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa700;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_STORE_Refused_SOPClassNotSupported() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa800;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_STORE_Error_DataSetDoesNotMatchSOPClass() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa900;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_STORE_Error_CannotUnderstand() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xc000;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_STORE_Warning_CoersionOfDataElements() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xb000;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_STORE_Warning_DataSetDoesNotMatchSOPClass() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xb007;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_STORE_Warning_ElementsDiscarded() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xb006;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_FIND_Refused_OutOfResources() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa700;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_FIND_Refused_SOPClassNotSupported() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa800;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_FIND_Failed_IdentifierDoesNotMatchSOPClass() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa900;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_FIND_Failed_UnableToProcess() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xc000;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_FIND_Cancel_MatchingTerminatedDueToCancelRequest() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xfe00;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_FIND_Pending_WarningUnsupportedOptionalKeys() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xff01;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_MOVE_Refused_OutOfResourcesNumberOfMatches() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa701;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_MOVE_Refused_OutOfResourcesSubOperations() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa702;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_MOVE_Failed_SOPClassNotSupported() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa800;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_MOVE_Failed_MoveDestinationUnknown() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa801;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_MOVE_Failed_IdentifierDoesNotMatchSOPClass() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa900;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_MOVE_Failed_UnableToProcess() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xc000;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_MOVE_Cancel_SubOperationsTerminatedDueToCancelIndication() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xfe00;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_MOVE_Warning_SubOperationsCompleteOneOrMoreFailures() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xb000;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_GET_Refused_OutOfResourcesNumberOfMatches() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa701;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_GET_Refused_OutOfResourcesSubOperations() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa702;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_GET_Failed_SOPClassNotSupported() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa800;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_GET_Failed_IdentifierDoesNotMatchSOPClass() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xa900;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_GET_Failed_UnableToProcess() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xc000;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_GET_Cancel_SubOperationsTerminatedDueToCancelIndication() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xfe00;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_GET_Warning_SubOperationsCompleteOneOrMoreFailures() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xb000;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_Cancel() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xFE00;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_AttributeListError() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0107;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_SOPClassNotSupported() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0122;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_ClassInstanceConflict() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0119;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_DuplicateSOPInstance() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0111;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_DuplicateInvocation() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0210;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_InvalidArgumentValue() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0115;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_InvalidAttributeValue() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0106;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_InvalidObjectInstance() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0117;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_MissingAttribute() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0120;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_MissingAttributeValue() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0121;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_MistypedArgument() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0212;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_NoSuchArgument() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0114;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_NoSuchAttribute() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0105;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_NoSuchEventType() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0113;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_NoSuchObjectInstance() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0112;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_NoSuchSOPClass() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0118;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_ProcessingFailure() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0110;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_ResourceLimitation() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0213;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_UnrecognizedOperation() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0211;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_BFS_Warn_MemoryAllocation() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xB600;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_BFS_Warn_NoSessionPrinting() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xB601;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_BFS_Warn_EmptyPage() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xB602;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_BFB_Warn_EmptyPage() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xB603;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_BFS_Fail_NoFilmBox() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xC600;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_BFS_Fail_PrintQueueFull() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xC601;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_BSB_Fail_PrintQueueFull() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xC602;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_BFS_BFB_Fail_ImageSize() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xC603;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_BFS_BFB_Fail_PositionCollision() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xC604;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_IB_Fail_InsufficientMemory() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xC605;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_STATUS_N_PRINT_IB_Fail_MoreThanOneVOILUT() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0xC606;
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRQ_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRQ_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRQ_Priority(void * jarg1, int jarg2) {
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    T_DIMSE_Priority arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    arg2 = (T_DIMSE_Priority)jarg2; 
    if (arg1) (arg1)->Priority = (T_DIMSE_Priority )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRQ_Priority(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    T_DIMSE_Priority result;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    result = (T_DIMSE_Priority) ((arg1)->Priority);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRQ_AffectedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPInstanceUID,arg2,64+1);
        else arg1->AffectedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRQ_AffectedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRQ_MoveOriginatorApplicationEntityTitle(void * jarg1, char * jarg2) {
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->MoveOriginatorApplicationEntityTitle,arg2,16+1);
        else arg1->MoveOriginatorApplicationEntityTitle[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRQ_MoveOriginatorApplicationEntityTitle(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    result = (char *) ((arg1)->MoveOriginatorApplicationEntityTitle);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRQ_MoveOriginatorID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MoveOriginatorID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRQ_MoveOriginatorID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MoveOriginatorID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRQ_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRQ_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_STORE_MOVEORIGINATORAETITLE() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_STORE_MOVEORIGINATORID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0002;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_STORE_RQ_BLANK_PADDING() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0008;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_StoreRQ() {
    void * jresult = 0 ;
    T_DIMSE_C_StoreRQ *result;
    
    result = (T_DIMSE_C_StoreRQ *)new T_DIMSE_C_StoreRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_StoreRQ(void * jarg1) {
    T_DIMSE_C_StoreRQ *arg1 = (T_DIMSE_C_StoreRQ *) 0 ;
    
    arg1 = (T_DIMSE_C_StoreRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRSP_AffectedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPInstanceUID,arg2,64+1);
        else arg1->AffectedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRSP_AffectedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_StoreRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_C_StoreRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_STORE_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_STORE_AFFECTEDSOPINSTANCEUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0002;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_STORE_PEER_REQUIRES_EXACT_UID_COPY() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0004;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_STORE_RSP_BLANK_PADDING() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0008;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_StoreRSP() {
    void * jresult = 0 ;
    T_DIMSE_C_StoreRSP *result;
    
    result = (T_DIMSE_C_StoreRSP *)new T_DIMSE_C_StoreRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_StoreRSP(void * jarg1) {
    T_DIMSE_C_StoreRSP *arg1 = (T_DIMSE_C_StoreRSP *) 0 ;
    
    arg1 = (T_DIMSE_C_StoreRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_EchoRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_EchoRQ *arg1 = (T_DIMSE_C_EchoRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_EchoRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_EchoRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_EchoRQ *arg1 = (T_DIMSE_C_EchoRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_EchoRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_EchoRQ_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_EchoRQ *arg1 = (T_DIMSE_C_EchoRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_EchoRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_EchoRQ_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_EchoRQ *arg1 = (T_DIMSE_C_EchoRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_EchoRQ *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_EchoRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_EchoRQ *arg1 = (T_DIMSE_C_EchoRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_EchoRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_EchoRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_EchoRQ *arg1 = (T_DIMSE_C_EchoRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_EchoRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_EchoRQ() {
    void * jresult = 0 ;
    T_DIMSE_C_EchoRQ *result;
    
    result = (T_DIMSE_C_EchoRQ *)new T_DIMSE_C_EchoRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_EchoRQ(void * jarg1) {
    T_DIMSE_C_EchoRQ *arg1 = (T_DIMSE_C_EchoRQ *) 0 ;
    
    arg1 = (T_DIMSE_C_EchoRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_EchoRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_EchoRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_EchoRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_EchoRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_EchoRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_EchoRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_EchoRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_EchoRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_EchoRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_C_EchoRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_ECHO_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_EchoRSP() {
    void * jresult = 0 ;
    T_DIMSE_C_EchoRSP *result;
    
    result = (T_DIMSE_C_EchoRSP *)new T_DIMSE_C_EchoRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_EchoRSP(void * jarg1) {
    T_DIMSE_C_EchoRSP *arg1 = (T_DIMSE_C_EchoRSP *) 0 ;
    
    arg1 = (T_DIMSE_C_EchoRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_FindRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_FindRQ *arg1 = (T_DIMSE_C_FindRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_FindRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_FindRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_FindRQ *arg1 = (T_DIMSE_C_FindRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_FindRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_FindRQ_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_FindRQ *arg1 = (T_DIMSE_C_FindRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_FindRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_FindRQ_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_FindRQ *arg1 = (T_DIMSE_C_FindRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_FindRQ *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_FindRQ_Priority(void * jarg1, int jarg2) {
    T_DIMSE_C_FindRQ *arg1 = (T_DIMSE_C_FindRQ *) 0 ;
    T_DIMSE_Priority arg2 ;
    
    arg1 = (T_DIMSE_C_FindRQ *)jarg1; 
    arg2 = (T_DIMSE_Priority)jarg2; 
    if (arg1) (arg1)->Priority = (T_DIMSE_Priority )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_FindRQ_Priority(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_FindRQ *arg1 = (T_DIMSE_C_FindRQ *) 0 ;
    T_DIMSE_Priority result;
    
    arg1 = (T_DIMSE_C_FindRQ *)jarg1; 
    result = (T_DIMSE_Priority) ((arg1)->Priority);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_FindRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_FindRQ *arg1 = (T_DIMSE_C_FindRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_FindRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_FindRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_FindRQ *arg1 = (T_DIMSE_C_FindRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_FindRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_FindRQ() {
    void * jresult = 0 ;
    T_DIMSE_C_FindRQ *result;
    
    result = (T_DIMSE_C_FindRQ *)new T_DIMSE_C_FindRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_FindRQ(void * jarg1) {
    T_DIMSE_C_FindRQ *arg1 = (T_DIMSE_C_FindRQ *) 0 ;
    
    arg1 = (T_DIMSE_C_FindRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_FindRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_FindRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_FindRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_FindRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_FindRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_FindRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_FindRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_FindRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_FindRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_C_FindRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_FIND_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_FindRSP() {
    void * jresult = 0 ;
    T_DIMSE_C_FindRSP *result;
    
    result = (T_DIMSE_C_FindRSP *)new T_DIMSE_C_FindRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_FindRSP(void * jarg1) {
    T_DIMSE_C_FindRSP *arg1 = (T_DIMSE_C_FindRSP *) 0 ;
    
    arg1 = (T_DIMSE_C_FindRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_GetRQ *arg1 = (T_DIMSE_C_GetRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_GetRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_GetRQ *arg1 = (T_DIMSE_C_GetRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_GetRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRQ_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_GetRQ *arg1 = (T_DIMSE_C_GetRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_GetRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRQ_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_GetRQ *arg1 = (T_DIMSE_C_GetRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_GetRQ *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRQ_Priority(void * jarg1, int jarg2) {
    T_DIMSE_C_GetRQ *arg1 = (T_DIMSE_C_GetRQ *) 0 ;
    T_DIMSE_Priority arg2 ;
    
    arg1 = (T_DIMSE_C_GetRQ *)jarg1; 
    arg2 = (T_DIMSE_Priority)jarg2; 
    if (arg1) (arg1)->Priority = (T_DIMSE_Priority )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRQ_Priority(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_GetRQ *arg1 = (T_DIMSE_C_GetRQ *) 0 ;
    T_DIMSE_Priority result;
    
    arg1 = (T_DIMSE_C_GetRQ *)jarg1; 
    result = (T_DIMSE_Priority) ((arg1)->Priority);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_GetRQ *arg1 = (T_DIMSE_C_GetRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_GetRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_GetRQ *arg1 = (T_DIMSE_C_GetRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_GetRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_GetRQ() {
    void * jresult = 0 ;
    T_DIMSE_C_GetRQ *result;
    
    result = (T_DIMSE_C_GetRQ *)new T_DIMSE_C_GetRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_GetRQ(void * jarg1) {
    T_DIMSE_C_GetRQ *arg1 = (T_DIMSE_C_GetRQ *) 0 ;
    
    arg1 = (T_DIMSE_C_GetRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRSP_NumberOfRemainingSubOperations(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->NumberOfRemainingSubOperations = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRSP_NumberOfRemainingSubOperations(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    result = (DIC_US) ((arg1)->NumberOfRemainingSubOperations);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRSP_NumberOfCompletedSubOperations(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->NumberOfCompletedSubOperations = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRSP_NumberOfCompletedSubOperations(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    result = (DIC_US) ((arg1)->NumberOfCompletedSubOperations);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRSP_NumberOfFailedSubOperations(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->NumberOfFailedSubOperations = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRSP_NumberOfFailedSubOperations(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    result = (DIC_US) ((arg1)->NumberOfFailedSubOperations);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRSP_NumberOfWarningSubOperations(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->NumberOfWarningSubOperations = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRSP_NumberOfWarningSubOperations(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    result = (DIC_US) ((arg1)->NumberOfWarningSubOperations);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_GetRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_C_GetRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_GET_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_GET_NUMBEROFREMAININGSUBOPERATIONS() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0002;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_GET_NUMBEROFCOMPLETEDSUBOPERATIONS() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0004;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_GET_NUMBEROFFAILEDSUBOPERATIONS() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0008;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_GET_NUMBEROFWARNINGSUBOPERATIONS() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0010;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_GetRSP() {
    void * jresult = 0 ;
    T_DIMSE_C_GetRSP *result;
    
    result = (T_DIMSE_C_GetRSP *)new T_DIMSE_C_GetRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_GetRSP(void * jarg1) {
    T_DIMSE_C_GetRSP *arg1 = (T_DIMSE_C_GetRSP *) 0 ;
    
    arg1 = (T_DIMSE_C_GetRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRQ_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRQ_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRQ_Priority(void * jarg1, int jarg2) {
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    T_DIMSE_Priority arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    arg2 = (T_DIMSE_Priority)jarg2; 
    if (arg1) (arg1)->Priority = (T_DIMSE_Priority )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRQ_Priority(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    T_DIMSE_Priority result;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    result = (T_DIMSE_Priority) ((arg1)->Priority);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRQ_MoveDestination(void * jarg1, char * jarg2) {
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->MoveDestination,arg2,16+1);
        else arg1->MoveDestination[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRQ_MoveDestination(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    result = (char *) ((arg1)->MoveDestination);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_MoveRQ() {
    void * jresult = 0 ;
    T_DIMSE_C_MoveRQ *result;
    
    result = (T_DIMSE_C_MoveRQ *)new T_DIMSE_C_MoveRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_MoveRQ(void * jarg1) {
    T_DIMSE_C_MoveRQ *arg1 = (T_DIMSE_C_MoveRQ *) 0 ;
    
    arg1 = (T_DIMSE_C_MoveRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRSP_NumberOfRemainingSubOperations(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->NumberOfRemainingSubOperations = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRSP_NumberOfRemainingSubOperations(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    result = (DIC_US) ((arg1)->NumberOfRemainingSubOperations);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRSP_NumberOfCompletedSubOperations(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->NumberOfCompletedSubOperations = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRSP_NumberOfCompletedSubOperations(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    result = (DIC_US) ((arg1)->NumberOfCompletedSubOperations);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRSP_NumberOfFailedSubOperations(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->NumberOfFailedSubOperations = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRSP_NumberOfFailedSubOperations(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    result = (DIC_US) ((arg1)->NumberOfFailedSubOperations);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRSP_NumberOfWarningSubOperations(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->NumberOfWarningSubOperations = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRSP_NumberOfWarningSubOperations(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    result = (DIC_US) ((arg1)->NumberOfWarningSubOperations);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_MoveRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_C_MoveRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_MOVE_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_MOVE_NUMBEROFREMAININGSUBOPERATIONS() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0002;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_MOVE_NUMBEROFCOMPLETEDSUBOPERATIONS() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0004;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_MOVE_NUMBEROFFAILEDSUBOPERATIONS() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0008;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_MOVE_NUMBEROFWARNINGSUBOPERATIONS() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0010;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_MoveRSP() {
    void * jresult = 0 ;
    T_DIMSE_C_MoveRSP *result;
    
    result = (T_DIMSE_C_MoveRSP *)new T_DIMSE_C_MoveRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_MoveRSP(void * jarg1) {
    T_DIMSE_C_MoveRSP *arg1 = (T_DIMSE_C_MoveRSP *) 0 ;
    
    arg1 = (T_DIMSE_C_MoveRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_CancelRQ_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_C_CancelRQ *arg1 = (T_DIMSE_C_CancelRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_C_CancelRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_C_CancelRQ_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_C_CancelRQ *arg1 = (T_DIMSE_C_CancelRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_C_CancelRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_C_CancelRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_C_CancelRQ *arg1 = (T_DIMSE_C_CancelRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_C_CancelRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_C_CancelRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_C_CancelRQ *arg1 = (T_DIMSE_C_CancelRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_C_CancelRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_C_CancelRQ() {
    void * jresult = 0 ;
    T_DIMSE_C_CancelRQ *result;
    
    result = (T_DIMSE_C_CancelRQ *)new T_DIMSE_C_CancelRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_C_CancelRQ(void * jarg1) {
    T_DIMSE_C_CancelRQ *arg1 = (T_DIMSE_C_CancelRQ *) 0 ;
    
    arg1 = (T_DIMSE_C_CancelRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRQ_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRQ_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRQ_AffectedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPInstanceUID,arg2,64+1);
        else arg1->AffectedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRQ_AffectedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRQ_EventTypeID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->EventTypeID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRQ_EventTypeID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    result = (DIC_US) ((arg1)->EventTypeID);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_EventReportRQ() {
    void * jresult = 0 ;
    T_DIMSE_N_EventReportRQ *result;
    
    result = (T_DIMSE_N_EventReportRQ *)new T_DIMSE_N_EventReportRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_EventReportRQ(void * jarg1) {
    T_DIMSE_N_EventReportRQ *arg1 = (T_DIMSE_N_EventReportRQ *) 0 ;
    
    arg1 = (T_DIMSE_N_EventReportRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRSP_AffectedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPInstanceUID,arg2,64+1);
        else arg1->AffectedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRSP_AffectedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRSP_EventTypeID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->EventTypeID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRSP_EventTypeID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    result = (DIC_US) ((arg1)->EventTypeID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_EventReportRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_N_EventReportRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NEVENTREPORT_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NEVENTREPORT_AFFECTEDSOPINSTANCEUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0002;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NEVENTREPORT_EVENTTYPEID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0004;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_EventReportRSP() {
    void * jresult = 0 ;
    T_DIMSE_N_EventReportRSP *result;
    
    result = (T_DIMSE_N_EventReportRSP *)new T_DIMSE_N_EventReportRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_EventReportRSP(void * jarg1) {
    T_DIMSE_N_EventReportRSP *arg1 = (T_DIMSE_N_EventReportRSP *) 0 ;
    
    arg1 = (T_DIMSE_N_EventReportRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRQ_RequestedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->RequestedSOPClassUID,arg2,64+1);
        else arg1->RequestedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRQ_RequestedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    result = (char *) ((arg1)->RequestedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRQ_RequestedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->RequestedSOPInstanceUID,arg2,64+1);
        else arg1->RequestedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRQ_RequestedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    result = (char *) ((arg1)->RequestedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRQ_ListCount(void * jarg1, int jarg2) {
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    int arg2 ;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->ListCount = arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRQ_ListCount(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    int result;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    result = (int) ((arg1)->ListCount);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_GetRQ() {
    void * jresult = 0 ;
    T_DIMSE_N_GetRQ *result;
    
    result = (T_DIMSE_N_GetRQ *)new T_DIMSE_N_GetRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_GetRQ(void * jarg1) {
    T_DIMSE_N_GetRQ *arg1 = (T_DIMSE_N_GetRQ *) 0 ;
    
    arg1 = (T_DIMSE_N_GetRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRSP_AffectedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPInstanceUID,arg2,64+1);
        else arg1->AffectedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRSP_AffectedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_GetRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_N_GetRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NGET_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NGET_AFFECTEDSOPINSTANCEUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0002;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_GetRSP() {
    void * jresult = 0 ;
    T_DIMSE_N_GetRSP *result;
    
    result = (T_DIMSE_N_GetRSP *)new T_DIMSE_N_GetRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_GetRSP(void * jarg1) {
    T_DIMSE_N_GetRSP *arg1 = (T_DIMSE_N_GetRSP *) 0 ;
    
    arg1 = (T_DIMSE_N_GetRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_SetRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_SetRQ *arg1 = (T_DIMSE_N_SetRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_SetRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_SetRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_SetRQ *arg1 = (T_DIMSE_N_SetRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_SetRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_SetRQ_RequestedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_SetRQ *arg1 = (T_DIMSE_N_SetRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_SetRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->RequestedSOPClassUID,arg2,64+1);
        else arg1->RequestedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_SetRQ_RequestedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_SetRQ *arg1 = (T_DIMSE_N_SetRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_SetRQ *)jarg1; 
    result = (char *) ((arg1)->RequestedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_SetRQ_RequestedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_SetRQ *arg1 = (T_DIMSE_N_SetRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_SetRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->RequestedSOPInstanceUID,arg2,64+1);
        else arg1->RequestedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_SetRQ_RequestedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_SetRQ *arg1 = (T_DIMSE_N_SetRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_SetRQ *)jarg1; 
    result = (char *) ((arg1)->RequestedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_SetRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_SetRQ *arg1 = (T_DIMSE_N_SetRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_SetRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_SetRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_SetRQ *arg1 = (T_DIMSE_N_SetRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_SetRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_SetRQ() {
    void * jresult = 0 ;
    T_DIMSE_N_SetRQ *result;
    
    result = (T_DIMSE_N_SetRQ *)new T_DIMSE_N_SetRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_SetRQ(void * jarg1) {
    T_DIMSE_N_SetRQ *arg1 = (T_DIMSE_N_SetRQ *) 0 ;
    
    arg1 = (T_DIMSE_N_SetRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_SetRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_SetRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_SetRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_SetRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_SetRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_SetRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_SetRSP_AffectedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPInstanceUID,arg2,64+1);
        else arg1->AffectedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_SetRSP_AffectedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_SetRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_SetRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_SetRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_N_SetRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NSET_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NSET_AFFECTEDSOPINSTANCEUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0002;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_SetRSP() {
    void * jresult = 0 ;
    T_DIMSE_N_SetRSP *result;
    
    result = (T_DIMSE_N_SetRSP *)new T_DIMSE_N_SetRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_SetRSP(void * jarg1) {
    T_DIMSE_N_SetRSP *arg1 = (T_DIMSE_N_SetRSP *) 0 ;
    
    arg1 = (T_DIMSE_N_SetRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRQ_RequestedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->RequestedSOPClassUID,arg2,64+1);
        else arg1->RequestedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRQ_RequestedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    result = (char *) ((arg1)->RequestedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRQ_RequestedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->RequestedSOPInstanceUID,arg2,64+1);
        else arg1->RequestedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRQ_RequestedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    result = (char *) ((arg1)->RequestedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRQ_ActionTypeID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->ActionTypeID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRQ_ActionTypeID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    result = (DIC_US) ((arg1)->ActionTypeID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_ActionRQ() {
    void * jresult = 0 ;
    T_DIMSE_N_ActionRQ *result;
    
    result = (T_DIMSE_N_ActionRQ *)new T_DIMSE_N_ActionRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_ActionRQ(void * jarg1) {
    T_DIMSE_N_ActionRQ *arg1 = (T_DIMSE_N_ActionRQ *) 0 ;
    
    arg1 = (T_DIMSE_N_ActionRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRSP_AffectedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPInstanceUID,arg2,64+1);
        else arg1->AffectedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRSP_AffectedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRSP_ActionTypeID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->ActionTypeID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRSP_ActionTypeID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    result = (DIC_US) ((arg1)->ActionTypeID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_ActionRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_N_ActionRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NACTION_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NACTION_AFFECTEDSOPINSTANCEUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0002;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NACTION_ACTIONTYPEID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0004;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_ActionRSP() {
    void * jresult = 0 ;
    T_DIMSE_N_ActionRSP *result;
    
    result = (T_DIMSE_N_ActionRSP *)new T_DIMSE_N_ActionRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_ActionRSP(void * jarg1) {
    T_DIMSE_N_ActionRSP *arg1 = (T_DIMSE_N_ActionRSP *) 0 ;
    
    arg1 = (T_DIMSE_N_ActionRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRQ_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRQ_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRQ_AffectedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPInstanceUID,arg2,64+1);
        else arg1->AffectedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRQ_AffectedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRQ_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRQ_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NCREATE_AFFECTEDSOPINSTANCEUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0002;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_CreateRQ() {
    void * jresult = 0 ;
    T_DIMSE_N_CreateRQ *result;
    
    result = (T_DIMSE_N_CreateRQ *)new T_DIMSE_N_CreateRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_CreateRQ(void * jarg1) {
    T_DIMSE_N_CreateRQ *arg1 = (T_DIMSE_N_CreateRQ *) 0 ;
    
    arg1 = (T_DIMSE_N_CreateRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRSP_AffectedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPInstanceUID,arg2,64+1);
        else arg1->AffectedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRSP_AffectedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_CreateRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_N_CreateRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NCREATE_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_CreateRSP() {
    void * jresult = 0 ;
    T_DIMSE_N_CreateRSP *result;
    
    result = (T_DIMSE_N_CreateRSP *)new T_DIMSE_N_CreateRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_CreateRSP(void * jarg1) {
    T_DIMSE_N_CreateRSP *arg1 = (T_DIMSE_N_CreateRSP *) 0 ;
    
    arg1 = (T_DIMSE_N_CreateRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_DeleteRQ_MessageID(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_DeleteRQ *arg1 = (T_DIMSE_N_DeleteRQ *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_DeleteRQ *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageID = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_DeleteRQ_MessageID(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_DeleteRQ *arg1 = (T_DIMSE_N_DeleteRQ *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_DeleteRQ *)jarg1; 
    result = (DIC_US) ((arg1)->MessageID);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_DeleteRQ_RequestedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_DeleteRQ *arg1 = (T_DIMSE_N_DeleteRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_DeleteRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->RequestedSOPClassUID,arg2,64+1);
        else arg1->RequestedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_DeleteRQ_RequestedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_DeleteRQ *arg1 = (T_DIMSE_N_DeleteRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_DeleteRQ *)jarg1; 
    result = (char *) ((arg1)->RequestedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_DeleteRQ_RequestedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_DeleteRQ *arg1 = (T_DIMSE_N_DeleteRQ *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_DeleteRQ *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->RequestedSOPInstanceUID,arg2,64+1);
        else arg1->RequestedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_DeleteRQ_RequestedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_DeleteRQ *arg1 = (T_DIMSE_N_DeleteRQ *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_DeleteRQ *)jarg1; 
    result = (char *) ((arg1)->RequestedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_DeleteRQ_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_DeleteRQ *arg1 = (T_DIMSE_N_DeleteRQ *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_DeleteRQ *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_DeleteRQ_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_DeleteRQ *arg1 = (T_DIMSE_N_DeleteRQ *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_DeleteRQ *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_DeleteRQ() {
    void * jresult = 0 ;
    T_DIMSE_N_DeleteRQ *result;
    
    result = (T_DIMSE_N_DeleteRQ *)new T_DIMSE_N_DeleteRQ();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_DeleteRQ(void * jarg1) {
    T_DIMSE_N_DeleteRQ *arg1 = (T_DIMSE_N_DeleteRQ *) 0 ;
    
    arg1 = (T_DIMSE_N_DeleteRQ *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_DeleteRSP_MessageIDBeingRespondedTo(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->MessageIDBeingRespondedTo = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_DeleteRSP_MessageIDBeingRespondedTo(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    result = (DIC_US) ((arg1)->MessageIDBeingRespondedTo);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_DeleteRSP_AffectedSOPClassUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPClassUID,arg2,64+1);
        else arg1->AffectedSOPClassUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_DeleteRSP_AffectedSOPClassUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPClassUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_DeleteRSP_DimseStatus(void * jarg1, unsigned short jarg2) {
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    DIC_US arg2 ;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    if (arg1) (arg1)->DimseStatus = arg2;
    
}


DllExport unsigned short SWIGSTDCALL CSharp_get_T_DIMSE_N_DeleteRSP_DimseStatus(void * jarg1) {
    unsigned short jresult = 0 ;
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    DIC_US result;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    result = (DIC_US) ((arg1)->DimseStatus);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_DeleteRSP_AffectedSOPInstanceUID(void * jarg1, char * jarg2) {
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    char *arg2 ;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->AffectedSOPInstanceUID,arg2,64+1);
        else arg1->AffectedSOPInstanceUID[0] = 0;
    }
}


DllExport char * SWIGSTDCALL CSharp_get_T_DIMSE_N_DeleteRSP_AffectedSOPInstanceUID(void * jarg1) {
    char * jresult = 0 ;
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    char *result;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    result = (char *) ((arg1)->AffectedSOPInstanceUID);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_DeleteRSP_DataSetType(void * jarg1, int jarg2) {
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    T_DIMSE_DataSetType arg2 ;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    arg2 = (T_DIMSE_DataSetType)jarg2; 
    if (arg1) (arg1)->DataSetType = (T_DIMSE_DataSetType )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_N_DeleteRSP_DataSetType(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    T_DIMSE_DataSetType result;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    result = (T_DIMSE_DataSetType) ((arg1)->DataSetType);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_N_DeleteRSP_opts(void * jarg1, unsigned int jarg2) {
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->opts = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_N_DeleteRSP_opts(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    unsigned int result;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    result = (unsigned int) ((arg1)->opts);
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NDELETE_AFFECTEDSOPCLASSUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0001;
    
    jresult = result; 
    return jresult;
}


DllExport int SWIGSTDCALL CSharp_get_O_NDELETE_AFFECTEDSOPINSTANCEUID() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0x0002;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_N_DeleteRSP() {
    void * jresult = 0 ;
    T_DIMSE_N_DeleteRSP *result;
    
    result = (T_DIMSE_N_DeleteRSP *)new T_DIMSE_N_DeleteRSP();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_N_DeleteRSP(void * jarg1) {
    T_DIMSE_N_DeleteRSP *arg1 = (T_DIMSE_N_DeleteRSP *) 0 ;
    
    arg1 = (T_DIMSE_N_DeleteRSP *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_CommandField(void * jarg1, int jarg2) {
    T_DIMSE_Message *arg1 = (T_DIMSE_Message *) 0 ;
    T_DIMSE_Command arg2 ;
    
    arg1 = (T_DIMSE_Message *)jarg1; 
    arg2 = (T_DIMSE_Command)jarg2; 
    if (arg1) (arg1)->CommandField = (T_DIMSE_Command )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_Message_CommandField(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_Message *arg1 = (T_DIMSE_Message *) 0 ;
    T_DIMSE_Command result;
    
    arg1 = (T_DIMSE_Message *)jarg1; 
    result = (T_DIMSE_Command) ((arg1)->CommandField);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message *arg1 = (T_DIMSE_Message *) 0 ;
    T_DIMSE_Message_msg *result;
    
    arg1 = (T_DIMSE_Message *)jarg1; 
    result = (T_DIMSE_Message_msg *)& ((arg1)->msg);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_Message() {
    void * jresult = 0 ;
    T_DIMSE_Message *result;
    
    result = (T_DIMSE_Message *)new T_DIMSE_Message();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_Message(void * jarg1) {
    T_DIMSE_Message *arg1 = (T_DIMSE_Message *) 0 ;
    
    arg1 = (T_DIMSE_Message *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CStoreRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_StoreRQ *arg2 = (T_DIMSE_C_StoreRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_StoreRQ *)jarg2; 
    if (arg1) (arg1)->CStoreRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CStoreRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_StoreRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_StoreRQ *)& ((arg1)->CStoreRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CEchoRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_EchoRQ *arg2 = (T_DIMSE_C_EchoRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_EchoRQ *)jarg2; 
    if (arg1) (arg1)->CEchoRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CEchoRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_EchoRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_EchoRQ *)& ((arg1)->CEchoRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CFindRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_FindRQ *arg2 = (T_DIMSE_C_FindRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_FindRQ *)jarg2; 
    if (arg1) (arg1)->CFindRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CFindRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_FindRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_FindRQ *)& ((arg1)->CFindRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CGetRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_GetRQ *arg2 = (T_DIMSE_C_GetRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_GetRQ *)jarg2; 
    if (arg1) (arg1)->CGetRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CGetRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_GetRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_GetRQ *)& ((arg1)->CGetRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CMoveRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_MoveRQ *arg2 = (T_DIMSE_C_MoveRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_MoveRQ *)jarg2; 
    if (arg1) (arg1)->CMoveRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CMoveRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_MoveRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_MoveRQ *)& ((arg1)->CMoveRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CCancelRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_CancelRQ *arg2 = (T_DIMSE_C_CancelRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_CancelRQ *)jarg2; 
    if (arg1) (arg1)->CCancelRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CCancelRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_CancelRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_CancelRQ *)& ((arg1)->CCancelRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NEventReportRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_EventReportRQ *arg2 = (T_DIMSE_N_EventReportRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_EventReportRQ *)jarg2; 
    if (arg1) (arg1)->NEventReportRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NEventReportRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_EventReportRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_EventReportRQ *)& ((arg1)->NEventReportRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NGetRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_GetRQ *arg2 = (T_DIMSE_N_GetRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_GetRQ *)jarg2; 
    if (arg1) (arg1)->NGetRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NGetRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_GetRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_GetRQ *)& ((arg1)->NGetRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NSetRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_SetRQ *arg2 = (T_DIMSE_N_SetRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_SetRQ *)jarg2; 
    if (arg1) (arg1)->NSetRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NSetRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_SetRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_SetRQ *)& ((arg1)->NSetRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NActionRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_ActionRQ *arg2 = (T_DIMSE_N_ActionRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_ActionRQ *)jarg2; 
    if (arg1) (arg1)->NActionRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NActionRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_ActionRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_ActionRQ *)& ((arg1)->NActionRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NCreateRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_CreateRQ *arg2 = (T_DIMSE_N_CreateRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_CreateRQ *)jarg2; 
    if (arg1) (arg1)->NCreateRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NCreateRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_CreateRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_CreateRQ *)& ((arg1)->NCreateRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NDeleteRQ(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_DeleteRQ *arg2 = (T_DIMSE_N_DeleteRQ *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_DeleteRQ *)jarg2; 
    if (arg1) (arg1)->NDeleteRQ = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NDeleteRQ(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_DeleteRQ *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_DeleteRQ *)& ((arg1)->NDeleteRQ);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CStoreRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_StoreRSP *arg2 = (T_DIMSE_C_StoreRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_StoreRSP *)jarg2; 
    if (arg1) (arg1)->CStoreRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CStoreRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_StoreRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_StoreRSP *)& ((arg1)->CStoreRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CEchoRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_EchoRSP *arg2 = (T_DIMSE_C_EchoRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_EchoRSP *)jarg2; 
    if (arg1) (arg1)->CEchoRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CEchoRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_EchoRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_EchoRSP *)& ((arg1)->CEchoRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CFindRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_FindRSP *arg2 = (T_DIMSE_C_FindRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_FindRSP *)jarg2; 
    if (arg1) (arg1)->CFindRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CFindRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_FindRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_FindRSP *)& ((arg1)->CFindRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CGetRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_GetRSP *arg2 = (T_DIMSE_C_GetRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_GetRSP *)jarg2; 
    if (arg1) (arg1)->CGetRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CGetRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_GetRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_GetRSP *)& ((arg1)->CGetRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_CMoveRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_MoveRSP *arg2 = (T_DIMSE_C_MoveRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_C_MoveRSP *)jarg2; 
    if (arg1) (arg1)->CMoveRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_CMoveRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_C_MoveRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_C_MoveRSP *)& ((arg1)->CMoveRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NEventReportRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_EventReportRSP *arg2 = (T_DIMSE_N_EventReportRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_EventReportRSP *)jarg2; 
    if (arg1) (arg1)->NEventReportRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NEventReportRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_EventReportRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_EventReportRSP *)& ((arg1)->NEventReportRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NGetRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_GetRSP *arg2 = (T_DIMSE_N_GetRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_GetRSP *)jarg2; 
    if (arg1) (arg1)->NGetRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NGetRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_GetRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_GetRSP *)& ((arg1)->NGetRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NSetRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_SetRSP *arg2 = (T_DIMSE_N_SetRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_SetRSP *)jarg2; 
    if (arg1) (arg1)->NSetRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NSetRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_SetRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_SetRSP *)& ((arg1)->NSetRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NActionRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_ActionRSP *arg2 = (T_DIMSE_N_ActionRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_ActionRSP *)jarg2; 
    if (arg1) (arg1)->NActionRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NActionRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_ActionRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_ActionRSP *)& ((arg1)->NActionRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NCreateRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_CreateRSP *arg2 = (T_DIMSE_N_CreateRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_CreateRSP *)jarg2; 
    if (arg1) (arg1)->NCreateRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NCreateRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_CreateRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_CreateRSP *)& ((arg1)->NCreateRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_Message_msg_NDeleteRSP(void * jarg1, void * jarg2) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_DeleteRSP *arg2 = (T_DIMSE_N_DeleteRSP *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    arg2 = (T_DIMSE_N_DeleteRSP *)jarg2; 
    if (arg1) (arg1)->NDeleteRSP = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_Message_msg_NDeleteRSP(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    T_DIMSE_N_DeleteRSP *result;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    result = (T_DIMSE_N_DeleteRSP *)& ((arg1)->NDeleteRSP);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_Message_msg() {
    void * jresult = 0 ;
    T_DIMSE_Message_msg *result;
    
    result = (T_DIMSE_Message_msg *)new T_DIMSE_Message_msg();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_Message_msg(void * jarg1) {
    T_DIMSE_Message_msg *arg1 = (T_DIMSE_Message_msg *) 0 ;
    
    arg1 = (T_DIMSE_Message_msg *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_g_dimse_send_groupLength_encoding(int jarg1) {
    E_GrpLenEncoding arg1 ;
    
    arg1 = (E_GrpLenEncoding)jarg1; 
    g_dimse_send_groupLength_encoding = (E_GrpLenEncoding )arg1;
    
}


DllExport int SWIGSTDCALL CSharp_get_g_dimse_send_groupLength_encoding() {
    int jresult = 0 ;
    E_GrpLenEncoding result;
    
    result = (E_GrpLenEncoding)g_dimse_send_groupLength_encoding;
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_g_dimse_send_sequenceType_encoding(int jarg1) {
    E_EncodingType arg1 ;
    
    arg1 = (E_EncodingType)jarg1; 
    g_dimse_send_sequenceType_encoding = (E_EncodingType )arg1;
    
}


DllExport int SWIGSTDCALL CSharp_get_g_dimse_send_sequenceType_encoding() {
    int jresult = 0 ;
    E_EncodingType result;
    
    result = (E_EncodingType)g_dimse_send_sequenceType_encoding;
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_g_dimse_save_dimse_data(unsigned int jarg1) {
    bool arg1 ;
    
    arg1 = jarg1 ? true : false; 
    g_dimse_save_dimse_data = arg1;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_g_dimse_save_dimse_data() {
    unsigned int jresult = 0 ;
    bool result;
    
    result = (bool)g_dimse_save_dimse_data;
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_echoUser(void * jarg1, unsigned short jarg2, int jarg3, int jarg4, const unsigned short* jarg5, void * jarg6) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    DIC_US arg2 ;
    T_DIMSE_BlockingMode arg3 ;
    int arg4 ;
    DIC_US *arg5 = (DIC_US *) 0 ;
    DcmDataset **arg6 = (DcmDataset **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (DIC_US)jarg2; 
    arg3 = (T_DIMSE_BlockingMode)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = (DIC_US *)jarg5; 
    arg6 = (DcmDataset **)jarg6; 
    result = DIMSE_echoUser(arg1,arg2,(T_DIMSE_BlockingMode )arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_sendEchoResponse(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4, void * jarg5) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_EchoRQ *arg3 = (T_DIMSE_C_EchoRQ *) 0 ;
    DIC_US arg4 ;
    DcmDataset *arg5 = (DcmDataset *) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_EchoRQ *)jarg3; 
    arg4 = (DIC_US)jarg4; 
    arg5 = (DcmDataset *)jarg5; 
    result = DIMSE_sendEchoResponse(arg1,arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_StoreProgress_state(void * jarg1, int jarg2) {
    T_DIMSE_StoreProgress *arg1 = (T_DIMSE_StoreProgress *) 0 ;
    T_DIMSE_StoreProgressState arg2 ;
    
    arg1 = (T_DIMSE_StoreProgress *)jarg1; 
    arg2 = (T_DIMSE_StoreProgressState)jarg2; 
    if (arg1) (arg1)->state = (T_DIMSE_StoreProgressState )arg2;
    
}


DllExport int SWIGSTDCALL CSharp_get_T_DIMSE_StoreProgress_state(void * jarg1) {
    int jresult = 0 ;
    T_DIMSE_StoreProgress *arg1 = (T_DIMSE_StoreProgress *) 0 ;
    T_DIMSE_StoreProgressState result;
    
    arg1 = (T_DIMSE_StoreProgress *)jarg1; 
    result = (T_DIMSE_StoreProgressState) ((arg1)->state);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_StoreProgress_callbackCount(void * jarg1, long jarg2) {
    T_DIMSE_StoreProgress *arg1 = (T_DIMSE_StoreProgress *) 0 ;
    long arg2 ;
    
    arg1 = (T_DIMSE_StoreProgress *)jarg1; 
    arg2 = (long)jarg2; 
    if (arg1) (arg1)->callbackCount = arg2;
    
}


DllExport long SWIGSTDCALL CSharp_get_T_DIMSE_StoreProgress_callbackCount(void * jarg1) {
    long jresult = 0 ;
    T_DIMSE_StoreProgress *arg1 = (T_DIMSE_StoreProgress *) 0 ;
    long result;
    
    arg1 = (T_DIMSE_StoreProgress *)jarg1; 
    result = (long) ((arg1)->callbackCount);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_StoreProgress_progressBytes(void * jarg1, long jarg2) {
    T_DIMSE_StoreProgress *arg1 = (T_DIMSE_StoreProgress *) 0 ;
    long arg2 ;
    
    arg1 = (T_DIMSE_StoreProgress *)jarg1; 
    arg2 = (long)jarg2; 
    if (arg1) (arg1)->progressBytes = arg2;
    
}


DllExport long SWIGSTDCALL CSharp_get_T_DIMSE_StoreProgress_progressBytes(void * jarg1) {
    long jresult = 0 ;
    T_DIMSE_StoreProgress *arg1 = (T_DIMSE_StoreProgress *) 0 ;
    long result;
    
    arg1 = (T_DIMSE_StoreProgress *)jarg1; 
    result = (long) ((arg1)->progressBytes);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_StoreProgress_totalBytes(void * jarg1, long jarg2) {
    T_DIMSE_StoreProgress *arg1 = (T_DIMSE_StoreProgress *) 0 ;
    long arg2 ;
    
    arg1 = (T_DIMSE_StoreProgress *)jarg1; 
    arg2 = (long)jarg2; 
    if (arg1) (arg1)->totalBytes = arg2;
    
}


DllExport long SWIGSTDCALL CSharp_get_T_DIMSE_StoreProgress_totalBytes(void * jarg1) {
    long jresult = 0 ;
    T_DIMSE_StoreProgress *arg1 = (T_DIMSE_StoreProgress *) 0 ;
    long result;
    
    arg1 = (T_DIMSE_StoreProgress *)jarg1; 
    result = (long) ((arg1)->totalBytes);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_StoreProgress() {
    void * jresult = 0 ;
    T_DIMSE_StoreProgress *result;
    
    result = (T_DIMSE_StoreProgress *)new T_DIMSE_StoreProgress();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_StoreProgress(void * jarg1) {
    T_DIMSE_StoreProgress *arg1 = (T_DIMSE_StoreProgress *) 0 ;
    
    arg1 = (T_DIMSE_StoreProgress *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_DetectedCancelParameters_cancelEncountered(void * jarg1, unsigned int jarg2) {
    T_DIMSE_DetectedCancelParameters *arg1 = (T_DIMSE_DetectedCancelParameters *) 0 ;
    bool arg2 ;
    
    arg1 = (T_DIMSE_DetectedCancelParameters *)jarg1; 
    arg2 = jarg2 ? true : false; 
    if (arg1) (arg1)->cancelEncountered = arg2;
    
}


DllExport unsigned int SWIGSTDCALL CSharp_get_T_DIMSE_DetectedCancelParameters_cancelEncountered(void * jarg1) {
    unsigned int jresult = 0 ;
    T_DIMSE_DetectedCancelParameters *arg1 = (T_DIMSE_DetectedCancelParameters *) 0 ;
    bool result;
    
    arg1 = (T_DIMSE_DetectedCancelParameters *)jarg1; 
    result = (bool) ((arg1)->cancelEncountered);
    
    jresult = result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_DetectedCancelParameters_presId(void * jarg1, void * jarg2) {
    T_DIMSE_DetectedCancelParameters *arg1 = (T_DIMSE_DetectedCancelParameters *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_DIMSE_DetectedCancelParameters *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->presId = arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_DetectedCancelParameters_presId(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_DetectedCancelParameters *arg1 = (T_DIMSE_DetectedCancelParameters *) 0 ;
    T_ASC_PresentationContextID result;
    
    arg1 = (T_DIMSE_DetectedCancelParameters *)jarg1; 
    result =  ((arg1)->presId);
    
    jresult = new T_ASC_PresentationContextID((T_ASC_PresentationContextID &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_set_T_DIMSE_DetectedCancelParameters_req(void * jarg1, void * jarg2) {
    T_DIMSE_DetectedCancelParameters *arg1 = (T_DIMSE_DetectedCancelParameters *) 0 ;
    T_DIMSE_C_CancelRQ *arg2 = (T_DIMSE_C_CancelRQ *) 0 ;
    
    arg1 = (T_DIMSE_DetectedCancelParameters *)jarg1; 
    arg2 = (T_DIMSE_C_CancelRQ *)jarg2; 
    if (arg1) (arg1)->req = *arg2;
    
}


DllExport void * SWIGSTDCALL CSharp_get_T_DIMSE_DetectedCancelParameters_req(void * jarg1) {
    void * jresult = 0 ;
    T_DIMSE_DetectedCancelParameters *arg1 = (T_DIMSE_DetectedCancelParameters *) 0 ;
    T_DIMSE_C_CancelRQ *result;
    
    arg1 = (T_DIMSE_DetectedCancelParameters *)jarg1; 
    result = (T_DIMSE_C_CancelRQ *)& ((arg1)->req);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_T_DIMSE_DetectedCancelParameters() {
    void * jresult = 0 ;
    T_DIMSE_DetectedCancelParameters *result;
    
    result = (T_DIMSE_DetectedCancelParameters *)new T_DIMSE_DetectedCancelParameters();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_T_DIMSE_DetectedCancelParameters(void * jarg1) {
    T_DIMSE_DetectedCancelParameters *arg1 = (T_DIMSE_DetectedCancelParameters *) 0 ;
    
    arg1 = (T_DIMSE_DetectedCancelParameters *)jarg1; 
    delete arg1;
    
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_storeUser__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, int jarg8, int jarg9, void * jarg10, void * jarg11, void * jarg12, long jarg13) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_StoreRQ *arg3 = (T_DIMSE_C_StoreRQ *) 0 ;
    char *arg4 = (char *) 0 ;
    DcmDataset *arg5 = (DcmDataset *) 0 ;
    DIMSE_StoreUserCallback arg6 = (DIMSE_StoreUserCallback) 0 ;
    void *arg7 = (void *) 0 ;
    T_DIMSE_BlockingMode arg8 ;
    int arg9 ;
    T_DIMSE_C_StoreRSP *arg10 = (T_DIMSE_C_StoreRSP *) 0 ;
    DcmDataset **arg11 = (DcmDataset **) 0 ;
    T_DIMSE_DetectedCancelParameters *arg12 = (T_DIMSE_DetectedCancelParameters *) 0 ;
    long arg13 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_StoreRQ *)jarg3; 
    arg4 = jarg4; 
    arg5 = (DcmDataset *)jarg5; 
    arg6 = (DIMSE_StoreUserCallback)jarg6; 
    arg7 = (void *)jarg7; 
    arg8 = (T_DIMSE_BlockingMode)jarg8; 
    arg9 = (int)jarg9; 
    arg10 = (T_DIMSE_C_StoreRSP *)jarg10; 
    arg11 = (DcmDataset **)jarg11; 
    arg12 = (T_DIMSE_DetectedCancelParameters *)jarg12; 
    arg13 = (long)jarg13; 
    result = DIMSE_storeUser(arg1,arg2,arg3,(char const *)arg4,arg5,arg6,arg7,(T_DIMSE_BlockingMode )arg8,arg9,arg10,arg11,arg12,arg13);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_storeUser__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, int jarg8, int jarg9, void * jarg10, void * jarg11, void * jarg12) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_StoreRQ *arg3 = (T_DIMSE_C_StoreRQ *) 0 ;
    char *arg4 = (char *) 0 ;
    DcmDataset *arg5 = (DcmDataset *) 0 ;
    DIMSE_StoreUserCallback arg6 = (DIMSE_StoreUserCallback) 0 ;
    void *arg7 = (void *) 0 ;
    T_DIMSE_BlockingMode arg8 ;
    int arg9 ;
    T_DIMSE_C_StoreRSP *arg10 = (T_DIMSE_C_StoreRSP *) 0 ;
    DcmDataset **arg11 = (DcmDataset **) 0 ;
    T_DIMSE_DetectedCancelParameters *arg12 = (T_DIMSE_DetectedCancelParameters *) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_StoreRQ *)jarg3; 
    arg4 = jarg4; 
    arg5 = (DcmDataset *)jarg5; 
    arg6 = (DIMSE_StoreUserCallback)jarg6; 
    arg7 = (void *)jarg7; 
    arg8 = (T_DIMSE_BlockingMode)jarg8; 
    arg9 = (int)jarg9; 
    arg10 = (T_DIMSE_C_StoreRSP *)jarg10; 
    arg11 = (DcmDataset **)jarg11; 
    arg12 = (T_DIMSE_DetectedCancelParameters *)jarg12; 
    result = DIMSE_storeUser(arg1,arg2,arg3,(char const *)arg4,arg5,arg6,arg7,(T_DIMSE_BlockingMode )arg8,arg9,arg10,arg11,arg12);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_storeUser__SWIG_2(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, int jarg8, int jarg9, void * jarg10, void * jarg11) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_StoreRQ *arg3 = (T_DIMSE_C_StoreRQ *) 0 ;
    char *arg4 = (char *) 0 ;
    DcmDataset *arg5 = (DcmDataset *) 0 ;
    DIMSE_StoreUserCallback arg6 = (DIMSE_StoreUserCallback) 0 ;
    void *arg7 = (void *) 0 ;
    T_DIMSE_BlockingMode arg8 ;
    int arg9 ;
    T_DIMSE_C_StoreRSP *arg10 = (T_DIMSE_C_StoreRSP *) 0 ;
    DcmDataset **arg11 = (DcmDataset **) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_StoreRQ *)jarg3; 
    arg4 = jarg4; 
    arg5 = (DcmDataset *)jarg5; 
    arg6 = (DIMSE_StoreUserCallback)jarg6; 
    arg7 = (void *)jarg7; 
    arg8 = (T_DIMSE_BlockingMode)jarg8; 
    arg9 = (int)jarg9; 
    arg10 = (T_DIMSE_C_StoreRSP *)jarg10; 
    arg11 = (DcmDataset **)jarg11; 
    result = DIMSE_storeUser(arg1,arg2,arg3,(char const *)arg4,arg5,arg6,arg7,(T_DIMSE_BlockingMode )arg8,arg9,arg10,arg11);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_storeProvider(void * jarg1, void * jarg2, void * jarg3, char * jarg4, int jarg5, void * jarg6, void * jarg7, void * jarg8, int jarg9, int jarg10) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_StoreRQ *arg3 = (T_DIMSE_C_StoreRQ *) 0 ;
    char *arg4 = (char *) 0 ;
    int arg5 ;
    DcmDataset **arg6 = (DcmDataset **) 0 ;
    DIMSE_StoreProviderCallback arg7 = (DIMSE_StoreProviderCallback) 0 ;
    void *arg8 = (void *) 0 ;
    T_DIMSE_BlockingMode arg9 ;
    int arg10 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_StoreRQ *)jarg3; 
    arg4 = jarg4; 
    arg5 = (int)jarg5; 
    arg6 = (DcmDataset **)jarg6; 
    arg7 = (DIMSE_StoreProviderCallback)jarg7; 
    arg8 = (void *)jarg8; 
    arg9 = (T_DIMSE_BlockingMode)jarg9; 
    arg10 = (int)jarg10; 
    result = DIMSE_storeProvider(arg1,arg2,arg3,(char const *)arg4,arg5,arg6,arg7,arg8,(T_DIMSE_BlockingMode )arg9,arg10);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_sendStoreResponse(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_StoreRQ *arg3 = (T_DIMSE_C_StoreRQ *) 0 ;
    T_DIMSE_C_StoreRSP *arg4 = (T_DIMSE_C_StoreRSP *) 0 ;
    DcmDataset *arg5 = (DcmDataset *) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_StoreRQ *)jarg3; 
    arg4 = (T_DIMSE_C_StoreRSP *)jarg4; 
    arg5 = (DcmDataset *)jarg5; 
    result = DIMSE_sendStoreResponse(arg1,arg2,arg3,arg4,arg5);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_findUser(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7, int jarg8, void * jarg9, void * jarg10) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_FindRQ *arg3 = (T_DIMSE_C_FindRQ *) 0 ;
    DcmDataset *arg4 = (DcmDataset *) 0 ;
    DIMSE_FindUserCallback arg5 = (DIMSE_FindUserCallback) 0 ;
    void *arg6 = (void *) 0 ;
    T_DIMSE_BlockingMode arg7 ;
    int arg8 ;
    T_DIMSE_C_FindRSP *arg9 = (T_DIMSE_C_FindRSP *) 0 ;
    DcmDataset **arg10 = (DcmDataset **) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_FindRQ *)jarg3; 
    arg4 = (DcmDataset *)jarg4; 
    arg5 = (DIMSE_FindUserCallback)jarg5; 
    arg6 = (void *)jarg6; 
    arg7 = (T_DIMSE_BlockingMode)jarg7; 
    arg8 = (int)jarg8; 
    arg9 = (T_DIMSE_C_FindRSP *)jarg9; 
    arg10 = (DcmDataset **)jarg10; 
    result = DIMSE_findUser(arg1,arg2,arg3,arg4,arg5,arg6,(T_DIMSE_BlockingMode )arg7,arg8,arg9,arg10);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_findProvider(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_FindRQ *arg3 = (T_DIMSE_C_FindRQ *) 0 ;
    DIMSE_FindProviderCallback arg4 = (DIMSE_FindProviderCallback) 0 ;
    void *arg5 = (void *) 0 ;
    T_DIMSE_BlockingMode arg6 ;
    int arg7 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_FindRQ *)jarg3; 
    arg4 = (DIMSE_FindProviderCallback)jarg4; 
    arg5 = (void *)jarg5; 
    arg6 = (T_DIMSE_BlockingMode)jarg6; 
    arg7 = (int)jarg7; 
    result = DIMSE_findProvider(arg1,arg2,arg3,arg4,arg5,(T_DIMSE_BlockingMode )arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_sendFindResponse(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_FindRQ *arg3 = (T_DIMSE_C_FindRQ *) 0 ;
    T_DIMSE_C_FindRSP *arg4 = (T_DIMSE_C_FindRSP *) 0 ;
    DcmDataset *arg5 = (DcmDataset *) 0 ;
    DcmDataset *arg6 = (DcmDataset *) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_FindRQ *)jarg3; 
    arg4 = (T_DIMSE_C_FindRSP *)jarg4; 
    arg5 = (DcmDataset *)jarg5; 
    arg6 = (DcmDataset *)jarg6; 
    result = DIMSE_sendFindResponse(arg1,arg2,arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_moveUser(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7, int jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, void * jarg14) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_MoveRQ *arg3 = (T_DIMSE_C_MoveRQ *) 0 ;
    DcmDataset *arg4 = (DcmDataset *) 0 ;
    DIMSE_MoveUserCallback arg5 = (DIMSE_MoveUserCallback) 0 ;
    void *arg6 = (void *) 0 ;
    T_DIMSE_BlockingMode arg7 ;
    int arg8 ;
    T_ASC_Network *arg9 = (T_ASC_Network *) 0 ;
    DIMSE_SubOpProviderCallback arg10 = (DIMSE_SubOpProviderCallback) 0 ;
    void *arg11 = (void *) 0 ;
    T_DIMSE_C_MoveRSP *arg12 = (T_DIMSE_C_MoveRSP *) 0 ;
    DcmDataset **arg13 = (DcmDataset **) 0 ;
    DcmDataset **arg14 = (DcmDataset **) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_MoveRQ *)jarg3; 
    arg4 = (DcmDataset *)jarg4; 
    arg5 = (DIMSE_MoveUserCallback)jarg5; 
    arg6 = (void *)jarg6; 
    arg7 = (T_DIMSE_BlockingMode)jarg7; 
    arg8 = (int)jarg8; 
    arg9 = (T_ASC_Network *)jarg9; 
    arg10 = (DIMSE_SubOpProviderCallback)jarg10; 
    arg11 = (void *)jarg11; 
    arg12 = (T_DIMSE_C_MoveRSP *)jarg12; 
    arg13 = (DcmDataset **)jarg13; 
    arg14 = (DcmDataset **)jarg14; 
    result = DIMSE_moveUser(arg1,arg2,arg3,arg4,arg5,arg6,(T_DIMSE_BlockingMode )arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_moveProvider(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_MoveRQ *arg3 = (T_DIMSE_C_MoveRQ *) 0 ;
    DIMSE_MoveProviderCallback arg4 = (DIMSE_MoveProviderCallback) 0 ;
    void *arg5 = (void *) 0 ;
    T_DIMSE_BlockingMode arg6 ;
    int arg7 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_MoveRQ *)jarg3; 
    arg4 = (DIMSE_MoveProviderCallback)jarg4; 
    arg5 = (void *)jarg5; 
    arg6 = (T_DIMSE_BlockingMode)jarg6; 
    arg7 = (int)jarg7; 
    result = DIMSE_moveProvider(arg1,arg2,arg3,arg4,arg5,(T_DIMSE_BlockingMode )arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_sendMoveResponse(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_MoveRQ *arg3 = (T_DIMSE_C_MoveRQ *) 0 ;
    T_DIMSE_C_MoveRSP *arg4 = (T_DIMSE_C_MoveRSP *) 0 ;
    DcmDataset *arg5 = (DcmDataset *) 0 ;
    DcmDataset *arg6 = (DcmDataset *) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_MoveRQ *)jarg3; 
    arg4 = (T_DIMSE_C_MoveRSP *)jarg4; 
    arg5 = (DcmDataset *)jarg5; 
    arg6 = (DcmDataset *)jarg6; 
    result = DIMSE_sendMoveResponse(arg1,arg2,arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_getUser(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7, int jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, void * jarg14) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_GetRQ *arg3 = (T_DIMSE_C_GetRQ *) 0 ;
    DcmDataset *arg4 = (DcmDataset *) 0 ;
    DIMSE_GetUserCallback arg5 = (DIMSE_GetUserCallback) 0 ;
    void *arg6 = (void *) 0 ;
    T_DIMSE_BlockingMode arg7 ;
    int arg8 ;
    T_ASC_Network *arg9 = (T_ASC_Network *) 0 ;
    DIMSE_SubOpProviderCallback arg10 = (DIMSE_SubOpProviderCallback) 0 ;
    void *arg11 = (void *) 0 ;
    T_DIMSE_C_GetRSP *arg12 = (T_DIMSE_C_GetRSP *) 0 ;
    DcmDataset **arg13 = (DcmDataset **) 0 ;
    DcmDataset **arg14 = (DcmDataset **) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_GetRQ *)jarg3; 
    arg4 = (DcmDataset *)jarg4; 
    arg5 = (DIMSE_GetUserCallback)jarg5; 
    arg6 = (void *)jarg6; 
    arg7 = (T_DIMSE_BlockingMode)jarg7; 
    arg8 = (int)jarg8; 
    arg9 = (T_ASC_Network *)jarg9; 
    arg10 = (DIMSE_SubOpProviderCallback)jarg10; 
    arg11 = (void *)jarg11; 
    arg12 = (T_DIMSE_C_GetRSP *)jarg12; 
    arg13 = (DcmDataset **)jarg13; 
    arg14 = (DcmDataset **)jarg14; 
    result = DIMSE_getUser(arg1,arg2,arg3,arg4,arg5,arg6,(T_DIMSE_BlockingMode )arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_getProvider(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_GetRQ *arg3 = (T_DIMSE_C_GetRQ *) 0 ;
    DIMSE_GetProviderCallback arg4 = (DIMSE_GetProviderCallback) 0 ;
    void *arg5 = (void *) 0 ;
    T_DIMSE_BlockingMode arg6 ;
    int arg7 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_GetRQ *)jarg3; 
    arg4 = (DIMSE_GetProviderCallback)jarg4; 
    arg5 = (void *)jarg5; 
    arg6 = (T_DIMSE_BlockingMode)jarg6; 
    arg7 = (int)jarg7; 
    result = DIMSE_getProvider(arg1,arg2,arg3,arg4,arg5,(T_DIMSE_BlockingMode )arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_sendGetResponse(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_C_GetRQ *arg3 = (T_DIMSE_C_GetRQ *) 0 ;
    T_DIMSE_C_GetRSP *arg4 = (T_DIMSE_C_GetRSP *) 0 ;
    DcmDataset *arg5 = (DcmDataset *) 0 ;
    DcmDataset *arg6 = (DcmDataset *) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_C_GetRQ *)jarg3; 
    arg4 = (T_DIMSE_C_GetRSP *)jarg4; 
    arg5 = (DcmDataset *)jarg5; 
    arg6 = (DcmDataset *)jarg6; 
    result = DIMSE_sendGetResponse(arg1,arg2,arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_sendCancelRequest(void * jarg1, void * jarg2, unsigned short jarg3) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    DIC_US arg3 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (DIC_US)jarg3; 
    result = DIMSE_sendCancelRequest(arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_checkForCancelRQ(void * jarg1, void * jarg2, unsigned short jarg3) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    DIC_US arg3 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (DIC_US)jarg3; 
    result = DIMSE_checkForCancelRQ(arg1,arg2,arg3);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_sendMessageUsingFileData__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5, void * jarg6, void * jarg7, void * jarg8) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_Message *arg3 = (T_DIMSE_Message *) 0 ;
    DcmDataset *arg4 = (DcmDataset *) 0 ;
    char *arg5 = (char *) 0 ;
    DIMSE_ProgressCallback arg6 = (DIMSE_ProgressCallback) 0 ;
    void *arg7 = (void *) 0 ;
    DcmDataset **arg8 = (DcmDataset **) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_Message *)jarg3; 
    arg4 = (DcmDataset *)jarg4; 
    arg5 = jarg5; 
    arg6 = (DIMSE_ProgressCallback)jarg6; 
    arg7 = (void *)jarg7; 
    arg8 = (DcmDataset **)jarg8; 
    result = DIMSE_sendMessageUsingFileData(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_sendMessageUsingFileData__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5, void * jarg6, void * jarg7) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_Message *arg3 = (T_DIMSE_Message *) 0 ;
    DcmDataset *arg4 = (DcmDataset *) 0 ;
    char *arg5 = (char *) 0 ;
    DIMSE_ProgressCallback arg6 = (DIMSE_ProgressCallback) 0 ;
    void *arg7 = (void *) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_Message *)jarg3; 
    arg4 = (DcmDataset *)jarg4; 
    arg5 = jarg5; 
    arg6 = (DIMSE_ProgressCallback)jarg6; 
    arg7 = (void *)jarg7; 
    result = DIMSE_sendMessageUsingFileData(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_sendMessageUsingMemoryData__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_Message *arg3 = (T_DIMSE_Message *) 0 ;
    DcmDataset *arg4 = (DcmDataset *) 0 ;
    DcmDataset *arg5 = (DcmDataset *) 0 ;
    DIMSE_ProgressCallback arg6 = (DIMSE_ProgressCallback) 0 ;
    void *arg7 = (void *) 0 ;
    DcmDataset **arg8 = (DcmDataset **) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_Message *)jarg3; 
    arg4 = (DcmDataset *)jarg4; 
    arg5 = (DcmDataset *)jarg5; 
    arg6 = (DIMSE_ProgressCallback)jarg6; 
    arg7 = (void *)jarg7; 
    arg8 = (DcmDataset **)jarg8; 
    result = DIMSE_sendMessageUsingMemoryData(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_sendMessageUsingMemoryData__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg2 ;
    T_DIMSE_Message *arg3 = (T_DIMSE_Message *) 0 ;
    DcmDataset *arg4 = (DcmDataset *) 0 ;
    DcmDataset *arg5 = (DcmDataset *) 0 ;
    DIMSE_ProgressCallback arg6 = (DIMSE_ProgressCallback) 0 ;
    void *arg7 = (void *) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp2 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    argp2 = (T_ASC_PresentationContextID *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg2 = *argp2; 
    arg3 = (T_DIMSE_Message *)jarg3; 
    arg4 = (DcmDataset *)jarg4; 
    arg5 = (DcmDataset *)jarg5; 
    arg6 = (DIMSE_ProgressCallback)jarg6; 
    arg7 = (void *)jarg7; 
    result = DIMSE_sendMessageUsingMemoryData(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_receiveCommand__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_DIMSE_BlockingMode arg2 ;
    int arg3 ;
    T_ASC_PresentationContextID *arg4 = (T_ASC_PresentationContextID *) 0 ;
    T_DIMSE_Message *arg5 = (T_DIMSE_Message *) 0 ;
    DcmDataset **arg6 = (DcmDataset **) 0 ;
    DcmDataset **arg7 = (DcmDataset **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (T_DIMSE_BlockingMode)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (T_ASC_PresentationContextID *)jarg4; 
    arg5 = (T_DIMSE_Message *)jarg5; 
    arg6 = (DcmDataset **)jarg6; 
    arg7 = (DcmDataset **)jarg7; 
    result = DIMSE_receiveCommand(arg1,(T_DIMSE_BlockingMode )arg2,arg3,arg4,arg5,arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_receiveCommand__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_DIMSE_BlockingMode arg2 ;
    int arg3 ;
    T_ASC_PresentationContextID *arg4 = (T_ASC_PresentationContextID *) 0 ;
    T_DIMSE_Message *arg5 = (T_DIMSE_Message *) 0 ;
    DcmDataset **arg6 = (DcmDataset **) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (T_DIMSE_BlockingMode)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (T_ASC_PresentationContextID *)jarg4; 
    arg5 = (T_DIMSE_Message *)jarg5; 
    arg6 = (DcmDataset **)jarg6; 
    result = DIMSE_receiveCommand(arg1,(T_DIMSE_BlockingMode )arg2,arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_receiveDataSetInMemory(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_DIMSE_BlockingMode arg2 ;
    int arg3 ;
    T_ASC_PresentationContextID *arg4 = (T_ASC_PresentationContextID *) 0 ;
    DcmDataset **arg5 = (DcmDataset **) 0 ;
    DIMSE_ProgressCallback arg6 = (DIMSE_ProgressCallback) 0 ;
    void *arg7 = (void *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (T_DIMSE_BlockingMode)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (T_ASC_PresentationContextID *)jarg4; 
    arg5 = (DcmDataset **)jarg5; 
    arg6 = (DIMSE_ProgressCallback)jarg6; 
    arg7 = (void *)jarg7; 
    result = DIMSE_receiveDataSetInMemory(arg1,(T_DIMSE_BlockingMode )arg2,arg3,arg4,arg5,arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_createFilestream(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6) {
    void * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    T_DIMSE_C_StoreRQ *arg2 = (T_DIMSE_C_StoreRQ *) 0 ;
    T_ASC_Association *arg3 = (T_ASC_Association *) 0 ;
    T_ASC_PresentationContextID arg4 ;
    int arg5 ;
    DcmOutputFileStream **arg6 = (DcmOutputFileStream **) 0 ;
    OFCondition result;
    T_ASC_PresentationContextID *argp4 ;
    
    arg1 = jarg1; 
    arg2 = (T_DIMSE_C_StoreRQ *)jarg2; 
    arg3 = (T_ASC_Association *)jarg3; 
    argp4 = (T_ASC_PresentationContextID *)jarg4; 
    if (!argp4) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null T_ASC_PresentationContextID");
    }
    arg4 = *argp4; 
    arg5 = (int)jarg5; 
    arg6 = (DcmOutputFileStream **)jarg6; 
    result = DIMSE_createFilestream((char const *)arg1,(T_DIMSE_C_StoreRQ const *)arg2,(T_ASC_Association const *)arg3,arg4,arg5,arg6);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_DIMSE_receiveDataSetInFile(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
    void * jresult = 0 ;
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    T_DIMSE_BlockingMode arg2 ;
    int arg3 ;
    T_ASC_PresentationContextID *arg4 = (T_ASC_PresentationContextID *) 0 ;
    DcmOutputStream *arg5 = (DcmOutputStream *) 0 ;
    DIMSE_ProgressCallback arg6 = (DIMSE_ProgressCallback) 0 ;
    void *arg7 = (void *) 0 ;
    OFCondition result;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = (T_DIMSE_BlockingMode)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (T_ASC_PresentationContextID *)jarg4; 
    arg5 = (DcmOutputStream *)jarg5; 
    arg6 = (DIMSE_ProgressCallback)jarg6; 
    arg7 = (void *)jarg7; 
    result = DIMSE_receiveDataSetInFile(arg1,(T_DIMSE_BlockingMode )arg2,arg3,arg4,arg5,arg6,arg7);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_DIMSE_debug(int jarg1) {
    int arg1 ;
    
    arg1 = (int)jarg1; 
    DIMSE_debug(arg1);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_warning(void * jarg1, char * jarg2) {
    T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
    char *arg2 = (char *) 0 ;
    void *arg3 = 0 ;
    
    arg1 = (T_ASC_Association *)jarg1; 
    arg2 = jarg2; 
    DIMSE_warning(arg1,(char const *)arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCommand(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_Message *arg2 = (T_DIMSE_Message *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_Message *)jarg2; 
    DIMSE_printCommand(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCEchoRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_EchoRQ *arg2 = (T_DIMSE_C_EchoRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_EchoRQ *)jarg2; 
    DIMSE_printCEchoRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCEchoRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_EchoRSP *arg2 = (T_DIMSE_C_EchoRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_EchoRSP *)jarg2; 
    DIMSE_printCEchoRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCStoreRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_StoreRQ *arg2 = (T_DIMSE_C_StoreRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_StoreRQ *)jarg2; 
    DIMSE_printCStoreRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCStoreRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_StoreRSP *arg2 = (T_DIMSE_C_StoreRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_StoreRSP *)jarg2; 
    DIMSE_printCStoreRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCGetRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_GetRQ *arg2 = (T_DIMSE_C_GetRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_GetRQ *)jarg2; 
    DIMSE_printCGetRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCGetRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_GetRSP *arg2 = (T_DIMSE_C_GetRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_GetRSP *)jarg2; 
    DIMSE_printCGetRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCMoveRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_MoveRQ *arg2 = (T_DIMSE_C_MoveRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_MoveRQ *)jarg2; 
    DIMSE_printCMoveRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCMoveRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_MoveRSP *arg2 = (T_DIMSE_C_MoveRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_MoveRSP *)jarg2; 
    DIMSE_printCMoveRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCFindRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_FindRQ *arg2 = (T_DIMSE_C_FindRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_FindRQ *)jarg2; 
    DIMSE_printCFindRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCFindRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_FindRSP *arg2 = (T_DIMSE_C_FindRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_FindRSP *)jarg2; 
    DIMSE_printCFindRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printCCancelRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_C_CancelRQ *arg2 = (T_DIMSE_C_CancelRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_C_CancelRQ *)jarg2; 
    DIMSE_printCCancelRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNEventReportRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_EventReportRQ *arg2 = (T_DIMSE_N_EventReportRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_EventReportRQ *)jarg2; 
    DIMSE_printNEventReportRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNEventReportRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_EventReportRSP *arg2 = (T_DIMSE_N_EventReportRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_EventReportRSP *)jarg2; 
    DIMSE_printNEventReportRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNGetRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_GetRQ *arg2 = (T_DIMSE_N_GetRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_GetRQ *)jarg2; 
    DIMSE_printNGetRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNGetRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_GetRSP *arg2 = (T_DIMSE_N_GetRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_GetRSP *)jarg2; 
    DIMSE_printNGetRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNSetRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_SetRQ *arg2 = (T_DIMSE_N_SetRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_SetRQ *)jarg2; 
    DIMSE_printNSetRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNSetRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_SetRSP *arg2 = (T_DIMSE_N_SetRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_SetRSP *)jarg2; 
    DIMSE_printNSetRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNActionRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_ActionRQ *arg2 = (T_DIMSE_N_ActionRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_ActionRQ *)jarg2; 
    DIMSE_printNActionRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNActionRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_ActionRSP *arg2 = (T_DIMSE_N_ActionRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_ActionRSP *)jarg2; 
    DIMSE_printNActionRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNCreateRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_CreateRQ *arg2 = (T_DIMSE_N_CreateRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_CreateRQ *)jarg2; 
    DIMSE_printNCreateRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNCreateRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_CreateRSP *arg2 = (T_DIMSE_N_CreateRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_CreateRSP *)jarg2; 
    DIMSE_printNCreateRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNDeleteRQ(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_DeleteRQ *arg2 = (T_DIMSE_N_DeleteRQ *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_DeleteRQ *)jarg2; 
    DIMSE_printNDeleteRQ(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printNDeleteRSP(void * jarg1, void * jarg2) {
    FILE *arg1 = (FILE *) 0 ;
    T_DIMSE_N_DeleteRSP *arg2 = (T_DIMSE_N_DeleteRSP *) 0 ;
    
    arg1 = (FILE *)jarg1; 
    arg2 = (T_DIMSE_N_DeleteRSP *)jarg2; 
    DIMSE_printNDeleteRSP(arg1,arg2);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printMessage__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
    ostream *arg1 = 0 ;
    T_DIMSE_Message *arg2 = 0 ;
    DcmItem *arg3 = (DcmItem *) 0 ;
    
    arg1 = (ostream *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg2 = (T_DIMSE_Message *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "T_DIMSE_Message & reference is null");
    } 
    arg3 = (DcmItem *)jarg3; 
    DIMSE_printMessage(*arg1,*arg2,arg3);
    
}


DllExport void SWIGSTDCALL CSharp_DIMSE_printMessage__SWIG_1(void * jarg1, void * jarg2) {
    ostream *arg1 = 0 ;
    T_DIMSE_Message *arg2 = 0 ;
    
    arg1 = (ostream *)jarg1;
    if(!arg1) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "ostream & reference is null");
    } 
    arg2 = (T_DIMSE_Message *)jarg2;
    if(!arg2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "T_DIMSE_Message & reference is null");
    } 
    DIMSE_printMessage(*arg1,*arg2);
    
}


DllExport char * SWIGSTDCALL CSharp_DU_stripTrailingSpaces(char * jarg1) {
    char * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *result;
    
    arg1 = jarg1; 
    result = (char *)DU_stripTrailingSpaces(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DU_stripLeadingSpaces(char * jarg1) {
    char * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *result;
    
    arg1 = jarg1; 
    result = (char *)DU_stripLeadingSpaces(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DU_stripLeadingAndTrailingSpaces(char * jarg1) {
    char * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *result;
    
    arg1 = jarg1; 
    result = (char *)DU_stripLeadingAndTrailingSpaces(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DU_getStringDOElement(void * jarg1, void * jarg2, char * jarg3) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey arg2 ;
    char *arg3 = (char *) 0 ;
    bool result;
    DcmTagKey *argp2 ;
    
    arg1 = (DcmItem *)jarg1; 
    argp2 = (DcmTagKey *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null DcmTagKey");
    }
    arg2 = *argp2; 
    arg3 = jarg3; 
    result = (bool)DU_getStringDOElement(arg1,arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DU_putStringDOElement(void * jarg1, void * jarg2, char * jarg3) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey arg2 ;
    char *arg3 = (char *) 0 ;
    bool result;
    DcmTagKey *argp2 ;
    
    arg1 = (DcmItem *)jarg1; 
    argp2 = (DcmTagKey *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null DcmTagKey");
    }
    arg2 = *argp2; 
    arg3 = jarg3; 
    result = (bool)DU_putStringDOElement(arg1,arg2,(char const *)arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DU_getShortDOElement(void * jarg1, void * jarg2, const unsigned short* jarg3) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey arg2 ;
    Uint16 *arg3 = (Uint16 *) 0 ;
    bool result;
    DcmTagKey *argp2 ;
    
    arg1 = (DcmItem *)jarg1; 
    argp2 = (DcmTagKey *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null DcmTagKey");
    }
    arg2 = *argp2; 
    arg3 = (Uint16 *)jarg3; 
    result = (bool)DU_getShortDOElement(arg1,arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DU_putShortDOElement(void * jarg1, void * jarg2, unsigned short jarg3) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    DcmTagKey arg2 ;
    Uint16 arg3 ;
    bool result;
    DcmTagKey *argp2 ;
    
    arg1 = (DcmItem *)jarg1; 
    argp2 = (DcmTagKey *)jarg2; 
    if (!argp2) {
        SWIG_CSharpThrowException(SWIG_CSharpNullReferenceException, "Attempt to dereference null DcmTagKey");
    }
    arg2 = *argp2; 
    arg3 = (Uint16)jarg3; 
    result = (bool)DU_putShortDOElement(arg1,arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DU_findSOPClassAndInstanceInDataSet__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    bool arg4 ;
    bool result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (bool)DU_findSOPClassAndInstanceInDataSet(arg1,arg2,arg3,arg4);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DU_findSOPClassAndInstanceInDataSet__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
    unsigned int jresult = 0 ;
    DcmItem *arg1 = (DcmItem *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    bool result;
    
    arg1 = (DcmItem *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = (bool)DU_findSOPClassAndInstanceInDataSet(arg1,arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DU_findSOPClassAndInstanceInFile__SWIG_0(char * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
    unsigned int jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    bool arg4 ;
    bool result;
    
    arg1 = jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    arg4 = jarg4 ? true : false; 
    result = (bool)DU_findSOPClassAndInstanceInFile((char const *)arg1,arg2,arg3,arg4);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned int SWIGSTDCALL CSharp_DU_findSOPClassAndInstanceInFile__SWIG_1(char * jarg1, char * jarg2, char * jarg3) {
    unsigned int jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    bool result;
    
    arg1 = jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = (bool)DU_findSOPClassAndInstanceInFile((char const *)arg1,arg2,arg3);
    
    jresult = result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_DU_fileSize(char * jarg1) {
    unsigned long jresult = 0 ;
    char *arg1 = (char *) 0 ;
    unsigned long result;
    
    arg1 = jarg1; 
    result = (unsigned long)DU_fileSize((char const *)arg1);
    
    jresult = result; 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DU_cstoreStatusString(unsigned short jarg1) {
    char * jresult = 0 ;
    Uint16 arg1 ;
    char *result;
    
    arg1 = (Uint16)jarg1; 
    result = (char *)DU_cstoreStatusString(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DU_cfindStatusString(unsigned short jarg1) {
    char * jresult = 0 ;
    Uint16 arg1 ;
    char *result;
    
    arg1 = (Uint16)jarg1; 
    result = (char *)DU_cfindStatusString(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DU_cmoveStatusString(unsigned short jarg1) {
    char * jresult = 0 ;
    Uint16 arg1 ;
    char *result;
    
    arg1 = (Uint16)jarg1; 
    result = (char *)DU_cmoveStatusString(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport char * SWIGSTDCALL CSharp_DU_cgetStatusString(unsigned short jarg1) {
    char * jresult = 0 ;
    Uint16 arg1 ;
    char *result;
    
    arg1 = (Uint16)jarg1; 
    result = (char *)DU_cgetStatusString(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_new_LST_HEAD() {
    void * jresult = 0 ;
    LST_HEAD *result;
    
    result = (LST_HEAD *)new LST_HEAD();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void SWIGSTDCALL CSharp_delete_LST_HEAD(void * jarg1) {
    LST_HEAD *arg1 = (LST_HEAD *) 0 ;
    
    arg1 = (LST_HEAD *)jarg1; 
    delete arg1;
    
}


DllExport void SWIGSTDCALL CSharp_LST_HEAD_push_back(void * jarg1, void * jarg2) {
    LST_HEAD *arg1 = (LST_HEAD *) 0 ;
    void *arg2 = (void *) 0 ;
    
    arg1 = (LST_HEAD *)jarg1; 
    arg2 = (void *)jarg2; 
    (arg1)->push_back(arg2);
    
}


DllExport void * SWIGSTDCALL CSharp_LST_HEAD_dequeue(void * jarg1) {
    void * jresult = 0 ;
    LST_HEAD *arg1 = (LST_HEAD *) 0 ;
    void *result;
    
    arg1 = (LST_HEAD *)jarg1; 
    result = (void *)(arg1)->dequeue();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_LST_HEAD_size(void * jarg1) {
    unsigned long jresult = 0 ;
    LST_HEAD *arg1 = (LST_HEAD *) 0 ;
    size_t result;
    
    arg1 = (LST_HEAD *)jarg1; 
    result = ((LST_HEAD const *)arg1)->size();
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_HEAD_front(void * jarg1) {
    void * jresult = 0 ;
    LST_HEAD *arg1 = (LST_HEAD *) 0 ;
    void *result;
    
    arg1 = (LST_HEAD *)jarg1; 
    result = (void *)(arg1)->front();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_HEAD_position(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    LST_HEAD *arg1 = (LST_HEAD *) 0 ;
    void *arg2 = (void *) 0 ;
    void *result;
    
    arg1 = (LST_HEAD *)jarg1; 
    arg2 = (void *)jarg2; 
    result = (void *)(arg1)->position(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_HEAD_next(void * jarg1) {
    void * jresult = 0 ;
    LST_HEAD *arg1 = (LST_HEAD *) 0 ;
    void *result;
    
    arg1 = (LST_HEAD *)jarg1; 
    result = (void *)(arg1)->next();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_HEAD_current(void * jarg1) {
    void * jresult = 0 ;
    LST_HEAD *arg1 = (LST_HEAD *) 0 ;
    void *result;
    
    arg1 = (LST_HEAD *)jarg1; 
    result = (void *)((LST_HEAD const *)arg1)->current();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_Create() {
    void * jresult = 0 ;
    LST_HEAD *result;
    
    result = (LST_HEAD *)LST_Create();
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_Destroy(void * jarg1) {
    void * jresult = 0 ;
    LST_HEAD **arg1 = (LST_HEAD **) 0 ;
    OFCondition result;
    
    arg1 = (LST_HEAD **)jarg1; 
    result = LST_Destroy(arg1);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_Enqueue(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    LST_HEAD **arg1 = (LST_HEAD **) 0 ;
    void *arg2 = (void *) 0 ;
    OFCondition result;
    
    arg1 = (LST_HEAD **)jarg1; 
    arg2 = (void *)jarg2; 
    result = LST_Enqueue(arg1,arg2);
    
    jresult = new OFCondition((OFCondition &)result); 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_Dequeue(void * jarg1) {
    void * jresult = 0 ;
    LST_HEAD **arg1 = (LST_HEAD **) 0 ;
    void *result;
    
    arg1 = (LST_HEAD **)jarg1; 
    result = (void *)LST_Dequeue(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_Pop(void * jarg1) {
    void * jresult = 0 ;
    LST_HEAD **arg1 = (LST_HEAD **) 0 ;
    void *result;
    
    arg1 = (LST_HEAD **)jarg1; 
    result = (void *)LST_Pop(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport unsigned long SWIGSTDCALL CSharp_LST_Count(void * jarg1) {
    unsigned long jresult = 0 ;
    LST_HEAD **arg1 = (LST_HEAD **) 0 ;
    unsigned long result;
    
    arg1 = (LST_HEAD **)jarg1; 
    result = (unsigned long)LST_Count(arg1);
    
    jresult = result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_Head(void * jarg1) {
    void * jresult = 0 ;
    LST_HEAD **arg1 = (LST_HEAD **) 0 ;
    void *result;
    
    arg1 = (LST_HEAD **)jarg1; 
    result = (void *)LST_Head(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_Current(void * jarg1) {
    void * jresult = 0 ;
    LST_HEAD **arg1 = (LST_HEAD **) 0 ;
    void *result;
    
    arg1 = (LST_HEAD **)jarg1; 
    result = (void *)LST_Current(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_Next(void * jarg1) {
    void * jresult = 0 ;
    LST_HEAD **arg1 = (LST_HEAD **) 0 ;
    void *result;
    
    arg1 = (LST_HEAD **)jarg1; 
    result = (void *)LST_Next(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


DllExport void * SWIGSTDCALL CSharp_LST_Position(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    LST_HEAD **arg1 = (LST_HEAD **) 0 ;
    void *arg2 = (void *) 0 ;
    void *result;
    
    arg1 = (LST_HEAD **)jarg1; 
    arg2 = (void *)jarg2; 
    result = (void *)LST_Position(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}




DllExport void SWIGSTDCALL CSharp_set_T_ASC_Association_parameters(void * jarg1, void * jarg2) {
	T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
	T_ASC_Parameters *arg2 = (T_ASC_Parameters *) 0 ;
	
	arg1 = (T_ASC_Association *)jarg1; 
	arg2 = (T_ASC_Parameters *)jarg2; 
	if (arg1) (arg1)->params = arg2;
	
}


DllExport void * SWIGSTDCALL CSharp_get_T_ASC_Association_parameters(void * jarg1) {
	void * jresult = 0 ;
	T_ASC_Association *arg1 = (T_ASC_Association *) 0 ;
	T_ASC_Parameters *result;
	
	arg1 = (T_ASC_Association *)jarg1; 
	result = (T_ASC_Parameters *) ((arg1)->params);
	
	jresult = (void *)result; 
	return jresult;
}


DllExport OFConditionBase * SWIGSTDCALL CSharp_OFConditionConstUpcast(OFConditionConst *objectRef) {
    return (OFConditionBase *)objectRef;
}

DllExport OFConditionBase * SWIGSTDCALL CSharp_OFConditionStringUpcast(OFConditionString *objectRef) {
    return (OFConditionBase *)objectRef;
}

DllExport DcmProducer * SWIGSTDCALL CSharp_DcmInputFilterUpcast(DcmInputFilter *objectRef) {
    return (DcmProducer *)objectRef;
}

DllExport DcmConsumer * SWIGSTDCALL CSharp_DcmOutputFilterUpcast(DcmOutputFilter *objectRef) {
    return (DcmConsumer *)objectRef;
}

DllExport DcmTagKey * SWIGSTDCALL CSharp_DcmTagUpcast(DcmTag *objectRef) {
    return (DcmTagKey *)objectRef;
}

DllExport DcmTagKey * SWIGSTDCALL CSharp_DcmDictEntryUpcast(DcmDictEntry *objectRef) {
    return (DcmTagKey *)objectRef;
}

DllExport DcmObject * SWIGSTDCALL CSharp_DcmElementUpcast(DcmElement *objectRef) {
    return (DcmObject *)objectRef;
}

DllExport DcmObject * SWIGSTDCALL CSharp_DcmItemUpcast(DcmItem *objectRef) {
    return (DcmObject *)objectRef;
}

DllExport DcmItem * SWIGSTDCALL CSharp_DcmMetaInfoUpcast(DcmMetaInfo *objectRef) {
    return (DcmItem *)objectRef;
}

DllExport DcmItem * SWIGSTDCALL CSharp_DcmDatasetUpcast(DcmDataset *objectRef) {
    return (DcmItem *)objectRef;
}

DllExport DcmElement * SWIGSTDCALL CSharp_DcmSequenceOfItemsUpcast(DcmSequenceOfItems *objectRef) {
    return (DcmElement *)objectRef;
}

DllExport DcmSequenceOfItems * SWIGSTDCALL CSharp_DcmFileFormatUpcast(DcmFileFormat *objectRef) {
    return (DcmSequenceOfItems *)objectRef;
}

DllExport DcmSequenceOfItems * SWIGSTDCALL CSharp_DcmPixelSequenceUpcast(DcmPixelSequence *objectRef) {
    return (DcmSequenceOfItems *)objectRef;
}

DllExport DcmElement * SWIGSTDCALL CSharp_DcmByteStringUpcast(DcmByteString *objectRef) {
    return (DcmElement *)objectRef;
}

DllExport DcmByteString * SWIGSTDCALL CSharp_DcmApplicationEntityUpcast(DcmApplicationEntity *objectRef) {
    return (DcmByteString *)objectRef;
}

DllExport DcmByteString * SWIGSTDCALL CSharp_DcmAgeStringUpcast(DcmAgeString *objectRef) {
    return (DcmByteString *)objectRef;
}

DllExport DcmByteString * SWIGSTDCALL CSharp_DcmCodeStringUpcast(DcmCodeString *objectRef) {
    return (DcmByteString *)objectRef;
}

DllExport DcmByteString * SWIGSTDCALL CSharp_DcmDateUpcast(DcmDate *objectRef) {
    return (DcmByteString *)objectRef;
}

DllExport DcmByteString * SWIGSTDCALL CSharp_DcmDecimalStringUpcast(DcmDecimalString *objectRef) {
    return (DcmByteString *)objectRef;
}

DllExport DcmByteString * SWIGSTDCALL CSharp_DcmDateTimeUpcast(DcmDateTime *objectRef) {
    return (DcmByteString *)objectRef;
}

DllExport DcmByteString * SWIGSTDCALL CSharp_DcmIntegerStringUpcast(DcmIntegerString *objectRef) {
    return (DcmByteString *)objectRef;
}

DllExport DcmByteString * SWIGSTDCALL CSharp_DcmTimeUpcast(DcmTime *objectRef) {
    return (DcmByteString *)objectRef;
}

DllExport DcmByteString * SWIGSTDCALL CSharp_DcmUniqueIdentifierUpcast(DcmUniqueIdentifier *objectRef) {
    return (DcmByteString *)objectRef;
}

DllExport DcmByteString * SWIGSTDCALL CSharp_DcmCharStringUpcast(DcmCharString *objectRef) {
    return (DcmByteString *)objectRef;
}

DllExport DcmCharString * SWIGSTDCALL CSharp_DcmLongStringUpcast(DcmLongString *objectRef) {
    return (DcmCharString *)objectRef;
}

DllExport DcmCharString * SWIGSTDCALL CSharp_DcmLongTextUpcast(DcmLongText *objectRef) {
    return (DcmCharString *)objectRef;
}

DllExport DcmCharString * SWIGSTDCALL CSharp_DcmPersonNameUpcast(DcmPersonName *objectRef) {
    return (DcmCharString *)objectRef;
}

DllExport DcmCharString * SWIGSTDCALL CSharp_DcmShortStringUpcast(DcmShortString *objectRef) {
    return (DcmCharString *)objectRef;
}

DllExport DcmCharString * SWIGSTDCALL CSharp_DcmShortTextUpcast(DcmShortText *objectRef) {
    return (DcmCharString *)objectRef;
}

DllExport DcmCharString * SWIGSTDCALL CSharp_DcmUnlimitedTextUpcast(DcmUnlimitedText *objectRef) {
    return (DcmCharString *)objectRef;
}

DllExport DcmElement * SWIGSTDCALL CSharp_DcmOtherByteOtherWordUpcast(DcmOtherByteOtherWord *objectRef) {
    return (DcmElement *)objectRef;
}

DllExport DcmElement * SWIGSTDCALL CSharp_DcmAttributeTagUpcast(DcmAttributeTag *objectRef) {
    return (DcmElement *)objectRef;
}

DllExport DcmElement * SWIGSTDCALL CSharp_DcmSignedShortUpcast(DcmSignedShort *objectRef) {
    return (DcmElement *)objectRef;
}

DllExport DcmElement * SWIGSTDCALL CSharp_DcmUnsignedShortUpcast(DcmUnsignedShort *objectRef) {
    return (DcmElement *)objectRef;
}

DllExport DcmElement * SWIGSTDCALL CSharp_DcmSignedLongUpcast(DcmSignedLong *objectRef) {
    return (DcmElement *)objectRef;
}

DllExport DcmElement * SWIGSTDCALL CSharp_DcmUnsignedLongUpcast(DcmUnsignedLong *objectRef) {
    return (DcmElement *)objectRef;
}

DllExport DcmUnsignedLong * SWIGSTDCALL CSharp_DcmUnsignedLongOffsetUpcast(DcmUnsignedLongOffset *objectRef) {
    return (DcmUnsignedLong *)objectRef;
}

DllExport DcmElement * SWIGSTDCALL CSharp_DcmFloatingPointSingleUpcast(DcmFloatingPointSingle *objectRef) {
    return (DcmElement *)objectRef;
}

DllExport DcmElement * SWIGSTDCALL CSharp_DcmFloatingPointDoubleUpcast(DcmFloatingPointDouble *objectRef) {
    return (DcmElement *)objectRef;
}

DllExport DcmFloatingPointSingle * SWIGSTDCALL CSharp_DcmOtherFloatUpcast(DcmOtherFloat *objectRef) {
    return (DcmFloatingPointSingle *)objectRef;
}

#ifdef __cplusplus
}
#endif

