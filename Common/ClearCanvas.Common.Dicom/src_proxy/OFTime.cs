/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class OFTime : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OFTime(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(OFTime obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~OFTime() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_OFTime(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public OFTime() : this(DCMTKPINVOKE.new_OFTime__SWIG_0(), true) {
  }

  public OFTime(OFTime timeVal) : this(DCMTKPINVOKE.new_OFTime__SWIG_1(OFTime.getCPtr(timeVal)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public OFTime(uint hour, uint minute, double second, double timeZone) : this(DCMTKPINVOKE.new_OFTime__SWIG_2(hour, minute, second, timeZone), true) {
  }

  public OFTime(uint hour, uint minute, double second) : this(DCMTKPINVOKE.new_OFTime__SWIG_3(hour, minute, second), true) {
  }

  public virtual void clear() {
    DCMTKPINVOKE.OFTime_clear(swigCPtr);
  }

  public virtual bool isValid() {
    bool ret = DCMTKPINVOKE.OFTime_isValid(swigCPtr);
    return ret;
  }

  public bool setTime(uint hour, uint minute, double second, double timeZone) {
    bool ret = DCMTKPINVOKE.OFTime_setTime__SWIG_0(swigCPtr, hour, minute, second, timeZone);
    return ret;
  }

  public bool setTime(uint hour, uint minute, double second) {
    bool ret = DCMTKPINVOKE.OFTime_setTime__SWIG_1(swigCPtr, hour, minute, second);
    return ret;
  }

  public bool setHour(uint hour) {
    bool ret = DCMTKPINVOKE.OFTime_setHour(swigCPtr, hour);
    return ret;
  }

  public bool setMinute(uint minute) {
    bool ret = DCMTKPINVOKE.OFTime_setMinute(swigCPtr, minute);
    return ret;
  }

  public bool setSecond(double second) {
    bool ret = DCMTKPINVOKE.OFTime_setSecond(swigCPtr, second);
    return ret;
  }

  public bool setTimeZone(double timeZone) {
    bool ret = DCMTKPINVOKE.OFTime_setTimeZone__SWIG_0(swigCPtr, timeZone);
    return ret;
  }

  public bool setTimeZone(int hour, uint minute) {
    bool ret = DCMTKPINVOKE.OFTime_setTimeZone__SWIG_1(swigCPtr, hour, minute);
    return ret;
  }

  public bool setTimeInSeconds(double seconds, double timeZone, bool normalize) {
    bool ret = DCMTKPINVOKE.OFTime_setTimeInSeconds__SWIG_0(swigCPtr, seconds, timeZone, normalize);
    return ret;
  }

  public bool setTimeInSeconds(double seconds, double timeZone) {
    bool ret = DCMTKPINVOKE.OFTime_setTimeInSeconds__SWIG_1(swigCPtr, seconds, timeZone);
    return ret;
  }

  public bool setTimeInSeconds(double seconds) {
    bool ret = DCMTKPINVOKE.OFTime_setTimeInSeconds__SWIG_2(swigCPtr, seconds);
    return ret;
  }

  public bool setTimeInHours(double hours, double timeZone, bool normalize) {
    bool ret = DCMTKPINVOKE.OFTime_setTimeInHours__SWIG_0(swigCPtr, hours, timeZone, normalize);
    return ret;
  }

  public bool setTimeInHours(double hours, double timeZone) {
    bool ret = DCMTKPINVOKE.OFTime_setTimeInHours__SWIG_1(swigCPtr, hours, timeZone);
    return ret;
  }

  public bool setTimeInHours(double hours) {
    bool ret = DCMTKPINVOKE.OFTime_setTimeInHours__SWIG_2(swigCPtr, hours);
    return ret;
  }

  public bool setCurrentTime() {
    bool ret = DCMTKPINVOKE.OFTime_setCurrentTime(swigCPtr);
    return ret;
  }

  public bool setISOFormattedTime(string formattedTime) {
    bool ret = DCMTKPINVOKE.OFTime_setISOFormattedTime(swigCPtr, formattedTime);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getHour() {
    uint ret = DCMTKPINVOKE.OFTime_getHour(swigCPtr);
    return ret;
  }

  public uint getMinute() {
    uint ret = DCMTKPINVOKE.OFTime_getMinute(swigCPtr);
    return ret;
  }

  public double getSecond() {
    double ret = DCMTKPINVOKE.OFTime_getSecond(swigCPtr);
    return ret;
  }

  public uint getIntSecond() {
    uint ret = DCMTKPINVOKE.OFTime_getIntSecond(swigCPtr);
    return ret;
  }

  public uint getMilliSecond() {
    uint ret = DCMTKPINVOKE.OFTime_getMilliSecond(swigCPtr);
    return ret;
  }

  public uint getMicroSecond() {
    uint ret = DCMTKPINVOKE.OFTime_getMicroSecond(swigCPtr);
    return ret;
  }

  public double getTimeZone() {
    double ret = DCMTKPINVOKE.OFTime_getTimeZone(swigCPtr);
    return ret;
  }

  public double getTimeInSeconds(bool useTimeZone, bool normalize) {
    double ret = DCMTKPINVOKE.OFTime_getTimeInSeconds__SWIG_0(swigCPtr, useTimeZone, normalize);
    return ret;
  }

  public double getTimeInSeconds(bool useTimeZone) {
    double ret = DCMTKPINVOKE.OFTime_getTimeInSeconds__SWIG_1(swigCPtr, useTimeZone);
    return ret;
  }

  public double getTimeInSeconds() {
    double ret = DCMTKPINVOKE.OFTime_getTimeInSeconds__SWIG_2(swigCPtr);
    return ret;
  }

  public double getTimeInHours(bool useTimeZone, bool normalize) {
    double ret = DCMTKPINVOKE.OFTime_getTimeInHours__SWIG_0(swigCPtr, useTimeZone, normalize);
    return ret;
  }

  public double getTimeInHours(bool useTimeZone) {
    double ret = DCMTKPINVOKE.OFTime_getTimeInHours__SWIG_1(swigCPtr, useTimeZone);
    return ret;
  }

  public double getTimeInHours() {
    double ret = DCMTKPINVOKE.OFTime_getTimeInHours__SWIG_2(swigCPtr);
    return ret;
  }

  public OFTime getCoordinatedUniversalTime() {
    OFTime ret = new OFTime(DCMTKPINVOKE.OFTime_getCoordinatedUniversalTime(swigCPtr), true);
    return ret;
  }

  public OFTime getLocalTime() {
    OFTime ret = new OFTime(DCMTKPINVOKE.OFTime_getLocalTime(swigCPtr), true);
    return ret;
  }

  public bool getISOFormattedTime(StringBuilder formattedTime, bool showSeconds, bool showFraction, bool showTimeZone, bool showDelimiter) {
    bool ret = DCMTKPINVOKE.OFTime_getISOFormattedTime__SWIG_0(swigCPtr, formattedTime, showSeconds, showFraction, showTimeZone, showDelimiter);
    return ret;
  }

  public bool getISOFormattedTime(StringBuilder formattedTime, bool showSeconds, bool showFraction, bool showTimeZone) {
    bool ret = DCMTKPINVOKE.OFTime_getISOFormattedTime__SWIG_1(swigCPtr, formattedTime, showSeconds, showFraction, showTimeZone);
    return ret;
  }

  public bool getISOFormattedTime(StringBuilder formattedTime, bool showSeconds, bool showFraction) {
    bool ret = DCMTKPINVOKE.OFTime_getISOFormattedTime__SWIG_2(swigCPtr, formattedTime, showSeconds, showFraction);
    return ret;
  }

  public bool getISOFormattedTime(StringBuilder formattedTime, bool showSeconds) {
    bool ret = DCMTKPINVOKE.OFTime_getISOFormattedTime__SWIG_3(swigCPtr, formattedTime, showSeconds);
    return ret;
  }

  public bool getISOFormattedTime(StringBuilder formattedTime) {
    bool ret = DCMTKPINVOKE.OFTime_getISOFormattedTime__SWIG_4(swigCPtr, formattedTime);
    return ret;
  }

  public static OFTime getCurrentTime() {
    OFTime ret = new OFTime(DCMTKPINVOKE.OFTime_getCurrentTime(), true);
    return ret;
  }

  public static double getLocalTimeZone() {
    double ret = DCMTKPINVOKE.OFTime_getLocalTimeZone();
    return ret;
  }

}

}
