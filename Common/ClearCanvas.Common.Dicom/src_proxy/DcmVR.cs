/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;

public class DcmVR : IDisposable {
  private IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal DcmVR(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static IntPtr getCPtr(DcmVR obj) {
    return (obj == null) ? IntPtr.Zero : obj.swigCPtr;
  }

  ~DcmVR() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmVR(swigCPtr);
    }
    swigCPtr = IntPtr.Zero;
    GC.SuppressFinalize(this);
  }

  public DcmVR() : this(DCMTKPINVOKE.new_DcmVR__SWIG_0(), true) {
  }

  public DcmVR(DcmEVR evr) : this(DCMTKPINVOKE.new_DcmVR__SWIG_1((int)evr), true) {
  }

  public DcmVR(string vrName) : this(DCMTKPINVOKE.new_DcmVR__SWIG_2(vrName), true) {
  }

  public DcmVR(DcmVR avr) : this(DCMTKPINVOKE.new_DcmVR__SWIG_3(DcmVR.getCPtr(avr)), true) {
  }

  public void setVR(DcmEVR evr) {
    DCMTKPINVOKE.DcmVR_setVR__SWIG_0(swigCPtr, (int)evr);
  }

  public void setVR(string vrName) {
    DCMTKPINVOKE.DcmVR_setVR__SWIG_1(swigCPtr, vrName);
  }

  public void setVR(DcmVR avr) {
    DCMTKPINVOKE.DcmVR_setVR__SWIG_2(swigCPtr, DcmVR.getCPtr(avr));
  }

  public DcmEVR getEVR() {
    return (DcmEVR)DCMTKPINVOKE.DcmVR_getEVR(swigCPtr);
  }

  public DcmEVR getValidEVR() {
    return (DcmEVR)DCMTKPINVOKE.DcmVR_getValidEVR(swigCPtr);
  }

  public string getVRName() {
    return DCMTKPINVOKE.DcmVR_getVRName(swigCPtr);
  }

  public string getValidVRName() {
    return DCMTKPINVOKE.DcmVR_getValidVRName(swigCPtr);
  }

  public uint getValueWidth() {
    return DCMTKPINVOKE.DcmVR_getValueWidth(swigCPtr);
  }

  public bool isStandard() {
    return DCMTKPINVOKE.DcmVR_isStandard(swigCPtr);
  }

  public bool isForInternalUseOnly() {
    return DCMTKPINVOKE.DcmVR_isForInternalUseOnly(swigCPtr);
  }

  public bool isaString() {
    return DCMTKPINVOKE.DcmVR_isaString(swigCPtr);
  }

  public bool usesExtendedLengthEncoding() {
    return DCMTKPINVOKE.DcmVR_usesExtendedLengthEncoding(swigCPtr);
  }

  public bool isEquivalent(DcmVR avr) {
    return DCMTKPINVOKE.DcmVR_isEquivalent(swigCPtr, DcmVR.getCPtr(avr));
  }

  public uint getMinValueLength() {
    return DCMTKPINVOKE.DcmVR_getMinValueLength(swigCPtr);
  }

  public uint getMaxValueLength() {
    return DCMTKPINVOKE.DcmVR_getMaxValueLength(swigCPtr);
  }

}

}
