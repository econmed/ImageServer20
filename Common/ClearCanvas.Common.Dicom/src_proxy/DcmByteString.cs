/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class DcmByteString : DcmElement {
  private HandleRef swigCPtr;

  internal DcmByteString(IntPtr cPtr, bool cMemoryOwn) : base(DCMTKPINVOKE.DcmByteStringUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DcmByteString obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DcmByteString() {
    Dispose();
  }

  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmByteString(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  public DcmByteString(DcmTag tag, uint len) : this(DCMTKPINVOKE.new_DcmByteString__SWIG_0(DcmTag.getCPtr(tag), len), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmByteString(DcmTag tag) : this(DCMTKPINVOKE.new_DcmByteString__SWIG_1(DcmTag.getCPtr(tag)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmByteString(DcmByteString old) : this(DCMTKPINVOKE.new_DcmByteString__SWIG_2(DcmByteString.getCPtr(old)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override DcmEVR ident() {
    DcmEVR ret = (DcmEVR)DCMTKPINVOKE.DcmByteString_ident(swigCPtr);
    return ret;
  }

  public override OFCondition clear() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_clear(swigCPtr), true);
    return ret;
  }

  public override uint getVM() {
    uint ret = DCMTKPINVOKE.DcmByteString_getVM(swigCPtr);
    return ret;
  }

  public uint getRealLength() {
    uint ret = DCMTKPINVOKE.DcmByteString_getRealLength(swigCPtr);
    return ret;
  }

  public override uint getLength(E_TransferSyntax xfer, E_EncodingType enctype) {
    uint ret = DCMTKPINVOKE.DcmByteString_getLength__SWIG_0(swigCPtr, (int)xfer, (int)enctype);
    return ret;
  }

  public override uint getLength(E_TransferSyntax xfer) {
    uint ret = DCMTKPINVOKE.DcmByteString_getLength__SWIG_1(swigCPtr, (int)xfer);
    return ret;
  }

  public override uint getLength() {
    uint ret = DCMTKPINVOKE.DcmByteString_getLength__SWIG_2(swigCPtr);
    return ret;
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName, SWIGTYPE_p_size_t pixelCounter) {
    DCMTKPINVOKE.DcmByteString_print__SWIG_0(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName, SWIGTYPE_p_size_t.getCPtr(pixelCounter));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName) {
    DCMTKPINVOKE.DcmByteString_print__SWIG_1(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level) {
    DCMTKPINVOKE.DcmByteString_print__SWIG_2(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags) {
    DCMTKPINVOKE.DcmByteString_print__SWIG_3(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void print(SWIGTYPE_p_ostream outStream) {
    DCMTKPINVOKE.DcmByteString_print__SWIG_4(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public override OFCondition write(DcmOutputStream outStream, E_TransferSyntax writeXfer, E_EncodingType encodingType) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_write__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)writeXfer, (int)encodingType), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition write(DcmOutputStream outStream, E_TransferSyntax writeXfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_write__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)writeXfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax writeXfer, E_EncodingType encodingType) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_writeSignatureFormat__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)writeXfer, (int)encodingType), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax writeXfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_writeSignatureFormat__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)writeXfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition getOFString(StringBuilder stringVal, uint pos, bool normalize) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_getOFString__SWIG_0(swigCPtr, stringVal, pos, normalize), true);
    return ret;
  }

  public override OFCondition getOFString(StringBuilder stringVal, uint pos) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_getOFString__SWIG_1(swigCPtr, stringVal, pos), true);
    return ret;
  }

  public override OFCondition getString(ref IntPtr stringVal) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_getString(swigCPtr, ref stringVal), true);
    return ret;
  }

  public override OFCondition putString(string stringVal) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_putString(swigCPtr, stringVal), true);
    return ret;
  }

  public override OFCondition putOFStringArray(string stringVal) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_putOFStringArray(swigCPtr, stringVal), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override OFCondition verify(bool autocorrect) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_verify__SWIG_0(swigCPtr, autocorrect), true);
    return ret;
  }

  public override OFCondition verify() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmByteString_verify__SWIG_1(swigCPtr), true);
    return ret;
  }

}

}
