/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class DcmPixelData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DcmPixelData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DcmPixelData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DcmPixelData() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmPixelData(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public DcmPixelData(DcmTag tag, uint len) : this(DCMTKPINVOKE.new_DcmPixelData__SWIG_0(DcmTag.getCPtr(tag), len), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmPixelData(DcmTag tag) : this(DCMTKPINVOKE.new_DcmPixelData__SWIG_1(DcmTag.getCPtr(tag)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DcmPixelData(DcmPixelData pixelData) : this(DCMTKPINVOKE.new_DcmPixelData__SWIG_2(DcmPixelData.getCPtr(pixelData)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual OFCondition setVR(DcmEVR vr) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_setVR(swigCPtr, (int)vr), true);
    return ret;
  }

  public virtual DcmEVR ident() {
    DcmEVR ret = (DcmEVR)DCMTKPINVOKE.DcmPixelData_ident(swigCPtr);
    return ret;
  }

  public virtual void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName, SWIGTYPE_p_size_t pixelCounter) {
    DCMTKPINVOKE.DcmPixelData_print__SWIG_0(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName, SWIGTYPE_p_size_t.getCPtr(pixelCounter));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName) {
    DCMTKPINVOKE.DcmPixelData_print__SWIG_1(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void print(SWIGTYPE_p_ostream outStream, uint flags, int level) {
    DCMTKPINVOKE.DcmPixelData_print__SWIG_2(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void print(SWIGTYPE_p_ostream outStream, uint flags) {
    DCMTKPINVOKE.DcmPixelData_print__SWIG_3(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void print(SWIGTYPE_p_ostream outStream) {
    DCMTKPINVOKE.DcmPixelData_print__SWIG_4(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool canWriteXfer(E_TransferSyntax newXfer, E_TransferSyntax oldXfer) {
    bool ret = DCMTKPINVOKE.DcmPixelData_canWriteXfer(swigCPtr, (int)newXfer, (int)oldXfer);
    return ret;
  }

  public virtual uint calcElementLength(E_TransferSyntax xfer, E_EncodingType enctype) {
    uint ret = DCMTKPINVOKE.DcmPixelData_calcElementLength(swigCPtr, (int)xfer, (int)enctype);
    return ret;
  }

  public virtual uint getLength(E_TransferSyntax xfer, E_EncodingType enctype) {
    uint ret = DCMTKPINVOKE.DcmPixelData_getLength__SWIG_0(swigCPtr, (int)xfer, (int)enctype);
    return ret;
  }

  public virtual uint getLength(E_TransferSyntax xfer) {
    uint ret = DCMTKPINVOKE.DcmPixelData_getLength__SWIG_1(swigCPtr, (int)xfer);
    return ret;
  }

  public virtual uint getLength() {
    uint ret = DCMTKPINVOKE.DcmPixelData_getLength__SWIG_2(swigCPtr);
    return ret;
  }

  public virtual void transferInit() {
    DCMTKPINVOKE.DcmPixelData_transferInit(swigCPtr);
  }

  public virtual OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer, E_GrpLenEncoding glenc, uint maxReadLength) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_read__SWIG_0(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer, (int)glenc, maxReadLength), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer, E_GrpLenEncoding glenc) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_read__SWIG_1(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer, (int)glenc), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_read__SWIG_2(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition write(DcmOutputStream outStream, E_TransferSyntax oxfer, E_EncodingType enctype) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_write__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer, (int)enctype), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition write(DcmOutputStream outStream, E_TransferSyntax oxfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_write__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition writeXML(SWIGTYPE_p_ostream outStream, uint flags) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_writeXML__SWIG_0(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition writeXML(SWIGTYPE_p_ostream outStream) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_writeXML__SWIG_1(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax oxfer, E_EncodingType enctype) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_writeSignatureFormat__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer, (int)enctype), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax oxfer) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_writeSignatureFormat__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OFCondition loadAllDataIntoMemory() {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_loadAllDataIntoMemory(swigCPtr), true);
    return ret;
  }

  public virtual void transferEnd() {
    DCMTKPINVOKE.DcmPixelData_transferEnd(swigCPtr);
  }

  public bool canChooseRepresentation(E_TransferSyntax repType, DcmRepresentationParameter repParam) {
    bool ret = DCMTKPINVOKE.DcmPixelData_canChooseRepresentation(swigCPtr, (int)repType, DcmRepresentationParameter.getCPtr(repParam));
    return ret;
  }

  public OFCondition chooseRepresentation(E_TransferSyntax repType, DcmRepresentationParameter repParam, SWIGTYPE_p_DcmStack stack) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_chooseRepresentation(swigCPtr, (int)repType, DcmRepresentationParameter.getCPtr(repParam), SWIGTYPE_p_DcmStack.getCPtr(stack)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void putOriginalRepresentation(E_TransferSyntax repType, DcmRepresentationParameter repParam, DcmPixelSequence pixSeq) {
    DCMTKPINVOKE.DcmPixelData_putOriginalRepresentation(swigCPtr, (int)repType, DcmRepresentationParameter.getCPtr(repParam), DcmPixelSequence.getCPtr(pixSeq));
  }

  public virtual OFCondition putUint8Array(byte[] byteValue, uint length) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_putUint8Array(swigCPtr, byteValue, length), true);
    return ret;
  }

  public virtual OFCondition putUint16Array(ushort[] wordValue, uint length) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_putUint16Array(swigCPtr, wordValue, length), true);
    return ret;
  }

  public virtual OFCondition createUint8Array(uint numBytes, ref IntPtr bytes) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_createUint8Array(swigCPtr, numBytes, ref bytes), true);
    return ret;
  }

  public virtual OFCondition createUint16Array(uint numWords, ref IntPtr words) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_createUint16Array(swigCPtr, numWords, ref words), true);
    return ret;
  }

  public OFCondition getEncapsulatedRepresentation(E_TransferSyntax repType, DcmRepresentationParameter repParam, SWIGTYPE_p_p_DcmPixelSequence pixSeq) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_getEncapsulatedRepresentation(swigCPtr, (int)repType, DcmRepresentationParameter.getCPtr(repParam), SWIGTYPE_p_p_DcmPixelSequence.getCPtr(pixSeq)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OFCondition setCurrentRepresentationParameter(DcmRepresentationParameter repParam) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_setCurrentRepresentationParameter(swigCPtr, DcmRepresentationParameter.getCPtr(repParam)), true);
    return ret;
  }

  public bool hasRepresentation(E_TransferSyntax repType, DcmRepresentationParameter repParam) {
    bool ret = DCMTKPINVOKE.DcmPixelData_hasRepresentation__SWIG_0(swigCPtr, (int)repType, DcmRepresentationParameter.getCPtr(repParam));
    return ret;
  }

  public bool hasRepresentation(E_TransferSyntax repType) {
    bool ret = DCMTKPINVOKE.DcmPixelData_hasRepresentation__SWIG_1(swigCPtr, (int)repType);
    return ret;
  }

  public OFCondition removeRepresentation(E_TransferSyntax repType, DcmRepresentationParameter repParam) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_removeRepresentation(swigCPtr, (int)repType, DcmRepresentationParameter.getCPtr(repParam)), true);
    return ret;
  }

  public void removeAllButOriginalRepresentations() {
    DCMTKPINVOKE.DcmPixelData_removeAllButOriginalRepresentations(swigCPtr);
  }

  public void removeAllButCurrentRepresentations() {
    DCMTKPINVOKE.DcmPixelData_removeAllButCurrentRepresentations(swigCPtr);
  }

  public OFCondition removeOriginalRepresentation(E_TransferSyntax repType, DcmRepresentationParameter repParam) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmPixelData_removeOriginalRepresentation(swigCPtr, (int)repType, DcmRepresentationParameter.getCPtr(repParam)), true);
    return ret;
  }

}

}
