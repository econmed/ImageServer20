/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;

public class DcmDateTime : DcmByteString {
  private IntPtr swigCPtr;

  internal DcmDateTime(IntPtr cPtr, bool cMemoryOwn) : base(DCMTKPINVOKE.DcmDateTimeUpcast(cPtr), cMemoryOwn) {
    swigCPtr = cPtr;
  }

  internal static IntPtr getCPtr(DcmDateTime obj) {
    return (obj == null) ? IntPtr.Zero : obj.swigCPtr;
  }

  protected DcmDateTime() : this(IntPtr.Zero, false) {
  }

  ~DcmDateTime() {
    Dispose();
  }

  public override void Dispose() {
    if(swigCPtr != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmDateTime(swigCPtr);
    }
    swigCPtr = IntPtr.Zero;
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  public DcmDateTime(DcmTag tag, uint len) : this(DCMTKPINVOKE.new_DcmDateTime__SWIG_0(DcmTag.getCPtr(tag), len), true) {
  }

  public DcmDateTime(DcmTag tag) : this(DCMTKPINVOKE.new_DcmDateTime__SWIG_1(DcmTag.getCPtr(tag)), true) {
  }

  public DcmDateTime(DcmDateTime old) : this(DCMTKPINVOKE.new_DcmDateTime__SWIG_2(DcmDateTime.getCPtr(old)), true) {
  }

  public override DcmEVR ident() {
    return (DcmEVR)DCMTKPINVOKE.DcmDateTime_ident(swigCPtr);
  }

  public override OFCondition getOFString(StringBuilder stringValue, uint pos, bool normalize) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getOFString__SWIG_0(swigCPtr, stringValue, pos, normalize), true);
  }

  public override OFCondition getOFString(StringBuilder stringValue, uint pos) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getOFString__SWIG_1(swigCPtr, stringValue, pos), true);
  }

  public OFCondition setCurrentDateTime(bool seconds, bool fraction, bool timeZone) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_setCurrentDateTime__SWIG_0(swigCPtr, seconds, fraction, timeZone), true);
  }

  public OFCondition setCurrentDateTime(bool seconds, bool fraction) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_setCurrentDateTime__SWIG_1(swigCPtr, seconds, fraction), true);
  }

  public OFCondition setCurrentDateTime(bool seconds) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_setCurrentDateTime__SWIG_2(swigCPtr, seconds), true);
  }

  public OFCondition setCurrentDateTime() {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_setCurrentDateTime__SWIG_3(swigCPtr), true);
  }

  public OFCondition setOFDateTime(OFDateTime dateTimeValue) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_setOFDateTime(swigCPtr, OFDateTime.getCPtr(dateTimeValue)), true);
  }

  public OFCondition getOFDateTime(OFDateTime dateTimeValue, uint pos) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getOFDateTime__SWIG_0(swigCPtr, OFDateTime.getCPtr(dateTimeValue), pos), true);
  }

  public OFCondition getOFDateTime(OFDateTime dateTimeValue) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getOFDateTime__SWIG_1(swigCPtr, OFDateTime.getCPtr(dateTimeValue)), true);
  }

  public OFCondition getISOFormattedDateTime(StringBuilder formattedDateTime, uint pos, bool seconds, bool fraction, bool timeZone, bool createMissingPart) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTime__SWIG_0(swigCPtr, formattedDateTime, pos, seconds, fraction, timeZone, createMissingPart), true);
  }

  public OFCondition getISOFormattedDateTime(StringBuilder formattedDateTime, uint pos, bool seconds, bool fraction, bool timeZone) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTime__SWIG_1(swigCPtr, formattedDateTime, pos, seconds, fraction, timeZone), true);
  }

  public OFCondition getISOFormattedDateTime(StringBuilder formattedDateTime, uint pos, bool seconds, bool fraction) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTime__SWIG_2(swigCPtr, formattedDateTime, pos, seconds, fraction), true);
  }

  public OFCondition getISOFormattedDateTime(StringBuilder formattedDateTime, uint pos, bool seconds) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTime__SWIG_3(swigCPtr, formattedDateTime, pos, seconds), true);
  }

  public OFCondition getISOFormattedDateTime(StringBuilder formattedDateTime, uint pos) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTime__SWIG_4(swigCPtr, formattedDateTime, pos), true);
  }

  public OFCondition getISOFormattedDateTime(StringBuilder formattedDateTime) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTime__SWIG_5(swigCPtr, formattedDateTime), true);
  }

  public OFCondition getISOFormattedDateTime(StringBuilder formattedDateTime, uint pos, bool seconds, bool fraction, bool timeZone, bool createMissingPart, string dateTimeSeparator) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTime__SWIG_6(swigCPtr, formattedDateTime, pos, seconds, fraction, timeZone, createMissingPart, dateTimeSeparator), true);
  }

  public static OFCondition getCurrentDateTime(StringBuilder dicomDateTime, bool seconds, bool fraction, bool timeZone) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getCurrentDateTime__SWIG_0(dicomDateTime, seconds, fraction, timeZone), true);
  }

  public static OFCondition getCurrentDateTime(StringBuilder dicomDateTime, bool seconds, bool fraction) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getCurrentDateTime__SWIG_1(dicomDateTime, seconds, fraction), true);
  }

  public static OFCondition getCurrentDateTime(StringBuilder dicomDateTime, bool seconds) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getCurrentDateTime__SWIG_2(dicomDateTime, seconds), true);
  }

  public static OFCondition getCurrentDateTime(StringBuilder dicomDateTime) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getCurrentDateTime__SWIG_3(dicomDateTime), true);
  }

  public static OFCondition getDicomDateTimeFromOFDateTime(OFDateTime dateTimeValue, StringBuilder dicomDateTime, bool seconds, bool fraction, bool timeZone) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getDicomDateTimeFromOFDateTime__SWIG_0(OFDateTime.getCPtr(dateTimeValue), dicomDateTime, seconds, fraction, timeZone), true);
  }

  public static OFCondition getDicomDateTimeFromOFDateTime(OFDateTime dateTimeValue, StringBuilder dicomDateTime, bool seconds, bool fraction) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getDicomDateTimeFromOFDateTime__SWIG_1(OFDateTime.getCPtr(dateTimeValue), dicomDateTime, seconds, fraction), true);
  }

  public static OFCondition getDicomDateTimeFromOFDateTime(OFDateTime dateTimeValue, StringBuilder dicomDateTime, bool seconds) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getDicomDateTimeFromOFDateTime__SWIG_2(OFDateTime.getCPtr(dateTimeValue), dicomDateTime, seconds), true);
  }

  public static OFCondition getDicomDateTimeFromOFDateTime(OFDateTime dateTimeValue, StringBuilder dicomDateTime) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getDicomDateTimeFromOFDateTime__SWIG_3(OFDateTime.getCPtr(dateTimeValue), dicomDateTime), true);
  }

  public static OFCondition getOFDateTimeFromString(string dicomDateTime, OFDateTime dateTimeValue) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getOFDateTimeFromString(dicomDateTime, OFDateTime.getCPtr(dateTimeValue)), true);
  }

  public static OFCondition getISOFormattedDateTimeFromString(string dicomDateTime, StringBuilder formattedDateTime, bool seconds, bool fraction, bool timeZone, bool createMissingPart) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTimeFromString__SWIG_0(dicomDateTime, formattedDateTime, seconds, fraction, timeZone, createMissingPart), true);
  }

  public static OFCondition getISOFormattedDateTimeFromString(string dicomDateTime, StringBuilder formattedDateTime, bool seconds, bool fraction, bool timeZone) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTimeFromString__SWIG_1(dicomDateTime, formattedDateTime, seconds, fraction, timeZone), true);
  }

  public static OFCondition getISOFormattedDateTimeFromString(string dicomDateTime, StringBuilder formattedDateTime, bool seconds, bool fraction) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTimeFromString__SWIG_2(dicomDateTime, formattedDateTime, seconds, fraction), true);
  }

  public static OFCondition getISOFormattedDateTimeFromString(string dicomDateTime, StringBuilder formattedDateTime, bool seconds) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTimeFromString__SWIG_3(dicomDateTime, formattedDateTime, seconds), true);
  }

  public static OFCondition getISOFormattedDateTimeFromString(string dicomDateTime, StringBuilder formattedDateTime) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTimeFromString__SWIG_4(dicomDateTime, formattedDateTime), true);
  }

  public static OFCondition getISOFormattedDateTimeFromString(string dicomDateTime, StringBuilder formattedDateTime, bool seconds, bool fraction, bool timeZone, bool createMissingPart, string dateTimeSeparator) {
    return new OFCondition(DCMTKPINVOKE.DcmDateTime_getISOFormattedDateTimeFromString__SWIG_5(dicomDateTime, formattedDateTime, seconds, fraction, timeZone, createMissingPart, dateTimeSeparator), true);
  }

}

}
