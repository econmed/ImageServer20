/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;

public class DcmPixelSequence : DcmSequenceOfItems {
  private IntPtr swigCPtr;

  internal DcmPixelSequence(IntPtr cPtr, bool cMemoryOwn) : base(DCMTKPINVOKE.DcmPixelSequenceUpcast(cPtr), cMemoryOwn) {
    swigCPtr = cPtr;
  }

  internal static IntPtr getCPtr(DcmPixelSequence obj) {
    return (obj == null) ? IntPtr.Zero : obj.swigCPtr;
  }

  protected DcmPixelSequence() : this(IntPtr.Zero, false) {
  }

  ~DcmPixelSequence() {
    Dispose();
  }

  public override void Dispose() {
    if(swigCPtr != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmPixelSequence(swigCPtr);
    }
    swigCPtr = IntPtr.Zero;
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  public DcmPixelSequence(DcmTag tag, uint len) : this(DCMTKPINVOKE.new_DcmPixelSequence__SWIG_0(DcmTag.getCPtr(tag), len), true) {
  }

  public DcmPixelSequence(DcmTag tag) : this(DCMTKPINVOKE.new_DcmPixelSequence__SWIG_1(DcmTag.getCPtr(tag)), true) {
  }

  public DcmPixelSequence(DcmPixelSequence old) : this(DCMTKPINVOKE.new_DcmPixelSequence__SWIG_2(DcmPixelSequence.getCPtr(old)), true) {
  }

  public override DcmEVR ident() {
    return (DcmEVR)DCMTKPINVOKE.DcmPixelSequence_ident(swigCPtr);
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName, SWIGTYPE_p_size_t pixelCounter) {
    DCMTKPINVOKE.DcmPixelSequence_print__SWIG_0(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName, SWIGTYPE_p_size_t.getCPtr(pixelCounter));
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level, string pixelFileName) {
    DCMTKPINVOKE.DcmPixelSequence_print__SWIG_1(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level, pixelFileName);
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags, int level) {
    DCMTKPINVOKE.DcmPixelSequence_print__SWIG_2(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags, level);
  }

  public override void print(SWIGTYPE_p_ostream outStream, uint flags) {
    DCMTKPINVOKE.DcmPixelSequence_print__SWIG_3(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream), flags);
  }

  public override void print(SWIGTYPE_p_ostream outStream) {
    DCMTKPINVOKE.DcmPixelSequence_print__SWIG_4(swigCPtr, SWIGTYPE_p_ostream.getCPtr(outStream));
  }

  public override uint calcElementLength(E_TransferSyntax xfer, E_EncodingType enctype) {
    return DCMTKPINVOKE.DcmPixelSequence_calcElementLength(swigCPtr, (int)xfer, (int)enctype);
  }

  public virtual OFCondition insert(SWIGTYPE_p_DcmPixelItem item, uint where) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_insert__SWIG_0(swigCPtr, SWIGTYPE_p_DcmPixelItem.getCPtr(item), where), true);
  }

  public virtual OFCondition insert(SWIGTYPE_p_DcmPixelItem item) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_insert__SWIG_1(swigCPtr, SWIGTYPE_p_DcmPixelItem.getCPtr(item)), true);
  }

  public virtual OFCondition getItem(SWIGTYPE_p_p_DcmPixelItem item, uint num) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_getItem(swigCPtr, SWIGTYPE_p_p_DcmPixelItem.getCPtr(item), num), true);
  }

  public virtual OFCondition remove(SWIGTYPE_p_p_DcmPixelItem item, uint num) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_remove__SWIG_0(swigCPtr, SWIGTYPE_p_p_DcmPixelItem.getCPtr(item), num), true);
  }

  public virtual OFCondition remove(SWIGTYPE_p_DcmPixelItem item) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_remove__SWIG_1(swigCPtr, SWIGTYPE_p_DcmPixelItem.getCPtr(item)), true);
  }

  public OFCondition changeXfer(E_TransferSyntax newXfer) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_changeXfer(swigCPtr, (int)newXfer), true);
  }

  public override bool canWriteXfer(E_TransferSyntax newXfer, E_TransferSyntax oldXfer) {
    return DCMTKPINVOKE.DcmPixelSequence_canWriteXfer(swigCPtr, (int)newXfer, (int)oldXfer);
  }

  public override OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer, E_GrpLenEncoding glenc, uint maxReadLength) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_read__SWIG_0(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer, (int)glenc, maxReadLength), true);
  }

  public override OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer, E_GrpLenEncoding glenc) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_read__SWIG_1(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer, (int)glenc), true);
  }

  public override OFCondition read(DcmInputStream inStream, E_TransferSyntax ixfer) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_read__SWIG_2(swigCPtr, DcmInputStream.getCPtr(inStream), (int)ixfer), true);
  }

  public override OFCondition write(DcmOutputStream outStream, E_TransferSyntax oxfer, E_EncodingType arg2) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_write(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer, (int)arg2), true);
  }

  public override OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax oxfer, E_EncodingType enctype) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_writeSignatureFormat__SWIG_0(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer, (int)enctype), true);
  }

  public override OFCondition writeSignatureFormat(DcmOutputStream outStream, E_TransferSyntax oxfer) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_writeSignatureFormat__SWIG_1(swigCPtr, DcmOutputStream.getCPtr(outStream), (int)oxfer), true);
  }

  public virtual OFCondition storeCompressedFrame(SWIGTYPE_p_DcmOffsetList offsetList, byte[] compressedData, uint compressedLen, uint fragmentSize) {
    return new OFCondition(DCMTKPINVOKE.DcmPixelSequence_storeCompressedFrame(swigCPtr, SWIGTYPE_p_DcmOffsetList.getCPtr(offsetList), compressedData, compressedLen, fragmentSize), true);
  }

}

}
