/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class DcmAssociationConfiguration : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DcmAssociationConfiguration(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DcmAssociationConfiguration obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DcmAssociationConfiguration() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmAssociationConfiguration(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public DcmAssociationConfiguration() : this(DCMTKPINVOKE.new_DcmAssociationConfiguration(), true) {
  }

  public OFCondition setAssociationParameters(string profile, T_ASC_Parameters parameters) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmAssociationConfiguration_setAssociationParameters(swigCPtr, profile, T_ASC_Parameters.getCPtr(parameters)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OFCondition evaluateAssociationParameters(string profile, T_ASC_Association assoc) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmAssociationConfiguration_evaluateAssociationParameters(swigCPtr, profile, T_ASC_Association.getCPtr(assoc)), true);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OFCondition addTransferSyntax(string key, string transferSyntaxUID) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmAssociationConfiguration_addTransferSyntax(swigCPtr, key, transferSyntaxUID), true);
    return ret;
  }

  public OFCondition addPresentationContext(string key, string abstractSyntaxUID, string transferSyntaxKey) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmAssociationConfiguration_addPresentationContext(swigCPtr, key, abstractSyntaxUID, transferSyntaxKey), true);
    return ret;
  }

  public OFCondition addRole(string key, string abstractSyntaxUID, T_ASC_SC_ROLE role) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmAssociationConfiguration_addRole(swigCPtr, key, abstractSyntaxUID, (int)role), true);
    return ret;
  }

  public OFCondition addExtendedNegotiation(string key, string abstractSyntaxUID, SWIGTYPE_p_unsigned_char rawData, uint length) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmAssociationConfiguration_addExtendedNegotiation(swigCPtr, key, abstractSyntaxUID, SWIGTYPE_p_unsigned_char.getCPtr(rawData), length), true);
    return ret;
  }

  public OFCondition addProfile(string key, string presentationContextKey, string roleSelectionKey, string extendedNegotiationKey) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmAssociationConfiguration_addProfile__SWIG_0(swigCPtr, key, presentationContextKey, roleSelectionKey, extendedNegotiationKey), true);
    return ret;
  }

  public OFCondition addProfile(string key, string presentationContextKey, string roleSelectionKey) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmAssociationConfiguration_addProfile__SWIG_1(swigCPtr, key, presentationContextKey, roleSelectionKey), true);
    return ret;
  }

  public OFCondition addProfile(string key, string presentationContextKey) {
    OFCondition ret = new OFCondition(DCMTKPINVOKE.DcmAssociationConfiguration_addProfile__SWIG_2(swigCPtr, key, presentationContextKey), true);
    return ret;
  }

  public bool isKnownProfile(string key) {
    bool ret = DCMTKPINVOKE.DcmAssociationConfiguration_isKnownProfile(swigCPtr, key);
    return ret;
  }

  public bool isValidSCPProfile(string key) {
    bool ret = DCMTKPINVOKE.DcmAssociationConfiguration_isValidSCPProfile(swigCPtr, key);
    return ret;
  }

}

}
