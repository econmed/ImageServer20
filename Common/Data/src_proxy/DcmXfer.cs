/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class DcmXfer : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DcmXfer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DcmXfer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DcmXfer() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_DcmXfer(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public DcmXfer(E_TransferSyntax xfer) : this(DCMTKPINVOKE.new_DcmXfer__SWIG_0((int)xfer), true) {
  }

  public DcmXfer(string xferName_xferID) : this(DCMTKPINVOKE.new_DcmXfer__SWIG_1(xferName_xferID), true) {
  }

  public DcmXfer(DcmXfer newXfer) : this(DCMTKPINVOKE.new_DcmXfer__SWIG_2(DcmXfer.getCPtr(newXfer)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public E_TransferSyntax getXfer() {
    E_TransferSyntax ret = (E_TransferSyntax)DCMTKPINVOKE.DcmXfer_getXfer(swigCPtr);
    return ret;
  }

  public E_ByteOrder getByteOrder() {
    E_ByteOrder ret = (E_ByteOrder)DCMTKPINVOKE.DcmXfer_getByteOrder(swigCPtr);
    return ret;
  }

  public string getXferName() {
    string ret = DCMTKPINVOKE.DcmXfer_getXferName(swigCPtr);
    return ret;
  }

  public string getXferID() {
    string ret = DCMTKPINVOKE.DcmXfer_getXferID(swigCPtr);
    return ret;
  }

  public bool isLittleEndian() {
    bool ret = DCMTKPINVOKE.DcmXfer_isLittleEndian(swigCPtr);
    return ret;
  }

  public bool isBigEndian() {
    bool ret = DCMTKPINVOKE.DcmXfer_isBigEndian(swigCPtr);
    return ret;
  }

  public bool isImplicitVR() {
    bool ret = DCMTKPINVOKE.DcmXfer_isImplicitVR(swigCPtr);
    return ret;
  }

  public bool isExplicitVR() {
    bool ret = DCMTKPINVOKE.DcmXfer_isExplicitVR(swigCPtr);
    return ret;
  }

  public bool isEncapsulated() {
    bool ret = DCMTKPINVOKE.DcmXfer_isEncapsulated(swigCPtr);
    return ret;
  }

  public bool isNotEncapsulated() {
    bool ret = DCMTKPINVOKE.DcmXfer_isNotEncapsulated(swigCPtr);
    return ret;
  }

  public uint getJPEGProcess8Bit() {
    uint ret = DCMTKPINVOKE.DcmXfer_getJPEGProcess8Bit(swigCPtr);
    return ret;
  }

  public uint getJPEGProcess12Bit() {
    uint ret = DCMTKPINVOKE.DcmXfer_getJPEGProcess12Bit(swigCPtr);
    return ret;
  }

  public E_StreamCompression getStreamCompression() {
    E_StreamCompression ret = (E_StreamCompression)DCMTKPINVOKE.DcmXfer_getStreamCompression(swigCPtr);
    return ret;
  }

  public uint sizeofTagHeader(DcmEVR evr) {
    uint ret = DCMTKPINVOKE.DcmXfer_sizeofTagHeader(swigCPtr, (int)evr);
    return ret;
  }

}

}
