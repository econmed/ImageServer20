/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class OFListBase : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OFListBase(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(OFListBase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~OFListBase() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_OFListBase(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public OFListBase() : this(DCMTKPINVOKE.new_OFListBase(), true) {
  }

  public OFListLinkBase base_begin() {
    IntPtr cPtr = DCMTKPINVOKE.OFListBase_base_begin(swigCPtr);
    OFListLinkBase ret = (cPtr == IntPtr.Zero) ? null : new OFListLinkBase(cPtr, false);
    return ret;
  }

  public OFListLinkBase base_end() {
    IntPtr cPtr = DCMTKPINVOKE.OFListBase_base_end(swigCPtr);
    OFListLinkBase ret = (cPtr == IntPtr.Zero) ? null : new OFListLinkBase(cPtr, false);
    return ret;
  }

  public bool base_empty() {
    bool ret = DCMTKPINVOKE.OFListBase_base_empty(swigCPtr);
    return ret;
  }

  public uint base_size() {
    uint ret = DCMTKPINVOKE.OFListBase_base_size(swigCPtr);
    return ret;
  }

  public OFListLinkBase base_insert(OFListLinkBase pos, OFListLinkBase newElem) {
    IntPtr cPtr = DCMTKPINVOKE.OFListBase_base_insert(swigCPtr, OFListLinkBase.getCPtr(pos), OFListLinkBase.getCPtr(newElem));
    OFListLinkBase ret = (cPtr == IntPtr.Zero) ? null : new OFListLinkBase(cPtr, false);
    return ret;
  }

  public OFListLinkBase base_erase(OFListLinkBase pos) {
    IntPtr cPtr = DCMTKPINVOKE.OFListBase_base_erase(swigCPtr, OFListLinkBase.getCPtr(pos));
    OFListLinkBase ret = (cPtr == IntPtr.Zero) ? null : new OFListLinkBase(cPtr, false);
    return ret;
  }

  public void base_splice(OFListLinkBase pos, OFListLinkBase begin, OFListLinkBase end) {
    DCMTKPINVOKE.OFListBase_base_splice(swigCPtr, OFListLinkBase.getCPtr(pos), OFListLinkBase.getCPtr(begin), OFListLinkBase.getCPtr(end));
  }

  public void base_clear() {
    DCMTKPINVOKE.OFListBase_base_clear(swigCPtr);
  }

}

}
