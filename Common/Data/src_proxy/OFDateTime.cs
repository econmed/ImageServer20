/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ClearCanvas.Common.Dicom {

using System;
using System.Text;
using System.Runtime.InteropServices;

public class OFDateTime : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OFDateTime(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(OFDateTime obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~OFDateTime() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      DCMTKPINVOKE.delete_OFDateTime(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public OFDateTime() : this(DCMTKPINVOKE.new_OFDateTime__SWIG_0(), true) {
  }

  public OFDateTime(OFDateTime dateTime) : this(DCMTKPINVOKE.new_OFDateTime__SWIG_1(OFDateTime.getCPtr(dateTime)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public OFDateTime(OFDate dateVal, OFTime timeVal) : this(DCMTKPINVOKE.new_OFDateTime__SWIG_2(OFDate.getCPtr(dateVal), OFTime.getCPtr(timeVal)), true) {
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clear() {
    DCMTKPINVOKE.OFDateTime_clear(swigCPtr);
  }

  public virtual bool isValid() {
    bool ret = DCMTKPINVOKE.OFDateTime_isValid(swigCPtr);
    return ret;
  }

  public bool setDateTime(uint year, uint month, uint day, uint hour, uint minute, double second, double timeZone) {
    bool ret = DCMTKPINVOKE.OFDateTime_setDateTime__SWIG_0(swigCPtr, year, month, day, hour, minute, second, timeZone);
    return ret;
  }

  public bool setDateTime(uint year, uint month, uint day, uint hour, uint minute, double second) {
    bool ret = DCMTKPINVOKE.OFDateTime_setDateTime__SWIG_1(swigCPtr, year, month, day, hour, minute, second);
    return ret;
  }

  public bool setDate(OFDate dateVal) {
    bool ret = DCMTKPINVOKE.OFDateTime_setDate(swigCPtr, OFDate.getCPtr(dateVal));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setTime(OFTime timeVal) {
    bool ret = DCMTKPINVOKE.OFDateTime_setTime(swigCPtr, OFTime.getCPtr(timeVal));
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setCurrentDateTime() {
    bool ret = DCMTKPINVOKE.OFDateTime_setCurrentDateTime(swigCPtr);
    return ret;
  }

  public bool setISOFormattedDateTime(string formattedDateTime) {
    bool ret = DCMTKPINVOKE.OFDateTime_setISOFormattedDateTime(swigCPtr, formattedDateTime);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OFDate getDate() {
    OFDate ret = new OFDate(DCMTKPINVOKE.OFDateTime_getDate(swigCPtr), false);
    return ret;
  }

  public OFTime getTime() {
    OFTime ret = new OFTime(DCMTKPINVOKE.OFDateTime_getTime(swigCPtr), false);
    return ret;
  }

  public bool getISOFormattedDateTime(StringBuilder formattedDateTime, bool showSeconds, bool showFraction, bool showTimeZone, bool showDelimiter) {
    bool ret = DCMTKPINVOKE.OFDateTime_getISOFormattedDateTime__SWIG_0(swigCPtr, formattedDateTime, showSeconds, showFraction, showTimeZone, showDelimiter);
    return ret;
  }

  public bool getISOFormattedDateTime(StringBuilder formattedDateTime, bool showSeconds, bool showFraction, bool showTimeZone) {
    bool ret = DCMTKPINVOKE.OFDateTime_getISOFormattedDateTime__SWIG_1(swigCPtr, formattedDateTime, showSeconds, showFraction, showTimeZone);
    return ret;
  }

  public bool getISOFormattedDateTime(StringBuilder formattedDateTime, bool showSeconds, bool showFraction) {
    bool ret = DCMTKPINVOKE.OFDateTime_getISOFormattedDateTime__SWIG_2(swigCPtr, formattedDateTime, showSeconds, showFraction);
    return ret;
  }

  public bool getISOFormattedDateTime(StringBuilder formattedDateTime, bool showSeconds) {
    bool ret = DCMTKPINVOKE.OFDateTime_getISOFormattedDateTime__SWIG_3(swigCPtr, formattedDateTime, showSeconds);
    return ret;
  }

  public bool getISOFormattedDateTime(StringBuilder formattedDateTime) {
    bool ret = DCMTKPINVOKE.OFDateTime_getISOFormattedDateTime__SWIG_4(swigCPtr, formattedDateTime);
    return ret;
  }

  public bool getISOFormattedDateTime(StringBuilder formattedDateTime, bool showSeconds, bool showFraction, bool showTimeZone, bool showDelimiter, string dateTimeSeparator) {
    bool ret = DCMTKPINVOKE.OFDateTime_getISOFormattedDateTime__SWIG_5(swigCPtr, formattedDateTime, showSeconds, showFraction, showTimeZone, showDelimiter, dateTimeSeparator);
    if (DCMTKPINVOKE.SWIGPendingException.Pending) throw DCMTKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OFDateTime getCurrentDateTime() {
    OFDateTime ret = new OFDateTime(DCMTKPINVOKE.OFDateTime_getCurrentDateTime(), true);
    return ret;
  }

}

}
