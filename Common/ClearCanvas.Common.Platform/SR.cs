// WARNING:
// This file was generated by the Microsoft DataWarehouse String Resource Tool 0.0.0.0
// from information in SR.strings.
// DO NOT MODIFY THIS FILE'S CONTENTS, THEY WILL BE OVERWRITTEN
// 
namespace ClearCanvas.Common.Platform
{
	using System;
	using System.Resources;
	using System.Globalization;
	
	
	public class SR
	{
		
		public static CultureInfo Culture
		{
			get
			{
				return Keys.Culture;
			}
			set
			{
				Keys.Culture = value;
			}
		}
		
		public static string ExceptionMoreThanOneModelPluginFound
		{
			get
			{
				return Keys.GetString(Keys.ExceptionMoreThanOneModelPluginFound);
			}
		}
		
		public static string ExceptionPluginDirectoryNotFound
		{
			get
			{
				return Keys.GetString(Keys.ExceptionPluginDirectoryNotFound);
			}
		}
		
		public static string ExceptionNoPluginsFound
		{
			get
			{
				return Keys.GetString(Keys.ExceptionNoPluginsFound);
			}
		}
		
		public static string ExceptionPluginWarning
		{
			get
			{
				return Keys.GetString(Keys.ExceptionPluginWarning);
			}
		}
		
		public static string ExceptionUnableToLoadPlugins
		{
			get
			{
				return Keys.GetString(Keys.ExceptionUnableToLoadPlugins);
			}
		}
		
		public static string ExceptionArgumentNotPositive
		{
			get
			{
				return Keys.GetString(Keys.ExceptionArgumentNotPositive);
			}
		}
		
		public static string ExceptionArgumentNegative
		{
			get
			{
				return Keys.GetString(Keys.ExceptionArgumentNegative);
			}
		}
		
		public static string ExceptionPathDoesNotExist(string path)
		{
			return Keys.GetString(Keys.ExceptionPathDoesNotExist, path);
		}
		
		public static string ExceptionNotAPlugin(string path)
		{
			return Keys.GetString(Keys.ExceptionNotAPlugin, path);
		}
		
		public static string ExceptionDuplicatePluginFound(string name)
		{
			return Keys.GetString(Keys.ExceptionDuplicatePluginFound, name);
		}
		
		public static string ExceptionPluginCouldNotBeFound(string name)
		{
			return Keys.GetString(Keys.ExceptionPluginCouldNotBeFound, name);
		}
		
		public static string ExceptionInvalidCast(string variableName, string properTypeName)
		{
			return Keys.GetString(Keys.ExceptionInvalidCast, variableName, properTypeName);
		}
		
		public static string ExceptionArgumentOutOfRange(int argumentValue, int min, int max, string variableName)
		{
			return Keys.GetString(Keys.ExceptionArgumentOutOfRange, argumentValue, min, max, variableName);
		}
		
		public static string ExceptionIndexOutOfRange(int index, int min, int max, string className)
		{
			return Keys.GetString(Keys.ExceptionIndexOutOfRange, index, min, max, className);
		}
		
		public static string ExceptionMemberNotSet(string variableName)
		{
			return Keys.GetString(Keys.ExceptionMemberNotSet, variableName);
		}
		
		public class Keys
		{
			
			static ResourceManager resourceManager = new ResourceManager(typeof(SR).FullName, typeof(SR).Module.Assembly);
			
			static CultureInfo _culture = null;
			
			public const string ExceptionPathDoesNotExist = "ExceptionPathDoesNotExist";
			
			public const string ExceptionNotAPlugin = "ExceptionNotAPlugin";
			
			public const string ExceptionDuplicatePluginFound = "ExceptionDuplicatePluginFound";
			
			public const string ExceptionMoreThanOneModelPluginFound = "ExceptionMoreThanOneModelPluginFound";
			
			public const string ExceptionPluginDirectoryNotFound = "ExceptionPluginDirectoryNotFound";
			
			public const string ExceptionNoPluginsFound = "ExceptionNoPluginsFound";
			
			public const string ExceptionPluginWarning = "ExceptionPluginWarning";
			
			public const string ExceptionUnableToLoadPlugins = "ExceptionUnableToLoadPlugins";
			
			public const string ExceptionPluginCouldNotBeFound = "ExceptionPluginCouldNotBeFound";
			
			public const string ExceptionInvalidCast = "ExceptionInvalidCast";
			
			public const string ExceptionArgumentNotPositive = "ExceptionArgumentNotPositive";
			
			public const string ExceptionArgumentNegative = "ExceptionArgumentNegative";
			
			public const string ExceptionArgumentOutOfRange = "ExceptionArgumentOutOfRange";
			
			public const string ExceptionIndexOutOfRange = "ExceptionIndexOutOfRange";
			
			public const string ExceptionMemberNotSet = "ExceptionMemberNotSet";
			
			public static CultureInfo Culture
			{
				get
				{
					return _culture;
				}
				set
				{
					_culture = value;
				}
			}
			
			public static string GetString(string key)
			{
				return resourceManager.GetString(key, _culture);
			}
			
			public static string GetString(string key, object arg0)
			{
				return string.Format(System.Globalization.CultureInfo.CurrentCulture, resourceManager.GetString(key, _culture), arg0);
			}
			
			public static string GetString(string key, object arg0, object arg1)
			{
				return string.Format(System.Globalization.CultureInfo.CurrentCulture, resourceManager.GetString(key, _culture), arg0, arg1);
			}
			
			public static string GetString(string key, object arg0, object arg1, object arg2, object arg3)
			{
				return string.Format(System.Globalization.CultureInfo.CurrentCulture, resourceManager.GetString(key, _culture), arg0, arg1, arg2, arg3);
			}
		}
	}
}
