//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClearCanvas.Common {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class SR {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SR() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ClearCanvas.Common.SR", typeof(SR).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value must be non-negative..
        /// </summary>
        public static string ExceptionArgumentNegative {
            get {
                return ResourceManager.GetString("ExceptionArgumentNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value must be greater than zero..
        /// </summary>
        public static string ExceptionArgumentNotPositive {
            get {
                return ResourceManager.GetString("ExceptionArgumentNotPositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {3} = {0} is invalid. {3} must be &gt;= {1} and &lt;= {2}..
        /// </summary>
        public static string ExceptionArgumentOutOfRange {
            get {
                return ResourceManager.GetString("ExceptionArgumentOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate plugin {0} found..
        /// </summary>
        public static string ExceptionDuplicatePluginFound {
            get {
                return ResourceManager.GetString("ExceptionDuplicatePluginFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} cannot be empty..
        /// </summary>
        public static string ExceptionEmptyString {
            get {
                return ResourceManager.GetString("ExceptionEmptyString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected type {0}..
        /// </summary>
        public static string ExceptionExpectedType {
            get {
                return ResourceManager.GetString("ExceptionExpectedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension class {0} does not implement required interface {1}..
        /// </summary>
        public static string ExceptionExtensionDoesNotImplementRequiredInterface {
            get {
                return ResourceManager.GetString("ExceptionExtensionDoesNotImplementRequiredInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension class {0} must be a concrete class..
        /// </summary>
        public static string ExceptionExtensionMustBeConcreteClass {
            get {
                return ResourceManager.GetString("ExceptionExtensionMustBeConcreteClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We&apos;re sorry, but an error has occurred that ClearCanvas Workstation cannot recover from.  Please check the log and restart..
        /// </summary>
        public static string ExceptionFatalApplicationError {
            get {
                return ResourceManager.GetString("ExceptionFatalApplicationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {3}[{0}] is invalid.  Index must be &gt;= {1} and &lt;= {2}..
        /// </summary>
        public static string ExceptionIndexOutOfRange {
            get {
                return ResourceManager.GetString("ExceptionIndexOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must be of type {1}..
        /// </summary>
        public static string ExceptionInvalidCast {
            get {
                return ResourceManager.GetString("ExceptionInvalidCast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has not been set.  Object state is invalid..
        /// </summary>
        public static string ExceptionMemberNotSet {
            get {
                return ResourceManager.GetString("ExceptionMemberNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has not been set.  {1}.
        /// </summary>
        public static string ExceptionMemberNotSetVerbose {
            get {
                return ResourceManager.GetString("ExceptionMemberNotSetVerbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one model plugin found..
        /// </summary>
        public static string ExceptionMoreThanOneModelPluginFound {
            get {
                return ResourceManager.GetString("ExceptionMoreThanOneModelPluginFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No extensions found for extension point {0}, or the extensions could not be instantiated.  See log file..
        /// </summary>
        public static string ExceptionNoExtensionsCreated {
            get {
                return ResourceManager.GetString("ExceptionNoExtensionsCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No plugins could be found..
        /// </summary>
        public static string ExceptionNoPluginsFound {
            get {
                return ResourceManager.GetString("ExceptionNoPluginsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No plugins have been loaded..
        /// </summary>
        public static string ExceptionNoPluginsLoaded {
            get {
                return ResourceManager.GetString("ExceptionNoPluginsLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly {0} is not a plugin..
        /// </summary>
        public static string ExceptionNotAPlugin {
            get {
                return ResourceManager.GetString("ExceptionNotAPlugin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} does not exist..
        /// </summary>
        public static string ExceptionPathDoesNotExist {
            get {
                return ResourceManager.GetString("ExceptionPathDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plugin {0} could not be found.  Unable to start plugin..
        /// </summary>
        public static string ExceptionPluginCouldNotBeFound {
            get {
                return ResourceManager.GetString("ExceptionPluginCouldNotBeFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plugin directory could not be found..
        /// </summary>
        public static string ExceptionPluginDirectoryNotFound {
            get {
                return ResourceManager.GetString("ExceptionPluginDirectoryNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a problem loading one or more plugins. Please check log..
        /// </summary>
        public static string ExceptionPluginWarning {
            get {
                return ResourceManager.GetString("ExceptionPluginWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception thrown.
        /// </summary>
        public static string ExceptionThrown {
            get {
                return ResourceManager.GetString("ExceptionThrown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to load any plugins.  Please check log..
        /// </summary>
        public static string ExceptionUnableToLoadPlugins {
            get {
                return ResourceManager.GetString("ExceptionUnableToLoadPlugins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading plugin: {0}.
        /// </summary>
        public static string LoadingPlugin {
            get {
                return ResourceManager.GetString("LoadingPlugin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found unmanaged DLL: {0}.
        /// </summary>
        public static string LogFoundUnmanagedDLL {
            get {
                return ResourceManager.GetString("LogFoundUnmanagedDLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loaded plugin: {0}.
        /// </summary>
        public static string LogPluginLoaded {
            get {
                return ResourceManager.GetString("LogPluginLoaded", resourceCulture);
            }
        }
    }
}
